{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hcysun/source/css/mark.less","path":"css/mark.less","modified":0,"renderable":1},{"_id":"themes/hcysun/source/css/mixin.less","path":"css/mixin.less","modified":0,"renderable":1},{"_id":"themes/hcysun/source/css/reset.less","path":"css/reset.less","modified":0,"renderable":1},{"_id":"themes/hcysun/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/hcysun/source/css/var.less","path":"css/var.less","modified":0,"renderable":1},{"_id":"themes/hcysun/source/img/search.png","path":"img/search.png","modified":0,"renderable":1},{"_id":"themes/hcysun/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hcysun/source/img/hcysun.png","path":"img/hcysun.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hcysun/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1502094513000},{"_id":"themes/hcysun/_config.yml","hash":"78e36917e656dbe3ac6b7b84e10e08246c9c8587","modified":1502097207000},{"_id":"source/_posts/.DS_Store","hash":"3d4ba34a056f1a8adc20a6bfffb59cfa9f5ad858","modified":1502265824000},{"_id":"source/_posts/Vue源码学习.md","hash":"82c09f7d96b69e3eded3f9800162e4c272d9442c","modified":1502260393000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 10.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 11.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 12.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 13.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 2.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 3.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 4.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 5.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 6.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 7.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 8.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本 9.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/hello-world的副本.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1502075799000},{"_id":"source/_posts/施佳.md","hash":"9fe2efdc4046fc172147b96f637f85590ee9b1de","modified":1502263481000},{"_id":"themes/hcysun/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1502077464000},{"_id":"themes/hcysun/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1502077464000},{"_id":"themes/hcysun/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1502077464000},{"_id":"themes/hcysun/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1502077464000},{"_id":"themes/hcysun/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1502077464000},{"_id":"themes/hcysun/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1502077464000},{"_id":"themes/hcysun/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1502077464000},{"_id":"themes/hcysun/layout/index.ejs","hash":"69cae21d1df6827ec9fbaddaf429cfe7c58cb19d","modified":1502276615000},{"_id":"themes/hcysun/layout/layout.ejs","hash":"7239e888e00e5f18c61f35a49299262129e8f933","modified":1502179695000},{"_id":"themes/hcysun/layout/post.ejs","hash":"e53a2abb9e32efca842d19695f6ff888fc135f57","modified":1502250072000},{"_id":"themes/hcysun/source/.DS_Store","hash":"8983992a301632f377142eb0de9b7125c7a7c97a","modified":1502110439000},{"_id":"themes/hcysun/layout/_partial/after-footer.ejs","hash":"9f658fbcdd281811b07d7884fd5e07c49f80a252","modified":1502197946000},{"_id":"themes/hcysun/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1502090373000},{"_id":"themes/hcysun/layout/_partial/head.ejs","hash":"4cab3b38497740b2a32ad513e306b2adbb51779e","modified":1502271434000},{"_id":"themes/hcysun/layout/_partial/header.ejs","hash":"3f87f727b252e6207f8c43b4355975a59b216dea","modified":1502107015000},{"_id":"themes/hcysun/layout/_partial/marks.ejs","hash":"579d7a2265c232b9c059d2330693867c875b5b6f","modified":1502109459000},{"_id":"themes/hcysun/source/css/mark.less","hash":"302fd059b5f3a573355252b5abd54fb3bd339ac8","modified":1502183291000},{"_id":"themes/hcysun/source/css/mixin.less","hash":"9c7af9ae0389764034edafbf38a5ba842f67a2ab","modified":1502249377000},{"_id":"themes/hcysun/source/css/reset.less","hash":"7200dd4eff15c7d38d1303fb00f83514932d7105","modified":1502249330000},{"_id":"themes/hcysun/source/css/style.less","hash":"bbca901584be6100c822a58f7f43f97fab9d4668","modified":1502276915000},{"_id":"themes/hcysun/source/css/var.less","hash":"6898ec84ac5c9457f302cdf98bb9b9afc7805562","modified":1502250678000},{"_id":"themes/hcysun/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1502106194000},{"_id":"themes/hcysun/source/img/search.png","hash":"390c074d6f875e9529e1ba0197a30148114c4946","modified":1502104719000},{"_id":"themes/hcysun/source/js/script.js","hash":"de05c83aeda0b6177062e11b875d4a36a1159a2e","modified":1502266028000},{"_id":"themes/hcysun/source/img/hcysun.png","hash":"34fbd037894e5d5e513195e9ebc48bfbe2ac5848","modified":1460816479000}],"Category":[{"name":"WebFrontEnd","_id":"cj64wzvgu0003ybfct3xgwc0h"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvgf0000ybfcne01eq1e","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Vue2.1.7源码学习","date":"2017-03-03T03:17:21.000Z","_content":"\n原本文章的名字叫做《源码解析》，不过后来想想，还是用“源码学习”来的合适一点，在没有彻底掌握源码中的每一个字母之前，“解析”就有点标题党了。建议在看这篇文章之前，最好打开2.1.7的源码对照着看，这样可能更容易理解。另外本人水平有限，文中有错误或不妥的地方望大家多多指正共同成长。\n\n补充：Vue 2.2 刚刚发布，作为一个系列文章的第一篇，本篇文章主要从Vue代码的组织，Vue构造函数的还原，原型的设计，以及参数选项的处理和已经被写烂了的数据绑定与如何使用 Virtual DOM 更新视图入手。从整体的大方向观察框架，这么看来 `V2.1.7` 对于理解 `V2.2` 的代码不会有太大的影响。该系列文章的后续文章，都会从最新的源码入手，并对改动的地方做相应的提示。\n\n<!-- more -->\n\n很久之前写过一篇文章：[JavaScript实现MVVM之我就是想监测一个普通对象的变化](http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/)，文章开头提到了我写博客的风格，还是那句话，只写努力让小白，甚至是小学生都能看明白的文章。这不免会导致对于某些同学来说这篇文章有些墨迹，所以大家根据自己的喜好，可以详细的看，也可以跳跃着看。\n\n## 一、从了解一个开源项目入手\n\n要看一个项目的源码，不要一上来就看，先去了解一下项目本身的元数据和依赖，除此之外最好也了解一下 PR 规则，Issue Reporting 规则等等。特别是“前端”开源项目，我们在看源码之前第一个想到的应该是：`package.json`文件。\n\n在 `package.json` 文件中，我们最应该关注的就是 `scripts` 字段和 `devDependencies` 以及 `dependencies` 字段，通过 `scripts` 字段我们可以知道项目中定义的脚本命令，通过 `devDependencies` 和 `dependencies` 字段我们可以了解项目的依赖情况。\n\n了解了这些之后，如果有依赖我们就 `npm install` 安装依赖就ok了。\n\n除了 `package.json` 之外，我们还要阅读项目的贡献规则文档，了解如何开始，一个好的开源项目肯定会包含这部分内容的，Vue也不例外：[https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md)，在这个文档里说明了一些行为准则，PR指南，Issue Reporting 指南，Development Setup 以及 项目结构。通过阅读这些内容，我们可以了解项目如何开始，如何开发以及目录的说明，下面是对重要目录和文件的简单介绍，这些内容你都可以去自己阅读获取：\n\n```\n├── build --------------------------------- 构建相关的文件，一般情况下我们不需要动\n├── dist ---------------------------------- 构建后文件的输出目录\n├── examples ------------------------------ 存放一些使用Vue开发的应用案例\n├── flow ---------------------------------- 类型声明，使用开源项目 [Flow](https://flowtype.org/)\n├── package.json -------------------------- 不解释\n├── test ---------------------------------- 包含所有测试文件\n├── src ----------------------------------- 这个是我们最应该关注的目录，包含了源码\n│   ├── entries --------------------------- 包含了不同的构建或包的入口文件\n│   │   ├── web-runtime.js ---------------- 运行时构建的入口，输出 dist/vue.common.js 文件，不包含模板(template)到render函数的编译器，所以不支持 `template` 选项，我们使用vue默认导出的就是这个运行时的版本。大家使用的时候要注意\n│   │   ├── web-runtime-with-compiler.js -- 独立构建版本的入口，输出 dist/vue.js，它包含模板(template)到render函数的编译器\n│   │   ├── web-compiler.js --------------- vue-template-compiler 包的入口文件\n│   │   ├── web-server-renderer.js -------- vue-server-renderer 包的入口文件\n│   ├── compiler -------------------------- 编译器代码的存放目录，将 template 编译为 render 函数\n│   │   ├── parser ------------------------ 存放将模板字符串转换成元素抽象语法树的代码\n│   │   ├── codegen ----------------------- 存放从抽象语法树(AST)生成render函数的代码\n│   │   ├── optimizer.js ------------------ 分析静态树，优化vdom渲染\n│   ├── core ------------------------------ 存放通用的，平台无关的代码\n│   │   ├── observer ---------------------- 反应系统，包含数据观测的核心代码\n│   │   ├── vdom -------------------------- 包含虚拟DOM创建(creation)和打补丁(patching)的代码\n│   │   ├── instance ---------------------- 包含Vue构造函数设计相关的代码\n│   │   ├── global-api -------------------- 包含给Vue构造函数挂载全局方法(静态方法)或属性的代码\n│   │   ├── components -------------------- 包含抽象出来的通用组件\n│   ├── server ---------------------------- 包含服务端渲染(server-side rendering)的相关代码\n│   ├── platforms ------------------------- 包含平台特有的相关代码\n│   ├── sfc ------------------------------- 包含单文件组件(.vue文件)的解析逻辑，用于vue-template-compiler包\n│   ├── shared ---------------------------- 包含整个代码库通用的代码\n```\n\n大概了解了重要目录和文件之后，我们就可以查看 [Development Setup](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup) 中的常用命令部分，来了解如何开始这个项目了，我们可以看到这样的介绍：\n\n```\n# watch and auto re-build dist/vue.js\n$ npm run dev\n\n# watch and auto re-run unit tests in Chrome\n$ npm run dev:test\n```\n\n现在，我们只需要运行 `npm run dev` 即可监测文件变化并自动重新构建输出 dist/vue.js，然后运行 `npm run dev:test` 来测试。不过为了方便，我会在 `examples` 目录新建一个例子，然后引用 dist/vue.js 这样，我们可以直接拿这个例子一边改Vue源码一边看自己写的代码想怎么玩怎么玩。\n\n## 二、看源码的小提示\n\n在真正步入源码世界之前，我想简单说一说看源码的技巧：\n\n### *注重大体框架，从宏观到微观*\n\n当你看一个项目代码的时候，最好是能找到一条主线，先把大体流程结构摸清楚，再深入到细节，逐项击破，拿Vue举个栗子：假如你已经知道Vue中数据状态改变后会采用virtual DOM的方式更新DOM，这个时候，如果你不了解virtual DOM，那么听我一句“暂且不要去研究内部具体实现，因为这会是你丧失主线”，而你仅仅需要知道virtual DOM分为三个步骤：\n\n>一、createElement(): 用 JavaScript对象(虚拟树) 描述 真实DOM对象(真实树)\n>二、diff(oldNode, newNode) : 对比新旧两个虚拟树的区别，收集差异\n>三、patch() : 将差异应用到真实DOM树\n\n有的时候 第二步 可能与 第三步 合并成一步(Vue 中的patch就是这样)，除此之外，还比如 `src/compiler/codegen` 内的代码，可能你不知道他写了什么，直接去看它会让你很痛苦，但是你只需要知道 codegen 是用来将抽象语法树(AST)生成render函数的就OK了，也就是生成类似下面这样的代码：\n\n```js\nfunction anonymous() {\n\twith(this){return _c('p',{attrs:{\"id\":\"app\"}},[_v(\"\\n      \"+_s(a)+\"\\n      \"),_c('my-com')])}\n}\n```\n\n当我们知道了一个东西存在，且知道它存在的目的，那么我们就很容易抓住这条主线，这个系列的第一篇文章就是围绕大体主线展开的。了解大体之后，我们就知道了每部分内容都是做什么的，比如 codegen 是生成类似上面贴出的代码所示的函数的，那么再去看codegen下的代码时，目的性就会更强，就更容易理解。\n\n## 三、Vue 的构造函数是什么样的\n\nbalabala一大堆，开始来干货吧。我们要做的第一件事就是搞清楚 Vue 构造函数到底是什么样子的。\n\n我们知道，我们要使用 `new` 操作符来调用 `Vue`，那么也就是说 `Vue` 应该是一个构造函数，所以我们第一件要做的事儿就是把构造函数先扒的一清二楚，如何寻找 `Vue` 构造函数呢？当然是从 entry 开始啦，还记的我们运行 `npm run dev` 命令后，会输出 `dist/vue.js` 吗，那么我们就去看看 `npm run dev` 干了什么：\n\n```\n\"dev\": \"TARGET=web-full-dev rollup -w -c build/config.js\",\n```\n\n首先将 TARGET 得值设置为 'web-full-dev'，然后，然后，然后如果你不了解 rollup 就应该简单去看一下啦......，简单的说就是一个JavaScript模块打包器，你可以把它简单的理解为和 webpack 一样，只不过它有他的优势，比如 Tree-shaking (webpack2也有)，但同样，在某些场景它也有他的劣势。。。废话不多说，其中 `-w` 就是watch，`-c` 就是指定配置文件为 `build/config.js` ，我们打开这个配置文件看一看：\n\n```js\n// 引入依赖，定义 banner\n...\n\n// builds 对象\nconst builds = {\n\t...\n\t// Runtime+compiler development build (Browser)\n\t'web-full-dev': {\n\t    entry: path.resolve(__dirname, '../src/entries/web-runtime-with-compiler.js'),\n\t    dest: path.resolve(__dirname, '../dist/vue.js'),\n\t    format: 'umd',\n\t    env: 'development',\n\t    alias: { he: './entity-decoder' },\n\t    banner\n\t},\n\t...\n}\n\n// 生成配置的方法\nfunction genConfig(opts){\n\t...\n}\n\nif (process.env.TARGET) {\n  module.exports = genConfig(builds[process.env.TARGET])\n} else {\n  exports.getBuild = name => genConfig(builds[name])\n  exports.getAllBuilds = () => Object.keys(builds).map(name => genConfig(builds[name]))\n}\n```\n\n上面的代码是简化过的，当我们运行 `npm run dev` 的时候 `process.env.TARGET` 的值等于 'web-full-dev'，所以\n\n```js\nmodule.exports = genConfig(builds[process.env.TARGET])\n```\n\n这句代码相当于：\n\n```js\nmodule.exports = genConfig({\n    entry: path.resolve(__dirname, '../src/entries/web-runtime-with-compiler.js'),\n    dest: path.resolve(__dirname, '../dist/vue.js'),\n    format: 'umd',\n    env: 'development',\n    alias: { he: './entity-decoder' },\n    banner\n})\n```\n\n最终，genConfig 函数返回一个 config 对象，这个config对象就是Rollup的配置对象。那么我们就不难看到，入口文件是：\n\n```\nsrc/entries/web-runtime-with-compiler.js\n```\n\n我们打开这个文件，不要忘了我们的主题，我们在寻找Vue构造函数，所以当我们看到这个文件的第一行代码是：\n\n```js\nimport Vue from './web-runtime'\n```\n\n这个时候，你就应该知道，这个文件暂时与你无缘，你应该打开 `web-runtime.js` 文件，不过当你打开这个文件时，你发现第一行是这样的：\n\n```js\nimport Vue from 'core/index'\n```\n\n依照此思路，最终我们寻找到Vue构造函数的位置应该是在 `src/core/instance/index.js` 文件中，其实我们猜也猜得到，上面介绍目录的时候说过：instance 是存放Vue构造函数设计相关代码的目录。总结一下，我们寻找的过程是这样的：\n\n![寻找 Vue 构造函数路线](http://7xlolm.com1.z0.glb.clouddn.com/vueimg2BD0DCC6-D689-4809-93D3-2F979E8F8C0C.png)\n\n我们回头看一看 `src/core/instance/index.js` 文件，很简单：\n\n```js\nimport { initMixin } from './init'\nimport { stateMixin } from './state'\nimport { renderMixin } from './render'\nimport { eventsMixin } from './events'\nimport { lifecycleMixin } from './lifecycle'\nimport { warn } from '../util/index'\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n\ninitMixin(Vue)\nstateMixin(Vue)\neventsMixin(Vue)\nlifecycleMixin(Vue)\nrenderMixin(Vue)\n\nexport default Vue\n```\n\n引入依赖，定义 Vue 构造函数，然后以Vue构造函数为参数，调用了五个方法，最后导出 Vue。这五个方法分别来自五个文件：`init.js` `state.js` `render.js` `events.js` 以及 `lifecycle.js`。\n\n打开这五个文件，找到相应的方法，你会发现，这些方法的作用，就是在 Vue 的原型 prototype 上挂载方法或属性，经历了这五个方法后的Vue会变成这样：\n\n```js\n// initMixin(Vue)\tsrc/core/instance/init.js **************************************************\nVue.prototype._init = function (options?: Object) {}\n\n// stateMixin(Vue)\tsrc/core/instance/state.js **************************************************\nVue.prototype.$data\nVue.prototype.$set = set\nVue.prototype.$delete = del\nVue.prototype.$watch = function(){}\n\n// renderMixin(Vue)\tsrc/core/instance/render.js **************************************************\nVue.prototype.$nextTick = function (fn: Function) {}\nVue.prototype._render = function (): VNode {}\nVue.prototype._s = _toString\nVue.prototype._v = createTextVNode\nVue.prototype._n = toNumber\nVue.prototype._e = createEmptyVNode\nVue.prototype._q = looseEqual\nVue.prototype._i = looseIndexOf\nVue.prototype._m = function(){}\nVue.prototype._o = function(){}\nVue.prototype._f = function resolveFilter (id) {}\nVue.prototype._l = function(){}\nVue.prototype._t = function(){}\nVue.prototype._b = function(){}\nVue.prototype._k = function(){}\n\n// eventsMixin(Vue)\tsrc/core/instance/events.js **************************************************\nVue.prototype.$on = function (event: string, fn: Function): Component {}\nVue.prototype.$once = function (event: string, fn: Function): Component {}\nVue.prototype.$off = function (event?: string, fn?: Function): Component {}\nVue.prototype.$emit = function (event: string): Component {}\n\n// lifecycleMixin(Vue)\tsrc/core/instance/lifecycle.js **************************************************\nVue.prototype._mount = function(){}\nVue.prototype._update = function (vnode: VNode, hydrating?: boolean) {}\nVue.prototype._updateFromParent = function(){}\nVue.prototype.$forceUpdate = function () {}\nVue.prototype.$destroy = function () {}\n```\n\n这样就结束了吗？并没有，根据我们之前寻找 Vue 的路线，这只是刚刚开始，我们追溯路线往回走，那么下一个处理 Vue 构造函数的应该是 `src/core/index.js` 文件，我们打开它：\n\n```js\nimport Vue from './instance/index'\nimport { initGlobalAPI } from './global-api/index'\nimport { isServerRendering } from 'core/util/env'\n\ninitGlobalAPI(Vue)\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n})\n\nVue.version = '__VERSION__'\n\nexport default Vue\n```\n\n这个文件也很简单，从 instance/index 中导入已经在原型上挂载了方法和属性后的 Vue，然后导入 `initGlobalAPI` 和 `isServerRendering`，之后将Vue作为参数传给  `initGlobalAPI` ，最后又在 `Vue.prototype` 上挂载了 `$isServer` ，在 `Vue` 上挂载了 `version` 属性。\n\n`initGlobalAPI` 的作用是在 `Vue` 构造函数上挂载静态属性和方法，`Vue` 在经过 `initGlobalAPI` 之后，会变成这样：\n\n```js\n// src/core/index.js / src/core/global-api/index.js\nVue.config\nVue.util = util\nVue.set = set\nVue.delete = del\nVue.nextTick = util.nextTick\nVue.options = {\n    components: {\n        KeepAlive\n    },\n    directives: {},\n    filters: {},\n    _base: Vue\n}\nVue.use\nVue.mixin\nVue.cid = 0\nVue.extend\nVue.component = function(){}\nVue.directive = function(){}\nVue.filter = function(){}\n\nVue.prototype.$isServer\nVue.version = '__VERSION__'\n```\n\n其中，稍微复杂一点的就是 `Vue.options`，大家稍微分析分析就会知道他的确长成那个样子。下一个就是 `web-runtime.js` 文件了，`web-runtime.js` 文件主要做了三件事儿：\n\n> 1、覆盖 `Vue.config` 的属性，将其设置为平台特有的一些方法\n> 2、`Vue.options.directives` 和 `Vue.options.components` 安装平台特有的指令和组件\n> 3、在 `Vue.prototype` 上定义 `__patch__` 和 `$mount`\n\n经过 `web-runtime.js` 文件之后，`Vue` 变成下面这个样子：\n\n```js\n// 安装平台特定的utils\nVue.config.isUnknownElement = isUnknownElement\nVue.config.isReservedTag = isReservedTag\nVue.config.getTagNamespace = getTagNamespace\nVue.config.mustUseProp = mustUseProp\n// 安装平台特定的 指令 和 组件\nVue.options = {\n    components: {\n        KeepAlive,\n        Transition,\n        TransitionGroup\n    },\n    directives: {\n        model,\n        show\n    },\n    filters: {},\n    _base: Vue\n}\nVue.prototype.__patch__\nVue.prototype.$mount\n```\n\n这里大家要注意的是 `Vue.options` 的变化。另外这里的 `$mount` 方法很简单：\n\n```js\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return this._mount(el, hydrating)\n}\n```\n\n首先根据是否是浏览器环境决定要不要 `query(el)` 获取元素，然后将 `el` 作为参数传递给 `this._mount()`。\n\n最后一个处理 Vue 的文件就是入口文件 `web-runtime-with-compiler.js` 了，该文件做了两件事：\n\n1、缓存来自 `web-runtime.js` 文件的 `$mount` 函数\n\n```js\nconst mount = Vue.prototype.$mount\n```\n\n然后覆盖覆盖了 `Vue.prototype.$mount`\n\n2、在 Vue 上挂载 `compile`\n\n```js\nVue.compile = compileToFunctions\n```\n\ncompileToFunctions 函数的作用，就是将模板 `template` 编译为render函数。\n\n至此，我们算是还原了 Vue 构造函数，总结一下：\n\n> 1、`Vue.prototype` 下的属性和方法的挂载主要是在 `src/core/instance` 目录中的代码处理的\n\n> 2、`Vue` 下的静态属性和方法的挂载主要是在 `src/core/global-api` 目录下的代码处理的\n\n> 3、`web-runtime.js` 主要是添加web平台特有的配置、组件和指令，`web-runtime-with-compiler.js` 给Vue的 `$mount` 方法添加 `compiler` 编译器，支持 `template`。\n\n## 四、一个贯穿始终的例子\n\n在了解了 `Vue` 构造函数的设计之后，接下来，我们一个贯穿始终的例子就要登场了，掌声有请：\n\n```js\nlet v = new Vue({\n\tel: '#app',\n\tdata: {\n\t\ta: 1,\n\t\tb: [1, 2, 3]\n\t}\n})\n```\n\n好吧，我承认这段代码你家没满月的孩子都会写了。这段代码就是我们贯穿始终的例子，它就是这篇文章的主线，在后续的讲解中，都会以这段代码为例，当讲到必要的地方，会为其添加选项，比如讲计算属性的时候当然要加上一个 `computed` 属性了。不过在最开始，我只传递了两个选项 `el` 以及 `data`，“我们看看接下来会发生什么，让我们拭目以待“ ---- NBA球星在接受采访时最喜欢说这句话。\n\n*当我们按照例子那样编码使用Vue的时候，Vue都做了什么？*\n\n想要知道Vue都干了什么，我们就要找到 Vue 初始化程序，查看 Vue 构造函数：\n\n```js\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n```\n\n我们发现，`_init()` 方法就是Vue调用的第一个方法，然后将我们的参数 `options` 透传了过去。在调用 `_init()` 之前，还做了一个安全模式的处理，告诉开发者必须使用 `new` 操作符调用 Vue。根据之前我们的整理，`_init()` 方法应该是在 `src/core/instance/init.js` 文件中定义的，我们打开这个文件查看 `_init()` 方法：\n\n```js\n  Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n    // a flag to avoid this being observed\n    vm._isVue = true\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    // expose real self\n    vm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    callHook(vm, 'beforeCreate')\n    initState(vm)\n    callHook(vm, 'created')\n    initRender(vm)\n  }\n```\n\n`_init()` 方法在一开始的时候，在 `this` 对象上定义了两个属性：`_uid` 和 `_isVue`，然后判断有没有定义 `options._isComponent`，在使用 Vue 开发项目的时候，我们是不会使用 `_isComponent` 选项的，这个选项是 Vue 内部使用的，按照本节开头的例子，这里会走 `else` 分支，也就是这段代码：\n\n```js\n  vm.$options = mergeOptions(\n    resolveConstructorOptions(vm.constructor),\n    options || {},\n    vm\n  )\n```\n\n这样 `Vue` 第一步所做的事情就来了：<span style=\"color: red;\">*使用策略对象合并参数选项*</span>\n\n可以发现，Vue使用 `mergeOptions` 来处理我们调用Vue时传入的参数选项(options)，然后将返回值赋值给 `this.$options` (vm === this)，传给 `mergeOptions` 方法三个参数，我们分别来看一看，首先是：`resolveConstructorOptions(vm.constructor)`，我们查看一下这个方法：\n\n```js\nexport function resolveConstructorOptions (Ctor: Class<Component>) {\n  let options = Ctor.options\n  if (Ctor.super) {\n    const superOptions = Ctor.super.options\n    const cachedSuperOptions = Ctor.superOptions\n    const extendOptions = Ctor.extendOptions\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed\n      Ctor.superOptions = superOptions\n      extendOptions.render = options.render\n      extendOptions.staticRenderFns = options.staticRenderFns\n      extendOptions._scopeId = options._scopeId\n      options = Ctor.options = mergeOptions(superOptions, extendOptions)\n      if (options.name) {\n        options.components[options.name] = Ctor\n      }\n    }\n  }\n  return options\n}\n```\n\n这个方法接收一个参数 `Ctor`，通过传入的 `vm.constructor` 我们可以知道，其实就是 `Vue` 构造函数本身。所以下面这句代码：\n\n```js\nlet options = Ctor.options\n```\n\n相当于：\n\n```js\nlet options = Vue.options\n```\n\n大家还记得 `Vue.options` 吗？在寻找Vue构造函数一节里，我们整理了 `Vue.options` 应该长成下面这个样子：\n\n```js\nVue.options = {\n    components: {\n        KeepAlive,\n        Transition,\n        TransitionGroup\n    },\n    directives: {\n        model,\n        show\n    },\n    filters: {},\n    _base: Vue\n}\n```\n\n之后判断是否定义了 `Vue.super` ，这个是用来处理继承的，我们后续再讲，在本例中，`resolveConstructorOptions` 方法直接返回了 `Vue.options`。也就是说，传递给 `mergeOptions` 方法的第一个参数就是 `Vue.options`。\n\n传给 `mergeOptions` 方法的第二个参数是我们调用Vue构造函数时的参数选项，第三个参数是 `vm` 也就是 `this` 对象，按照本节开头的例子那样使用 Vue，最终运行的代码应该如下：\n\n```js\n  vm.$options = mergeOptions(\n  \t// Vue.options\n    {\n\t    components: {\n\t        KeepAlive,\n\t        Transition,\n\t        TransitionGroup\n\t    },\n\t    directives: {\n\t        model,\n\t        show\n\t    },\n\t    filters: {},\n\t    _base: Vue\n\t},\n\t// 调用Vue构造函数时传入的参数选项 options\n    {\n    \tel: '#app',\n\t\tdata: {\n\t\t\ta: 1,\n\t\t\tb: [1, 2, 3]\n\t\t}\n    },\n    // this\n    vm\n  )\n```\n\n了解了这些，我们就可以看看 `mergeOptions` 到底做了些什么了，根据引用寻找到 `mergeOptions` 应该是在 `src/core/util/options.js` 文件中定义的。这个文件第一次看可能会头大，下面是我处理后的简略展示，大家看上去应该更容易理解了：\n\n```js\n// 1、引用依赖\nimport Vue from '../instance/index'\n其他引用...\n\n// 2、合并父子选项值为最终值的策略对象，此时 strats 是一个空对象，因为 config.optionMergeStrategies = Object.create(null)\nconst strats = config.optionMergeStrategies\n// 3、在 strats 对象上定义与参数选项名称相同的方法\nstrats.el = \nstrats.propsData = function (parent, child, vm, key){}\nstrats.data = function (parentVal, childVal, vm)\n\nconfig._lifecycleHooks.forEach(hook => {\n  strats[hook] = mergeHook\n})\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets\n})\n\nstrats.watch = function (parentVal, childVal)\n\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal: ?Object, childVal: ?Object)\n// 默认的合并策略，如果有 `childVal` 则返回 `childVal` 没有则返回 `parentVal`\nconst defaultStrat = function (parentVal: any, childVal: any): any {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n}\n\n// 4、mergeOptions 中根据参数选项调用同名的策略方法进行合并处理\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n\n  // 其他代码\n  ...\n\n  const options = {}\n  let key\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n\t\n}\n\n```\n\n上面的代码中，我省略了一些工具函数，例如 `mergeHook` 和 `mergeAssets` 等等，唯一需要注意的是这段代码：\n\n```js\nconfig._lifecycleHooks.forEach(hook => {\n  strats[hook] = mergeHook\n})\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets\n})\n```\n\n`config` 对象引用自 `src/core/config.js` 文件，最终的结果就是在 `strats` 下添加了相应的生命周期选项的合并策略函数为 `mergeHook`，添加指令(directives)、组件(components)、过滤器(filters)等选项的合并策略函数为 `mergeAssets`。\n\n这样看来就清晰多了，拿我们贯穿本文的例子来说：\n\n```js\nlet v = new Vue({\n\tel: '#app',\n\tdata: {\n\t\ta: 1,\n\t\tb: [1, 2, 3]\n\t}\n})\n```\n\n其中 `el` 选项会使用 `defaultStrat` 默认策略函数处理，`data` 选项则会使用 `strats.data` 策略函数处理，并且根据 `strats.data` 中的逻辑，`strats.data` 方法最终会返回一个函数：`mergedInstanceDataFn`。\n\n这里就不详细的讲解每一个策略函数的内容了，后续都会讲到，这里我们还是抓住主线理清思路为主，只需要知道Vue在处理选项的时候，使用了一个策略对象对父子选项进行合并。并将最终的值赋值给实例下的 `$options` 属性即：`this.$options`，那么我们继续查看 `_init()` 方法在合并完选项之后，又做了什么：\n\n合并完选项之后，Vue 第二部做的事情就来了：<span style=\"color: red;\">*初始化工作与Vue实例对象的设计*</span>\n\n前面讲了 Vue 构造函数的设计，并且整理了 *Vue原型属性与方法* 和 *Vue静态属性与方法*，而 Vue 实例对象就是通过构造函数创造出来的，让我们来看一看 Vue 实例对象是如何设计的，下面的代码是 `_init()` 方法合并完选项之后的代码：\n\n```js\n\t/* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    // expose real self\n\tvm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    callHook(vm, 'beforeCreate')\n    initState(vm)\n    callHook(vm, 'created')\n    initRender(vm)\n```\n\n根据上面的代码，在生产环境下会为实例添加两个属性，并且属性值都为实例本身：\n\n```js\nvm._renderProxy = vm\nvm._self = vm\n```\n\n然后，调用了四个 `init*` 方法分别为：`initLifecycle`、`initEvents`、`initState`、`initRender`，且在 `initState` 前后分别回调了生命周期钩子 `beforeCreate` 和 `created`，而 `initRender` 是在 `created` 钩子执行之后执行的，看到这里，也就明白了为什么 created 的时候不能操作DOM了。因为这个时候还没有渲染真正的DOM元素到文档中。`created` 仅仅代表数据状态的初始化完成。\n\n根据四个 `init*` 方法的引用关系打开对应的文件查看对应的方法，我们发现，这些方法是在处理Vue实例对象，以及做一些初始化的工作，类似整理Vue构造函数一样，我同样针对Vue实例做了属性和方法的整理，如下：\n\n```js\n// 在 Vue.prototype._init 中添加的属性 \t\t**********************************************************\nthis._uid = uid++\nthis._isVue = true\nthis.$options = {\n    components,\n    directives,\n    filters,\n    _base,\n    el,\n    data: mergedInstanceDataFn()\n}\nthis._renderProxy = this\nthis._self = this\n\n// 在 initLifecycle 中添加的属性\t\t**********************************************************\nthis.$parent = parent\nthis.$root = parent ? parent.$root : this\n \nthis.$children = []\nthis.$refs = {}\n\nthis._watcher = null\nthis._inactive = false\nthis._isMounted = false\nthis._isDestroyed = false\nthis._isBeingDestroyed = false\n\n// 在 initEvents\t 中添加的属性\t \t**********************************************************\nthis._events = {}\nthis._updateListeners = function(){}\n\n// 在 initState 中添加的属性\t\t**********************************************************\nthis._watchers = []\n    // initData\n    this._data\n\n// 在 initRender\t 中添加的属性 \t**********************************************************\nthis.$vnode = null // the placeholder node in parent tree\nthis._vnode = null // the root of the child tree\nthis._staticTrees = null\nthis.$slots\nthis.$scopedSlots\nthis._c\nthis.$createElement\n```\n\n以上就是一个Vue实例所包含的属性和方法，除此之外要注意的是，在 `initEvents` 中除了添加属性之外，如果有 `vm.$options._parentListeners` 还要调用 `vm._updateListeners()` 方法，在 `initState` 中又调用了一些其他init方法，如下：\n\n```js\nexport function initState (vm: Component) {\n  vm._watchers = []\n  initProps(vm)\n  initMethods(vm)\n  initData(vm)\n  initComputed(vm)\n  initWatch(vm)\n}\n```\n\n最后在 `initRender` 中如果有 `vm.$options.el` 还要调用 `vm.$mount(vm.$options.el)`，如下：\n\n```js\n  if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n  }\n```\n\n这就是为什么如果不传递 `el` 选项就需要手动 mount 的原因了。\n\n那么我们依照我们本节开头的的例子，以及初始化的先后顺序来逐一看一看都发生了什么。我们将 `initState` 中的 `init*` 方法展开来看，执行顺序应该是这样的（从上到下的顺序执行）：\n\n```\ninitLifecycle(vm)\ninitEvents(vm)\ncallHook(vm, 'beforeCreate')\ninitProps(vm)\ninitMethods(vm)\ninitData(vm)\ninitComputed(vm)\ninitWatch(vm)\ncallHook(vm, 'created')\ninitRender(vm)\n```\n\n首先是 `initLifecycle`，这个函数的作用就是在实例上添加一些属性，然后是 `initEvents`，由于 `vm.$options._parentListeners` 的值为 `undefined` 所以也仅仅是在实例上添加属性， `vm._updateListeners(listeners)` 并不会执行，由于我们只传递了 `el` 和 `data`，所以 `initProps`、`initMethods`、`initComputed`、`initWatch` 这四个方法什么都不会做，只有 `initData` 会执行。最后是 `initRender`，除了在实例上添加一些属性外，由于我们传递了 `el` 选项，所以会执行 `vm.$mount(vm.$options.el)`。\n\n综上所述：按照我们的例子那样写，初始化工作只包含两个主要内容即：`initData` 和 `initRender`。\n\n## 五、通过`initData`看Vue的数据响应系统\n\nVue的数据响应系统包含三个部分：`Observer`、`Dep`、`Watcher`。关于数据响应系统的内容真的已经被文章讲烂了，所以我就简单的说一下，力求大家能理解就ok，我们还是先看一下 `initData` 中的代码：\n\n```\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === 'function'\n    ? data.call(vm)\n    : data || {}\n  if (!isPlainObject(data)) {\n    data = {}\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    )\n  }\n  // proxy data on instance\n  const keys = Object.keys(data)\n  const props = vm.$options.props\n  let i = keys.length\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== 'production' && warn(\n        `The data property \"${keys[i]}\" is already declared as a prop. ` +\n        `Use prop default value instead.`,\n        vm\n      )\n    } else {\n      proxy(vm, keys[i])\n    }\n  }\n  // observe data\n  observe(data)\n  data.__ob__ && data.__ob__.vmCount++\n}\n```\n\n首先，先拿到 data 数据：`let data = vm.$options.data`，大家还记得此时 `vm.$options.data` 的值应该是通过 `mergeOptions` 合并处理后的 `mergedInstanceDataFn` 函数吗？所以在得到 data 后，它又判断了 data 的数据类型是不是 'function'，最终的结果是：data 还是我们传入的数据选项的 data，即：\n\n```\ndata: {\n\ta: 1,\n\tb: [1, 2, 3]\n}\n```\n\n然后在实例对象上定义 `_data` 属性，该属性与 `data` 是相同的引用。\n\n然后是一个 `while` 循环，循环的目的是在实例对象上对数据进行代理，这样我们就能通过 `this.a` 来访问 `data.a` 了，代码的处理是在 `proxy` 函数中，该函数非常简单，仅仅是在实例对象上设置与 `data` 属性同名的访问器属性，然后使用 `_data` 做数据劫持，如下：\n\n```\nfunction proxy (vm: Component, key: string) {\n  if (!isReserved(key)) {\n    Object.defineProperty(vm, key, {\n      configurable: true,\n      enumerable: true,\n      get: function proxyGetter () {\n        return vm._data[key]\n      },\n      set: function proxySetter (val) {\n        vm._data[key] = val\n      }\n    })\n  }\n}\n```\n\n做完数据的代理，就正式进入响应系统，\n\n```\nobserve(data)\n```\n\n我们说过，数据响应系统主要包含三部分：`Observer`、`Dep`、`Watcher`，代码分别存放在：`observer/index.js`、`observer/dep.js` 以及 `observer/watcher.js` 文件中，这回我们换一种方式，我们先不看其源码，大家先跟着我的思路来思考，最后回头再去看代码，你会有一种：”奥，不过如此“的感觉。\n\n假如，我们有如下代码：\n\n```js\nvar data = {\n    a: 1,\n    b: {\n        c: 2\n    }\n}\n\nobserver(data)\n\nnew Watch('a', () => {\n    alert(9)\n})\nnew Watch('a', () => {\n    alert(90)\n})\nnew Watch('b.c', () => {\n    alert(80)\n})\n```\n\n这段代码目的是，首先定义一个数据对象 `data`，然后通过 observer 对其进行观测，之后定义了三个观察者，当数据有变化时，执行相应的方法，这个功能使用Vue的实现原来要如何去实现？其实就是在问 `observer` 怎么写？`Watch` 构造函数又怎么写？接下来我们逐一实现。\n\n首先，observer 的作用是：将数据对象data的属性转换为访问器属性：\n\n```\nclass Observer {\n    constructor (data) {\n        this.walk(data)\n    }\n    walk (data) {\n        // 遍历 data 对象属性，调用 defineReactive 方法\n        let keys = Object.keys(data)\n        for(let i = 0; i < keys.length; i++){\n            defineReactive(data, keys[i], data[keys[i]])\n        }\n    }\n}\n\n// defineReactive方法仅仅将data的属性转换为访问器属性\nfunction defineReactive (data, key, val) {\n\t// 递归观测子属性\n    observer(val)\n\n    Object.defineProperty(data, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            return val\n        },\n        set: function (newVal) {\n            if(val === newVal){\n                return\n            }\n            // 对新值进行观测\n            observer(newVal)\n        }\n    })\n}\n\n// observer 方法首先判断data是不是纯JavaScript对象，如果是，调用 Observer 类进行观测\nfunction observer (data) {\n    if(Object.prototype.toString.call(data) !== '[object Object]') {\n        return\n    }\n    new Observer(data)\n}\n```\n\n上面的代码中，我们定义了 observer 方法，该方法检测了数据data是不是纯JavaScript对象，如果是就调用 `Observer` 类，并将 `data` 作为参数透传。在 `Observer` 类中，我们使用 `walk` 方法对数据data的属性循环调用 `defineReactive` 方法，`defineReactive` 方法很简单，仅仅是将数据data的属性转为访问器属性，并对数据进行递归观测，否则只能观测数据data的直属子属性。这样我们的第一步工作就完成了，当我们修改或者获取data属性值的时候，通过 `get` 和 `set` 即能获取到通知。\n\n我们继续往下看，来看一下 `Watch`：\n\n```\nnew Watch('a', () => {\n    alert(9)\n})\n```\n\n现在的问题是，`Watch` 要怎么和 `observer` 关联？？？？？？？我们看看 `Watch` 它知道些什么，通过上面调用 `Watch` 的方式，传递给 `Watch` 两个参数，一个是 'a' 我们可以称其为表达式，另外一个是回调函数。所以我们目前只能写出这样的代码：\n\n```\nclass Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n    }\n}\n```\n\n那么要怎么关联呢，大家看下面的代码会发生什么：\n\n```\nclass Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n        data[exp]\n    }\n}\n```\n\n多了一句 `data[exp]`，这句话是在干什么？是不是在获取 `data` 下某个属性的值，比如 exp 为 'a' 的话，那么 `data[exp]` 就相当于在获取 `data.a` 的值，那这会放生什么？大家不要忘了，此时数据 `data` 下的属性已经是访问器属性了，所以这么做的结果会直接触发对应属性的 `get` 函数，这样我们就成功的和 `observer` 产生了关联，但这样还不够，我们还是没有达到目的，不过我们已经无限接近了，我们继续思考看一下可不可以这样：\n\n> 既然在 `Watch` 中对表达式求值，能够触发 `observer` 的 `get`，那么可不可以在 `get` 中收集 `Watch` 中函数呢？\n\n答案是可以的，不过这个时候我们就需要 `Dep` 出场了，它是一个依赖收集器。我们的思路是：`data` 下的每一个属性都有一个唯一的 `Dep` 对象，在 `get` 中收集仅针对该属性的依赖，然后在 `set` 方法中触发所有收集的依赖，这样就搞定了，看如下代码：\n\n```\nclass Dep {\n    constructor () {\n        this.subs = []\n    }\n    addSub () {\n        this.subs.push(Dep.target)\n    }\n    notify () {\n        for(let i = 0; i < this.subs.length; i++){\n            this.subs[i].fn()\n        }\n    }\n}\nDep.target = null\nfunction pushTarget(watch){\n    Dep.target = watch\n}\n\nclass Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n        pushTarget(this)\n        data[exp]\n    }\n}\n```\n\n上面的代码中，我们在 `Watch` 中增加了 `pushTarget(this)`，可以发现，这句代码的作用是将 `Dep.target` 的值设置为该Watch对象。在 `pushTarget` 之后我们才对表达式进行求值，接着，我们修改 `defineReactive` 代码如下\n\n```\nfunction defineReactive (data, key, val) {\n    observer(val)\n    let dep = new Dep()\t\t// 新增\n    Object.defineProperty(data, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            dep.addSub()\t// 新增\n            return val\n        },\n        set: function (newVal) {\n            if(val === newVal){\n                return\n            }\n            observer(newVal)\n            dep.notify()\t// 新增\n        }\n    })\n}\n```\n\n如标注，新增了三句代码，我们知道，`Watch` 中对表达式求值会触发 `get` 方法，我们在 `get` 方法中调用了 `dep.addSub`，也就执行了这句代码：`this.subs.push(Dep.target)`，由于在这句代码执行之前，`Dep.target` 的值已经被设置为一个 `Watch` 对象了，所以最终结果就是收集了一个 `Watch` 对象，然后在 `set` 方法中我们调用了 `dep.notify`，所以当data属性值变化的时候，就会通过 `dep.notify` 循环调用所有收集的Watch对象中的回调函数：\n\n```\nnotify () {\n    for(let i = 0; i < this.subs.length; i++){\n        this.subs[i].fn()\n    }\n}\n```\n\n这样 `observer`、`Dep`、`Watch` 三者就联系成为一个有机的整体，实现了我们最初的目标，完整的代码可以戳这里：[observer-dep-watch](https://github.com/HcySunYang/observer-dep-watch)。这里还给大家挖了个坑，因为我们没有处理对数组的观测，由于比较复杂并且这又不是我们讨论的重点，如果大家想了解可以戳我的这篇文章：[JavaScript实现MVVM之我就是想监测一个普通对象的变化](http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/)，另外，在 Watch 中对表达式求值的时候也只做了直接子属性的求值，所以如果 exp 的值为 'a.b' 的时候，就不可以用了，Vue的做法是使用 `.` 分割表达式字符串为数组，然后遍历一下对其进行求值，大家可以查看其源码。如下：\n\n```\n/**\n * Parse simple path.\n */\nconst bailRE = /[^\\w.$]/\nexport function parsePath (path: string): any {\n  if (bailRE.test(path)) {\n    return\n  } else {\n    const segments = path.split('.')\n    return function (obj) {\n      for (let i = 0; i < segments.length; i++) {\n        if (!obj) return\n        obj = obj[segments[i]]\n      }\n      return obj\n    }\n  }\n}\n```\n\nVue 的求值代码是在 `src/core/util/lang.js` 文件中 `parsePath` 函数中实现的。总结一下Vue的依赖收集过程应该是这样的：\n\n![Vue的依赖收集过程](http://7xlolm.com1.z0.glb.clouddn.com/vueimgdep.png)\n\n实际上，Vue并没有直接在 `get` 中调用 `addSub`，而是调用的 `dep.depend`，目的是将当前的 dep 对象收集到 watch 对象中，如果要完整的流程，应该是这样的：（大家注意数据的每一个字段都拥有自己的 `dep` 对象和 `get` 方法。）\n\n![Vue完整的收集依赖的流程](http://7xlolm.com1.z0.glb.clouddn.com/all.png)\n\n这样 Vue 就建立了一套数据响应系统，之前我们说过，按照我们的例子那样写，初始化工作只包含两个主要内容即：`initData` 和 `initRender`。现在 `initData` 我们分析完了，接下来看一看 `initRender`\n\n## 六、通过`initRender`看Vue的 render(渲染) 与 re-render(重新渲染)\n\n在 `initRender` 方法中，因为我们的例子中传递了 `el` 选项，所以下面的代码会执行：\n\n```\n  if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n  }\n```\n\n这里，调用了 `$mount` 方法，在还原Vue构造函数的时候，我们整理过所有的方法，其中 `$mount` 方法在两个地方出现过：\n\n1、在 `web-runtime.js` 文件中：\n\n```\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return this._mount(el, hydrating)\n}\n```\n\n它的作用是通过 `el` 获取相应的DOM元素，然后调用 `lifecycle.js` 文件中的 `_mount` 方法。\n\n2、在 `web-runtime-with-compiler.js` 文件中：\n\n```\n// 缓存了来自 web-runtime.js 的 $mount 方法\nconst mount = Vue.prototype.$mount\n// 重写 $mount 方法\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  // 根据 el 获取相应的DOM元素\n  el = el && query(el)\n  // 不允许你将 el 挂载到 html 标签或者 body 标签\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // 如果我们没有写 render 选项，那么就尝试将 template 或者 el 转化为 render 函数\n  if (!options.render) {\n    let template = options.template\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el)\n    }\n    if (template) {\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        warn,\n        shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n    }\n  }\n  // 调用已经缓存下来的 web-runtime.js 文件中的 $mount 方法\n  return mount.call(this, el, hydrating)\n}\n```\n\n分析一下可知 `web-runtime-with-compiler.js` 的逻辑如下：\n\n1、缓存来自 `web-runtime.js` 文件的 `$mount` 方法\n\n2、判断有没有传递 `render` 选项，如果有直接调用来自 `web-runtime.js` 文件的 $mount 方法\n\n3、如果没有传递 `render` 选项，那么查看有没有 `template` 选项，如果有就使用 `compileToFunctions` 函数根据其内容编译成 `render` 函数\n\n4、如果没有 `template` 选项，那么查看有没有 `el` 选项，如果有就使用 `compileToFunctions` 函数将其内容(template = getOuterHTML(el))编译成 `render` 函数\n\n5、将编译成的 `render` 函数挂载到 `this.$options` 属性下，并调用缓存下来的 `web-runtime.js` 文件中的 $mount 方法\n\n简单的用一张图表示 `mount` 方法的调用关系，从上至下调用：\n\n![mount调用关系](http://7xlolm.com1.z0.glb.clouddn.com/vueimgmount.png)\n\n不过不管怎样，我们发现这些步骤的最终目的是生成 `render` 函数，然后再调用 `lifecycle.js` 文件中的 `_mount` 方法，我们看看这个方法做了什么事情，查看 `_mount` 方法的代码，这是简化过得：\n\n```\n  Vue.prototype._mount = function (\n    el?: Element | void,\n    hydrating?: boolean\n  ): Component {\n    const vm: Component = this\n\n    // 在Vue实例对象上添加 $el 属性，指向挂载点元素\n    vm.$el = el\n\n    // 触发 beforeMount 生命周期钩子\n    callHook(vm, 'beforeMount')\n\n    vm._watcher = new Watcher(vm, () => {\n      vm._update(vm._render(), hydrating)\n    }, noop)\n\n    // 如果是第一次mount则触发 mounted 生命周期钩子\n    if (vm.$vnode == null) {\n      vm._isMounted = true\n      callHook(vm, 'mounted')\n    }\n    return vm\n  }\n```\n\n上面的代码很简单，该注释的都注释了，唯一需要看的就是这段代码：\n\n```\nvm._watcher = new Watcher(vm, () => {\n  vm._update(vm._render(), hydrating)\n}, noop)\n```\n\n看上去很眼熟有没有？我们平时使用Vue都是这样使用 watch的：\n\n```\nthis.$watch('a', (newVal, oldVal) => {\n\t\n})\n// 或者\nthis.$watch(function(){\n\treturn this.a + this.b\n}, (newVal, oldVal) => {\n\t\n})\n```\n\n第一个参数是 表达式或者函数，第二个参数是回调函数，第三个参数是可选的选项。原理是 `Watch` 内部对表达式求值或者对函数求值从而触发数据的 `get` 方法收集依赖。可是 `_mount` 方法中使用 `Watcher` 的时候第一个参数 `vm` 是什么鬼。我们不妨去看看源码中 `$watch` 函数是如何实现的，根据之前还原Vue构造函数中所整理的内容可知：`$warch` 方法是在 `src/core/instance/state.js` 文件中的 `stateMixin` 方法中定义的，源码如下：\n\n```\n  Vue.prototype.$watch = function (\n    expOrFn: string | Function,\n    cb: Function,\n    options?: Object\n  ): Function {\n    const vm: Component = this\n    options = options || {}\n    options.user = true\n    const watcher = new Watcher(vm, expOrFn, cb, options)\n    if (options.immediate) {\n      cb.call(vm, watcher.value)\n    }\n    return function unwatchFn () {\n      watcher.teardown()\n    }\n  }\n```\n\n我们可以发现，`$warch` 其实是对 `Watcher` 的一个封装，内部的 `Watcher` 的第一个参数实际上也是 `vm` 即：Vue实例对象，这一点我们可以在 `Watcher` 的源码中得到验证，代开 `observer/watcher.js` 文件查看：\n\n```js\nexport default class Watcher {\n\n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: Object = {}\n  ) {\n    \n  }\n}\n```\n\n可以发现真正的 `Watcher` 第一个参数实际上就是 `vm`。第二个参数是表达式或者函数，然后以此类推，所以现在再来看 `_mount` 中的这段代码：\n\n```\nvm._watcher = new Watcher(vm, () => {\n  vm._update(vm._render(), hydrating)\n}, noop)\n```\n\n忽略第一个参数 `vm`，也就说，`Watcher` 内部应该对第二个参数求值，也就是运行这个函数：\n\n```\n() => {\n  vm._update(vm._render(), hydrating)\n}\n```\n\n所以 `vm._render()` 函数被第一个执行，该函数在 `src/core/instance/render.js` 中，该方法中的代码很多，下面是简化过的：\n\n```\n  Vue.prototype._render = function (): VNode {\n    const vm: Component = this\n    // 解构出 $options 中的 render 函数\n    const {\n      render,\n      staticRenderFns,\n      _parentVnode\n    } = vm.$options\n    ...\n\n    let vnode\n    try {\n      // 运行 render 函数\n      vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n      ...\n    }\n    \n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n  }\n```\n\n`_render` 方法首先从 `vm.$options` 中解构出 `render` 函数，大家应该记得：`vm.$options.render` 方法是在 `web-runtime-with-compiler.js` 文件中通过 `compileToFunctions` 方法将 `template` 或 `el` 编译而来的。解构出 `render` 函数后，接下来便执行了该方法：\n\n```\nvnode = render.call(vm._renderProxy, vm.$createElement)\n```\n\n其中使用 `call` 指定了 `render` 函数的作用域环境为 `vm._renderProxy`，这个属性在我们整理实例对象的时候知道，他是在 `Vue.prototype._init` 方法中被添加的，即：`vm._renderProxy = vm`，其实就是Vue实例对象本身，然后传递了一个参数：`vm.$createElement`。那么 `render` 函数到底是干什么的呢？让我们根据上面那句代码猜一猜，我们已经知道 `render` 函数是从 `template` 或 `el` 编译而来的，如果没错的话应该是返回一个虚拟DOM对象。我们不妨使用 `console.log` 打印一下 `render` 函数，当我们的模板这样编写时：\n\n```\n<ul id=\"app\">\n  <li>{{a}}</li>\n</ul>\n```\n\n打印的 `render` 函数如下：\n\n![render函数1](http://7xlolm.com1.z0.glb.clouddn.com/vueimgr2.png)\n\n我们修改模板为：\n\n```\n<ul id=\"app\">\n  <li v-for=\"i in b\">{{a}}</li>\n</ul>\n```\n\n打印出来的 `render` 函数如下：\n\n![render函数2](http://7xlolm.com1.z0.glb.clouddn.com/vueimgr3.png)\n\n其实了解Vue2.x版本的同学都知道，Vue提供了 `render` 选项，作为 `template` 的代替方案，同时为JavaScript提供了完全编程的能力，下面两种编写模板的方式实际是等价的：\n\n```js\n// 方案一：\nnew Vue({\n\tel: '#app',\n\tdata: {\n\t\ta: 1\n\t},\n\ttemplate: '<ul><li>{{a}}</li><li>{{a}}</li></ul>'\n})\n\n// 方案二：\nnew Vue({\n\tel: '#app',\n\trender: function (createElement) {\n\t\tcreateElement('ul', [\n\t\t\tcreateElement('li', this.a),\n\t\t\tcreateElement('li', this.a)\n\t\t])\n\t}\n})\n```\n\n现在我们再来看我们打印的 `render` 函数：\n\n```\nfunction anonymous() {\n\twith(this){\n\t\treturn _c('ul', { \n\t\t\tattrs: {\"id\": \"app\"}\n\t\t},[\n\t\t\t_c('li', [_v(_s(a))])\n\t\t])\n\t}\n}\n```\n\n是不是与我们自己写 `render` 函数很像？因为 render 函数的作用域被绑定到了Vue实例，即：`render.call(vm._renderProxy, vm.$createElement)`，所以上面代码中 `_c`、`_v`、`_s` 以及变量 `a`相当于Vue实例下的方法和变量。大家还记得诸如 `_c`、`_v`、`_s` 这样的方法在哪里定义的吗？我们在整理Vue构造函数的时候知道，他们在 `src/core/instance/render.js` 文件中的 `renderMixin` 方法中定义，除了这些之外还有诸如：`_l`、 `_m`、 `_o` 等等。其中 `_l` 就在我们使用 `v-for` 指令的时候出现了。所以现在大家知道为什么这些方法都被定义在 `render.js` 文件中了吧，因为他们就是为了构造出 `render` 函数而存在的。\n\n现在我们已经知道了 `render` 函数的长相，也知道了 `render` 函数的作用域是Vue实例本身即：`this`(或`vm`)。那么当我们执行 `render` 函数时，其中的变量如：`a`，就相当于：`this.a`，我们知道这是在求值，所以 `_mount` 中的这段代码：\n\n```\nvm._watcher = new Watcher(vm, () => {\n  vm._update(vm._render(), hydrating)\n}, noop)\n```\n\n当 `vm._render` 执行的时候，所依赖的变量就会被求值，并被收集为依赖。按照Vue中 `watcher.js` 的逻辑，当依赖的变量有变化时不仅仅回调函数被执行，实际上还要重新求值，即还要执行一遍：\n\n```\n() => {\n  vm._update(vm._render(), hydrating)\n}\n```\n\n这实际上就做到了 `re-render`，因为 `vm._update` 就是文章开头所说的虚拟DOM中的最后一步：`patch`\n\n`vm_render` 方法最终返回一个 `vnode` 对象，即虚拟DOM，然后作为 `vm_update` 的第一个参数传递了过去，我们看一下 `vm_update` 的逻辑，在 `src/core/instance/lifecycle.js` 文件中有这么一段代码：\n\n```js\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      )\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n```\n\n如果还没有 `prevVnode` 说明是首次渲染，直接创建真实DOM。如果已经有了 `prevVnode` 说明不是首次渲染，那么就采用 `patch` 算法进行必要的DOM操作。这就是Vue更新DOM的逻辑。只不过我们没有将 virtual DOM 内部的实现。\n\n现在我们来好好理理思路，当我们写如下代码时：\n\n```\nnew Vue({\n\tel: '#app',\n\tdata: {\n\t\ta: 1,\n\t\tb: [1, 2, 3]\n\t}\n})\n```\n\nVue 所做的事：\n\n> 1、构建数据响应系统，使用 `Observer` 将数据data转换为访问器属性；将 `el` 编译为 `render` 函数，`render` 函数返回值为虚拟DOM\n\n> 2、在 `_mount` 中对 `_update` 求值，而 `_update` 又会对 `render` 求值，`render` 内部又会对依赖的变量求值，收集为被求值的变量的依赖，当变量改变时，`_update` 又会重新执行一遍，从而做到 `re-render`。\n\n用一张详细一点的图表示就是这样的：\n\n![详细流程](http://7xlolm.com1.z0.glb.clouddn.com/vueimgdetail.png)\n\n到此，我们从大体流程，挑着重点的走了一遍Vue，但是还有很多细节我们没有提及，比如：\n\n1、将模板转为 `render` 函数的时候，实际是先生成的抽象语法树（AST），再将抽象语法树转成的 `render` 函数，而且这一整套的代码我们也没有提及，因为他在复杂了，其实这部分内容就是在完正则。\n\n2、我们也没有详细的讲 Virtual DOM 的实现原理，网上已经有文章讲了，大家可以搜一搜\n\n3、我们的例子中仅仅传递了 `el` ，`data` 选项，大家知道 Vue 支持的选项很多，比如我们都没有讲到，但都是触类旁通的，比如你搞清楚了 `data` 选项再去看 `computed` 选项或者 `props` 选项就会很容易，比如你知道了 `Watcher` 的工作机制再去看 `watch` 选项就会很容易。\n\n本篇文章作为Vue源码的启蒙文章，也许还有很多缺陷，全当抛砖引玉了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Vue源码学习.md","raw":"title: Vue2.1.7源码学习\ndate: 2017-03-03 11:17:21\ncategories:\n- WebFrontEnd\ntags:\n- 源码\n- Vue\n---\n\n原本文章的名字叫做《源码解析》，不过后来想想，还是用“源码学习”来的合适一点，在没有彻底掌握源码中的每一个字母之前，“解析”就有点标题党了。建议在看这篇文章之前，最好打开2.1.7的源码对照着看，这样可能更容易理解。另外本人水平有限，文中有错误或不妥的地方望大家多多指正共同成长。\n\n补充：Vue 2.2 刚刚发布，作为一个系列文章的第一篇，本篇文章主要从Vue代码的组织，Vue构造函数的还原，原型的设计，以及参数选项的处理和已经被写烂了的数据绑定与如何使用 Virtual DOM 更新视图入手。从整体的大方向观察框架，这么看来 `V2.1.7` 对于理解 `V2.2` 的代码不会有太大的影响。该系列文章的后续文章，都会从最新的源码入手，并对改动的地方做相应的提示。\n\n<!-- more -->\n\n很久之前写过一篇文章：[JavaScript实现MVVM之我就是想监测一个普通对象的变化](http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/)，文章开头提到了我写博客的风格，还是那句话，只写努力让小白，甚至是小学生都能看明白的文章。这不免会导致对于某些同学来说这篇文章有些墨迹，所以大家根据自己的喜好，可以详细的看，也可以跳跃着看。\n\n## 一、从了解一个开源项目入手\n\n要看一个项目的源码，不要一上来就看，先去了解一下项目本身的元数据和依赖，除此之外最好也了解一下 PR 规则，Issue Reporting 规则等等。特别是“前端”开源项目，我们在看源码之前第一个想到的应该是：`package.json`文件。\n\n在 `package.json` 文件中，我们最应该关注的就是 `scripts` 字段和 `devDependencies` 以及 `dependencies` 字段，通过 `scripts` 字段我们可以知道项目中定义的脚本命令，通过 `devDependencies` 和 `dependencies` 字段我们可以了解项目的依赖情况。\n\n了解了这些之后，如果有依赖我们就 `npm install` 安装依赖就ok了。\n\n除了 `package.json` 之外，我们还要阅读项目的贡献规则文档，了解如何开始，一个好的开源项目肯定会包含这部分内容的，Vue也不例外：[https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md)，在这个文档里说明了一些行为准则，PR指南，Issue Reporting 指南，Development Setup 以及 项目结构。通过阅读这些内容，我们可以了解项目如何开始，如何开发以及目录的说明，下面是对重要目录和文件的简单介绍，这些内容你都可以去自己阅读获取：\n\n```\n├── build --------------------------------- 构建相关的文件，一般情况下我们不需要动\n├── dist ---------------------------------- 构建后文件的输出目录\n├── examples ------------------------------ 存放一些使用Vue开发的应用案例\n├── flow ---------------------------------- 类型声明，使用开源项目 [Flow](https://flowtype.org/)\n├── package.json -------------------------- 不解释\n├── test ---------------------------------- 包含所有测试文件\n├── src ----------------------------------- 这个是我们最应该关注的目录，包含了源码\n│   ├── entries --------------------------- 包含了不同的构建或包的入口文件\n│   │   ├── web-runtime.js ---------------- 运行时构建的入口，输出 dist/vue.common.js 文件，不包含模板(template)到render函数的编译器，所以不支持 `template` 选项，我们使用vue默认导出的就是这个运行时的版本。大家使用的时候要注意\n│   │   ├── web-runtime-with-compiler.js -- 独立构建版本的入口，输出 dist/vue.js，它包含模板(template)到render函数的编译器\n│   │   ├── web-compiler.js --------------- vue-template-compiler 包的入口文件\n│   │   ├── web-server-renderer.js -------- vue-server-renderer 包的入口文件\n│   ├── compiler -------------------------- 编译器代码的存放目录，将 template 编译为 render 函数\n│   │   ├── parser ------------------------ 存放将模板字符串转换成元素抽象语法树的代码\n│   │   ├── codegen ----------------------- 存放从抽象语法树(AST)生成render函数的代码\n│   │   ├── optimizer.js ------------------ 分析静态树，优化vdom渲染\n│   ├── core ------------------------------ 存放通用的，平台无关的代码\n│   │   ├── observer ---------------------- 反应系统，包含数据观测的核心代码\n│   │   ├── vdom -------------------------- 包含虚拟DOM创建(creation)和打补丁(patching)的代码\n│   │   ├── instance ---------------------- 包含Vue构造函数设计相关的代码\n│   │   ├── global-api -------------------- 包含给Vue构造函数挂载全局方法(静态方法)或属性的代码\n│   │   ├── components -------------------- 包含抽象出来的通用组件\n│   ├── server ---------------------------- 包含服务端渲染(server-side rendering)的相关代码\n│   ├── platforms ------------------------- 包含平台特有的相关代码\n│   ├── sfc ------------------------------- 包含单文件组件(.vue文件)的解析逻辑，用于vue-template-compiler包\n│   ├── shared ---------------------------- 包含整个代码库通用的代码\n```\n\n大概了解了重要目录和文件之后，我们就可以查看 [Development Setup](https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup) 中的常用命令部分，来了解如何开始这个项目了，我们可以看到这样的介绍：\n\n```\n# watch and auto re-build dist/vue.js\n$ npm run dev\n\n# watch and auto re-run unit tests in Chrome\n$ npm run dev:test\n```\n\n现在，我们只需要运行 `npm run dev` 即可监测文件变化并自动重新构建输出 dist/vue.js，然后运行 `npm run dev:test` 来测试。不过为了方便，我会在 `examples` 目录新建一个例子，然后引用 dist/vue.js 这样，我们可以直接拿这个例子一边改Vue源码一边看自己写的代码想怎么玩怎么玩。\n\n## 二、看源码的小提示\n\n在真正步入源码世界之前，我想简单说一说看源码的技巧：\n\n### *注重大体框架，从宏观到微观*\n\n当你看一个项目代码的时候，最好是能找到一条主线，先把大体流程结构摸清楚，再深入到细节，逐项击破，拿Vue举个栗子：假如你已经知道Vue中数据状态改变后会采用virtual DOM的方式更新DOM，这个时候，如果你不了解virtual DOM，那么听我一句“暂且不要去研究内部具体实现，因为这会是你丧失主线”，而你仅仅需要知道virtual DOM分为三个步骤：\n\n>一、createElement(): 用 JavaScript对象(虚拟树) 描述 真实DOM对象(真实树)\n>二、diff(oldNode, newNode) : 对比新旧两个虚拟树的区别，收集差异\n>三、patch() : 将差异应用到真实DOM树\n\n有的时候 第二步 可能与 第三步 合并成一步(Vue 中的patch就是这样)，除此之外，还比如 `src/compiler/codegen` 内的代码，可能你不知道他写了什么，直接去看它会让你很痛苦，但是你只需要知道 codegen 是用来将抽象语法树(AST)生成render函数的就OK了，也就是生成类似下面这样的代码：\n\n```js\nfunction anonymous() {\n\twith(this){return _c('p',{attrs:{\"id\":\"app\"}},[_v(\"\\n      \"+_s(a)+\"\\n      \"),_c('my-com')])}\n}\n```\n\n当我们知道了一个东西存在，且知道它存在的目的，那么我们就很容易抓住这条主线，这个系列的第一篇文章就是围绕大体主线展开的。了解大体之后，我们就知道了每部分内容都是做什么的，比如 codegen 是生成类似上面贴出的代码所示的函数的，那么再去看codegen下的代码时，目的性就会更强，就更容易理解。\n\n## 三、Vue 的构造函数是什么样的\n\nbalabala一大堆，开始来干货吧。我们要做的第一件事就是搞清楚 Vue 构造函数到底是什么样子的。\n\n我们知道，我们要使用 `new` 操作符来调用 `Vue`，那么也就是说 `Vue` 应该是一个构造函数，所以我们第一件要做的事儿就是把构造函数先扒的一清二楚，如何寻找 `Vue` 构造函数呢？当然是从 entry 开始啦，还记的我们运行 `npm run dev` 命令后，会输出 `dist/vue.js` 吗，那么我们就去看看 `npm run dev` 干了什么：\n\n```\n\"dev\": \"TARGET=web-full-dev rollup -w -c build/config.js\",\n```\n\n首先将 TARGET 得值设置为 'web-full-dev'，然后，然后，然后如果你不了解 rollup 就应该简单去看一下啦......，简单的说就是一个JavaScript模块打包器，你可以把它简单的理解为和 webpack 一样，只不过它有他的优势，比如 Tree-shaking (webpack2也有)，但同样，在某些场景它也有他的劣势。。。废话不多说，其中 `-w` 就是watch，`-c` 就是指定配置文件为 `build/config.js` ，我们打开这个配置文件看一看：\n\n```js\n// 引入依赖，定义 banner\n...\n\n// builds 对象\nconst builds = {\n\t...\n\t// Runtime+compiler development build (Browser)\n\t'web-full-dev': {\n\t    entry: path.resolve(__dirname, '../src/entries/web-runtime-with-compiler.js'),\n\t    dest: path.resolve(__dirname, '../dist/vue.js'),\n\t    format: 'umd',\n\t    env: 'development',\n\t    alias: { he: './entity-decoder' },\n\t    banner\n\t},\n\t...\n}\n\n// 生成配置的方法\nfunction genConfig(opts){\n\t...\n}\n\nif (process.env.TARGET) {\n  module.exports = genConfig(builds[process.env.TARGET])\n} else {\n  exports.getBuild = name => genConfig(builds[name])\n  exports.getAllBuilds = () => Object.keys(builds).map(name => genConfig(builds[name]))\n}\n```\n\n上面的代码是简化过的，当我们运行 `npm run dev` 的时候 `process.env.TARGET` 的值等于 'web-full-dev'，所以\n\n```js\nmodule.exports = genConfig(builds[process.env.TARGET])\n```\n\n这句代码相当于：\n\n```js\nmodule.exports = genConfig({\n    entry: path.resolve(__dirname, '../src/entries/web-runtime-with-compiler.js'),\n    dest: path.resolve(__dirname, '../dist/vue.js'),\n    format: 'umd',\n    env: 'development',\n    alias: { he: './entity-decoder' },\n    banner\n})\n```\n\n最终，genConfig 函数返回一个 config 对象，这个config对象就是Rollup的配置对象。那么我们就不难看到，入口文件是：\n\n```\nsrc/entries/web-runtime-with-compiler.js\n```\n\n我们打开这个文件，不要忘了我们的主题，我们在寻找Vue构造函数，所以当我们看到这个文件的第一行代码是：\n\n```js\nimport Vue from './web-runtime'\n```\n\n这个时候，你就应该知道，这个文件暂时与你无缘，你应该打开 `web-runtime.js` 文件，不过当你打开这个文件时，你发现第一行是这样的：\n\n```js\nimport Vue from 'core/index'\n```\n\n依照此思路，最终我们寻找到Vue构造函数的位置应该是在 `src/core/instance/index.js` 文件中，其实我们猜也猜得到，上面介绍目录的时候说过：instance 是存放Vue构造函数设计相关代码的目录。总结一下，我们寻找的过程是这样的：\n\n![寻找 Vue 构造函数路线](http://7xlolm.com1.z0.glb.clouddn.com/vueimg2BD0DCC6-D689-4809-93D3-2F979E8F8C0C.png)\n\n我们回头看一看 `src/core/instance/index.js` 文件，很简单：\n\n```js\nimport { initMixin } from './init'\nimport { stateMixin } from './state'\nimport { renderMixin } from './render'\nimport { eventsMixin } from './events'\nimport { lifecycleMixin } from './lifecycle'\nimport { warn } from '../util/index'\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n\ninitMixin(Vue)\nstateMixin(Vue)\neventsMixin(Vue)\nlifecycleMixin(Vue)\nrenderMixin(Vue)\n\nexport default Vue\n```\n\n引入依赖，定义 Vue 构造函数，然后以Vue构造函数为参数，调用了五个方法，最后导出 Vue。这五个方法分别来自五个文件：`init.js` `state.js` `render.js` `events.js` 以及 `lifecycle.js`。\n\n打开这五个文件，找到相应的方法，你会发现，这些方法的作用，就是在 Vue 的原型 prototype 上挂载方法或属性，经历了这五个方法后的Vue会变成这样：\n\n```js\n// initMixin(Vue)\tsrc/core/instance/init.js **************************************************\nVue.prototype._init = function (options?: Object) {}\n\n// stateMixin(Vue)\tsrc/core/instance/state.js **************************************************\nVue.prototype.$data\nVue.prototype.$set = set\nVue.prototype.$delete = del\nVue.prototype.$watch = function(){}\n\n// renderMixin(Vue)\tsrc/core/instance/render.js **************************************************\nVue.prototype.$nextTick = function (fn: Function) {}\nVue.prototype._render = function (): VNode {}\nVue.prototype._s = _toString\nVue.prototype._v = createTextVNode\nVue.prototype._n = toNumber\nVue.prototype._e = createEmptyVNode\nVue.prototype._q = looseEqual\nVue.prototype._i = looseIndexOf\nVue.prototype._m = function(){}\nVue.prototype._o = function(){}\nVue.prototype._f = function resolveFilter (id) {}\nVue.prototype._l = function(){}\nVue.prototype._t = function(){}\nVue.prototype._b = function(){}\nVue.prototype._k = function(){}\n\n// eventsMixin(Vue)\tsrc/core/instance/events.js **************************************************\nVue.prototype.$on = function (event: string, fn: Function): Component {}\nVue.prototype.$once = function (event: string, fn: Function): Component {}\nVue.prototype.$off = function (event?: string, fn?: Function): Component {}\nVue.prototype.$emit = function (event: string): Component {}\n\n// lifecycleMixin(Vue)\tsrc/core/instance/lifecycle.js **************************************************\nVue.prototype._mount = function(){}\nVue.prototype._update = function (vnode: VNode, hydrating?: boolean) {}\nVue.prototype._updateFromParent = function(){}\nVue.prototype.$forceUpdate = function () {}\nVue.prototype.$destroy = function () {}\n```\n\n这样就结束了吗？并没有，根据我们之前寻找 Vue 的路线，这只是刚刚开始，我们追溯路线往回走，那么下一个处理 Vue 构造函数的应该是 `src/core/index.js` 文件，我们打开它：\n\n```js\nimport Vue from './instance/index'\nimport { initGlobalAPI } from './global-api/index'\nimport { isServerRendering } from 'core/util/env'\n\ninitGlobalAPI(Vue)\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n})\n\nVue.version = '__VERSION__'\n\nexport default Vue\n```\n\n这个文件也很简单，从 instance/index 中导入已经在原型上挂载了方法和属性后的 Vue，然后导入 `initGlobalAPI` 和 `isServerRendering`，之后将Vue作为参数传给  `initGlobalAPI` ，最后又在 `Vue.prototype` 上挂载了 `$isServer` ，在 `Vue` 上挂载了 `version` 属性。\n\n`initGlobalAPI` 的作用是在 `Vue` 构造函数上挂载静态属性和方法，`Vue` 在经过 `initGlobalAPI` 之后，会变成这样：\n\n```js\n// src/core/index.js / src/core/global-api/index.js\nVue.config\nVue.util = util\nVue.set = set\nVue.delete = del\nVue.nextTick = util.nextTick\nVue.options = {\n    components: {\n        KeepAlive\n    },\n    directives: {},\n    filters: {},\n    _base: Vue\n}\nVue.use\nVue.mixin\nVue.cid = 0\nVue.extend\nVue.component = function(){}\nVue.directive = function(){}\nVue.filter = function(){}\n\nVue.prototype.$isServer\nVue.version = '__VERSION__'\n```\n\n其中，稍微复杂一点的就是 `Vue.options`，大家稍微分析分析就会知道他的确长成那个样子。下一个就是 `web-runtime.js` 文件了，`web-runtime.js` 文件主要做了三件事儿：\n\n> 1、覆盖 `Vue.config` 的属性，将其设置为平台特有的一些方法\n> 2、`Vue.options.directives` 和 `Vue.options.components` 安装平台特有的指令和组件\n> 3、在 `Vue.prototype` 上定义 `__patch__` 和 `$mount`\n\n经过 `web-runtime.js` 文件之后，`Vue` 变成下面这个样子：\n\n```js\n// 安装平台特定的utils\nVue.config.isUnknownElement = isUnknownElement\nVue.config.isReservedTag = isReservedTag\nVue.config.getTagNamespace = getTagNamespace\nVue.config.mustUseProp = mustUseProp\n// 安装平台特定的 指令 和 组件\nVue.options = {\n    components: {\n        KeepAlive,\n        Transition,\n        TransitionGroup\n    },\n    directives: {\n        model,\n        show\n    },\n    filters: {},\n    _base: Vue\n}\nVue.prototype.__patch__\nVue.prototype.$mount\n```\n\n这里大家要注意的是 `Vue.options` 的变化。另外这里的 `$mount` 方法很简单：\n\n```js\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return this._mount(el, hydrating)\n}\n```\n\n首先根据是否是浏览器环境决定要不要 `query(el)` 获取元素，然后将 `el` 作为参数传递给 `this._mount()`。\n\n最后一个处理 Vue 的文件就是入口文件 `web-runtime-with-compiler.js` 了，该文件做了两件事：\n\n1、缓存来自 `web-runtime.js` 文件的 `$mount` 函数\n\n```js\nconst mount = Vue.prototype.$mount\n```\n\n然后覆盖覆盖了 `Vue.prototype.$mount`\n\n2、在 Vue 上挂载 `compile`\n\n```js\nVue.compile = compileToFunctions\n```\n\ncompileToFunctions 函数的作用，就是将模板 `template` 编译为render函数。\n\n至此，我们算是还原了 Vue 构造函数，总结一下：\n\n> 1、`Vue.prototype` 下的属性和方法的挂载主要是在 `src/core/instance` 目录中的代码处理的\n\n> 2、`Vue` 下的静态属性和方法的挂载主要是在 `src/core/global-api` 目录下的代码处理的\n\n> 3、`web-runtime.js` 主要是添加web平台特有的配置、组件和指令，`web-runtime-with-compiler.js` 给Vue的 `$mount` 方法添加 `compiler` 编译器，支持 `template`。\n\n## 四、一个贯穿始终的例子\n\n在了解了 `Vue` 构造函数的设计之后，接下来，我们一个贯穿始终的例子就要登场了，掌声有请：\n\n```js\nlet v = new Vue({\n\tel: '#app',\n\tdata: {\n\t\ta: 1,\n\t\tb: [1, 2, 3]\n\t}\n})\n```\n\n好吧，我承认这段代码你家没满月的孩子都会写了。这段代码就是我们贯穿始终的例子，它就是这篇文章的主线，在后续的讲解中，都会以这段代码为例，当讲到必要的地方，会为其添加选项，比如讲计算属性的时候当然要加上一个 `computed` 属性了。不过在最开始，我只传递了两个选项 `el` 以及 `data`，“我们看看接下来会发生什么，让我们拭目以待“ ---- NBA球星在接受采访时最喜欢说这句话。\n\n*当我们按照例子那样编码使用Vue的时候，Vue都做了什么？*\n\n想要知道Vue都干了什么，我们就要找到 Vue 初始化程序，查看 Vue 构造函数：\n\n```js\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)\n}\n```\n\n我们发现，`_init()` 方法就是Vue调用的第一个方法，然后将我们的参数 `options` 透传了过去。在调用 `_init()` 之前，还做了一个安全模式的处理，告诉开发者必须使用 `new` 操作符调用 Vue。根据之前我们的整理，`_init()` 方法应该是在 `src/core/instance/init.js` 文件中定义的，我们打开这个文件查看 `_init()` 方法：\n\n```js\n  Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n    // a flag to avoid this being observed\n    vm._isVue = true\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    // expose real self\n    vm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    callHook(vm, 'beforeCreate')\n    initState(vm)\n    callHook(vm, 'created')\n    initRender(vm)\n  }\n```\n\n`_init()` 方法在一开始的时候，在 `this` 对象上定义了两个属性：`_uid` 和 `_isVue`，然后判断有没有定义 `options._isComponent`，在使用 Vue 开发项目的时候，我们是不会使用 `_isComponent` 选项的，这个选项是 Vue 内部使用的，按照本节开头的例子，这里会走 `else` 分支，也就是这段代码：\n\n```js\n  vm.$options = mergeOptions(\n    resolveConstructorOptions(vm.constructor),\n    options || {},\n    vm\n  )\n```\n\n这样 `Vue` 第一步所做的事情就来了：<span style=\"color: red;\">*使用策略对象合并参数选项*</span>\n\n可以发现，Vue使用 `mergeOptions` 来处理我们调用Vue时传入的参数选项(options)，然后将返回值赋值给 `this.$options` (vm === this)，传给 `mergeOptions` 方法三个参数，我们分别来看一看，首先是：`resolveConstructorOptions(vm.constructor)`，我们查看一下这个方法：\n\n```js\nexport function resolveConstructorOptions (Ctor: Class<Component>) {\n  let options = Ctor.options\n  if (Ctor.super) {\n    const superOptions = Ctor.super.options\n    const cachedSuperOptions = Ctor.superOptions\n    const extendOptions = Ctor.extendOptions\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed\n      Ctor.superOptions = superOptions\n      extendOptions.render = options.render\n      extendOptions.staticRenderFns = options.staticRenderFns\n      extendOptions._scopeId = options._scopeId\n      options = Ctor.options = mergeOptions(superOptions, extendOptions)\n      if (options.name) {\n        options.components[options.name] = Ctor\n      }\n    }\n  }\n  return options\n}\n```\n\n这个方法接收一个参数 `Ctor`，通过传入的 `vm.constructor` 我们可以知道，其实就是 `Vue` 构造函数本身。所以下面这句代码：\n\n```js\nlet options = Ctor.options\n```\n\n相当于：\n\n```js\nlet options = Vue.options\n```\n\n大家还记得 `Vue.options` 吗？在寻找Vue构造函数一节里，我们整理了 `Vue.options` 应该长成下面这个样子：\n\n```js\nVue.options = {\n    components: {\n        KeepAlive,\n        Transition,\n        TransitionGroup\n    },\n    directives: {\n        model,\n        show\n    },\n    filters: {},\n    _base: Vue\n}\n```\n\n之后判断是否定义了 `Vue.super` ，这个是用来处理继承的，我们后续再讲，在本例中，`resolveConstructorOptions` 方法直接返回了 `Vue.options`。也就是说，传递给 `mergeOptions` 方法的第一个参数就是 `Vue.options`。\n\n传给 `mergeOptions` 方法的第二个参数是我们调用Vue构造函数时的参数选项，第三个参数是 `vm` 也就是 `this` 对象，按照本节开头的例子那样使用 Vue，最终运行的代码应该如下：\n\n```js\n  vm.$options = mergeOptions(\n  \t// Vue.options\n    {\n\t    components: {\n\t        KeepAlive,\n\t        Transition,\n\t        TransitionGroup\n\t    },\n\t    directives: {\n\t        model,\n\t        show\n\t    },\n\t    filters: {},\n\t    _base: Vue\n\t},\n\t// 调用Vue构造函数时传入的参数选项 options\n    {\n    \tel: '#app',\n\t\tdata: {\n\t\t\ta: 1,\n\t\t\tb: [1, 2, 3]\n\t\t}\n    },\n    // this\n    vm\n  )\n```\n\n了解了这些，我们就可以看看 `mergeOptions` 到底做了些什么了，根据引用寻找到 `mergeOptions` 应该是在 `src/core/util/options.js` 文件中定义的。这个文件第一次看可能会头大，下面是我处理后的简略展示，大家看上去应该更容易理解了：\n\n```js\n// 1、引用依赖\nimport Vue from '../instance/index'\n其他引用...\n\n// 2、合并父子选项值为最终值的策略对象，此时 strats 是一个空对象，因为 config.optionMergeStrategies = Object.create(null)\nconst strats = config.optionMergeStrategies\n// 3、在 strats 对象上定义与参数选项名称相同的方法\nstrats.el = \nstrats.propsData = function (parent, child, vm, key){}\nstrats.data = function (parentVal, childVal, vm)\n\nconfig._lifecycleHooks.forEach(hook => {\n  strats[hook] = mergeHook\n})\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets\n})\n\nstrats.watch = function (parentVal, childVal)\n\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal: ?Object, childVal: ?Object)\n// 默认的合并策略，如果有 `childVal` 则返回 `childVal` 没有则返回 `parentVal`\nconst defaultStrat = function (parentVal: any, childVal: any): any {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n}\n\n// 4、mergeOptions 中根据参数选项调用同名的策略方法进行合并处理\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n\n  // 其他代码\n  ...\n\n  const options = {}\n  let key\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n\t\n}\n\n```\n\n上面的代码中，我省略了一些工具函数，例如 `mergeHook` 和 `mergeAssets` 等等，唯一需要注意的是这段代码：\n\n```js\nconfig._lifecycleHooks.forEach(hook => {\n  strats[hook] = mergeHook\n})\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets\n})\n```\n\n`config` 对象引用自 `src/core/config.js` 文件，最终的结果就是在 `strats` 下添加了相应的生命周期选项的合并策略函数为 `mergeHook`，添加指令(directives)、组件(components)、过滤器(filters)等选项的合并策略函数为 `mergeAssets`。\n\n这样看来就清晰多了，拿我们贯穿本文的例子来说：\n\n```js\nlet v = new Vue({\n\tel: '#app',\n\tdata: {\n\t\ta: 1,\n\t\tb: [1, 2, 3]\n\t}\n})\n```\n\n其中 `el` 选项会使用 `defaultStrat` 默认策略函数处理，`data` 选项则会使用 `strats.data` 策略函数处理，并且根据 `strats.data` 中的逻辑，`strats.data` 方法最终会返回一个函数：`mergedInstanceDataFn`。\n\n这里就不详细的讲解每一个策略函数的内容了，后续都会讲到，这里我们还是抓住主线理清思路为主，只需要知道Vue在处理选项的时候，使用了一个策略对象对父子选项进行合并。并将最终的值赋值给实例下的 `$options` 属性即：`this.$options`，那么我们继续查看 `_init()` 方法在合并完选项之后，又做了什么：\n\n合并完选项之后，Vue 第二部做的事情就来了：<span style=\"color: red;\">*初始化工作与Vue实例对象的设计*</span>\n\n前面讲了 Vue 构造函数的设计，并且整理了 *Vue原型属性与方法* 和 *Vue静态属性与方法*，而 Vue 实例对象就是通过构造函数创造出来的，让我们来看一看 Vue 实例对象是如何设计的，下面的代码是 `_init()` 方法合并完选项之后的代码：\n\n```js\n\t/* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    // expose real self\n\tvm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    callHook(vm, 'beforeCreate')\n    initState(vm)\n    callHook(vm, 'created')\n    initRender(vm)\n```\n\n根据上面的代码，在生产环境下会为实例添加两个属性，并且属性值都为实例本身：\n\n```js\nvm._renderProxy = vm\nvm._self = vm\n```\n\n然后，调用了四个 `init*` 方法分别为：`initLifecycle`、`initEvents`、`initState`、`initRender`，且在 `initState` 前后分别回调了生命周期钩子 `beforeCreate` 和 `created`，而 `initRender` 是在 `created` 钩子执行之后执行的，看到这里，也就明白了为什么 created 的时候不能操作DOM了。因为这个时候还没有渲染真正的DOM元素到文档中。`created` 仅仅代表数据状态的初始化完成。\n\n根据四个 `init*` 方法的引用关系打开对应的文件查看对应的方法，我们发现，这些方法是在处理Vue实例对象，以及做一些初始化的工作，类似整理Vue构造函数一样，我同样针对Vue实例做了属性和方法的整理，如下：\n\n```js\n// 在 Vue.prototype._init 中添加的属性 \t\t**********************************************************\nthis._uid = uid++\nthis._isVue = true\nthis.$options = {\n    components,\n    directives,\n    filters,\n    _base,\n    el,\n    data: mergedInstanceDataFn()\n}\nthis._renderProxy = this\nthis._self = this\n\n// 在 initLifecycle 中添加的属性\t\t**********************************************************\nthis.$parent = parent\nthis.$root = parent ? parent.$root : this\n \nthis.$children = []\nthis.$refs = {}\n\nthis._watcher = null\nthis._inactive = false\nthis._isMounted = false\nthis._isDestroyed = false\nthis._isBeingDestroyed = false\n\n// 在 initEvents\t 中添加的属性\t \t**********************************************************\nthis._events = {}\nthis._updateListeners = function(){}\n\n// 在 initState 中添加的属性\t\t**********************************************************\nthis._watchers = []\n    // initData\n    this._data\n\n// 在 initRender\t 中添加的属性 \t**********************************************************\nthis.$vnode = null // the placeholder node in parent tree\nthis._vnode = null // the root of the child tree\nthis._staticTrees = null\nthis.$slots\nthis.$scopedSlots\nthis._c\nthis.$createElement\n```\n\n以上就是一个Vue实例所包含的属性和方法，除此之外要注意的是，在 `initEvents` 中除了添加属性之外，如果有 `vm.$options._parentListeners` 还要调用 `vm._updateListeners()` 方法，在 `initState` 中又调用了一些其他init方法，如下：\n\n```js\nexport function initState (vm: Component) {\n  vm._watchers = []\n  initProps(vm)\n  initMethods(vm)\n  initData(vm)\n  initComputed(vm)\n  initWatch(vm)\n}\n```\n\n最后在 `initRender` 中如果有 `vm.$options.el` 还要调用 `vm.$mount(vm.$options.el)`，如下：\n\n```js\n  if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n  }\n```\n\n这就是为什么如果不传递 `el` 选项就需要手动 mount 的原因了。\n\n那么我们依照我们本节开头的的例子，以及初始化的先后顺序来逐一看一看都发生了什么。我们将 `initState` 中的 `init*` 方法展开来看，执行顺序应该是这样的（从上到下的顺序执行）：\n\n```\ninitLifecycle(vm)\ninitEvents(vm)\ncallHook(vm, 'beforeCreate')\ninitProps(vm)\ninitMethods(vm)\ninitData(vm)\ninitComputed(vm)\ninitWatch(vm)\ncallHook(vm, 'created')\ninitRender(vm)\n```\n\n首先是 `initLifecycle`，这个函数的作用就是在实例上添加一些属性，然后是 `initEvents`，由于 `vm.$options._parentListeners` 的值为 `undefined` 所以也仅仅是在实例上添加属性， `vm._updateListeners(listeners)` 并不会执行，由于我们只传递了 `el` 和 `data`，所以 `initProps`、`initMethods`、`initComputed`、`initWatch` 这四个方法什么都不会做，只有 `initData` 会执行。最后是 `initRender`，除了在实例上添加一些属性外，由于我们传递了 `el` 选项，所以会执行 `vm.$mount(vm.$options.el)`。\n\n综上所述：按照我们的例子那样写，初始化工作只包含两个主要内容即：`initData` 和 `initRender`。\n\n## 五、通过`initData`看Vue的数据响应系统\n\nVue的数据响应系统包含三个部分：`Observer`、`Dep`、`Watcher`。关于数据响应系统的内容真的已经被文章讲烂了，所以我就简单的说一下，力求大家能理解就ok，我们还是先看一下 `initData` 中的代码：\n\n```\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === 'function'\n    ? data.call(vm)\n    : data || {}\n  if (!isPlainObject(data)) {\n    data = {}\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    )\n  }\n  // proxy data on instance\n  const keys = Object.keys(data)\n  const props = vm.$options.props\n  let i = keys.length\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== 'production' && warn(\n        `The data property \"${keys[i]}\" is already declared as a prop. ` +\n        `Use prop default value instead.`,\n        vm\n      )\n    } else {\n      proxy(vm, keys[i])\n    }\n  }\n  // observe data\n  observe(data)\n  data.__ob__ && data.__ob__.vmCount++\n}\n```\n\n首先，先拿到 data 数据：`let data = vm.$options.data`，大家还记得此时 `vm.$options.data` 的值应该是通过 `mergeOptions` 合并处理后的 `mergedInstanceDataFn` 函数吗？所以在得到 data 后，它又判断了 data 的数据类型是不是 'function'，最终的结果是：data 还是我们传入的数据选项的 data，即：\n\n```\ndata: {\n\ta: 1,\n\tb: [1, 2, 3]\n}\n```\n\n然后在实例对象上定义 `_data` 属性，该属性与 `data` 是相同的引用。\n\n然后是一个 `while` 循环，循环的目的是在实例对象上对数据进行代理，这样我们就能通过 `this.a` 来访问 `data.a` 了，代码的处理是在 `proxy` 函数中，该函数非常简单，仅仅是在实例对象上设置与 `data` 属性同名的访问器属性，然后使用 `_data` 做数据劫持，如下：\n\n```\nfunction proxy (vm: Component, key: string) {\n  if (!isReserved(key)) {\n    Object.defineProperty(vm, key, {\n      configurable: true,\n      enumerable: true,\n      get: function proxyGetter () {\n        return vm._data[key]\n      },\n      set: function proxySetter (val) {\n        vm._data[key] = val\n      }\n    })\n  }\n}\n```\n\n做完数据的代理，就正式进入响应系统，\n\n```\nobserve(data)\n```\n\n我们说过，数据响应系统主要包含三部分：`Observer`、`Dep`、`Watcher`，代码分别存放在：`observer/index.js`、`observer/dep.js` 以及 `observer/watcher.js` 文件中，这回我们换一种方式，我们先不看其源码，大家先跟着我的思路来思考，最后回头再去看代码，你会有一种：”奥，不过如此“的感觉。\n\n假如，我们有如下代码：\n\n```js\nvar data = {\n    a: 1,\n    b: {\n        c: 2\n    }\n}\n\nobserver(data)\n\nnew Watch('a', () => {\n    alert(9)\n})\nnew Watch('a', () => {\n    alert(90)\n})\nnew Watch('b.c', () => {\n    alert(80)\n})\n```\n\n这段代码目的是，首先定义一个数据对象 `data`，然后通过 observer 对其进行观测，之后定义了三个观察者，当数据有变化时，执行相应的方法，这个功能使用Vue的实现原来要如何去实现？其实就是在问 `observer` 怎么写？`Watch` 构造函数又怎么写？接下来我们逐一实现。\n\n首先，observer 的作用是：将数据对象data的属性转换为访问器属性：\n\n```\nclass Observer {\n    constructor (data) {\n        this.walk(data)\n    }\n    walk (data) {\n        // 遍历 data 对象属性，调用 defineReactive 方法\n        let keys = Object.keys(data)\n        for(let i = 0; i < keys.length; i++){\n            defineReactive(data, keys[i], data[keys[i]])\n        }\n    }\n}\n\n// defineReactive方法仅仅将data的属性转换为访问器属性\nfunction defineReactive (data, key, val) {\n\t// 递归观测子属性\n    observer(val)\n\n    Object.defineProperty(data, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            return val\n        },\n        set: function (newVal) {\n            if(val === newVal){\n                return\n            }\n            // 对新值进行观测\n            observer(newVal)\n        }\n    })\n}\n\n// observer 方法首先判断data是不是纯JavaScript对象，如果是，调用 Observer 类进行观测\nfunction observer (data) {\n    if(Object.prototype.toString.call(data) !== '[object Object]') {\n        return\n    }\n    new Observer(data)\n}\n```\n\n上面的代码中，我们定义了 observer 方法，该方法检测了数据data是不是纯JavaScript对象，如果是就调用 `Observer` 类，并将 `data` 作为参数透传。在 `Observer` 类中，我们使用 `walk` 方法对数据data的属性循环调用 `defineReactive` 方法，`defineReactive` 方法很简单，仅仅是将数据data的属性转为访问器属性，并对数据进行递归观测，否则只能观测数据data的直属子属性。这样我们的第一步工作就完成了，当我们修改或者获取data属性值的时候，通过 `get` 和 `set` 即能获取到通知。\n\n我们继续往下看，来看一下 `Watch`：\n\n```\nnew Watch('a', () => {\n    alert(9)\n})\n```\n\n现在的问题是，`Watch` 要怎么和 `observer` 关联？？？？？？？我们看看 `Watch` 它知道些什么，通过上面调用 `Watch` 的方式，传递给 `Watch` 两个参数，一个是 'a' 我们可以称其为表达式，另外一个是回调函数。所以我们目前只能写出这样的代码：\n\n```\nclass Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n    }\n}\n```\n\n那么要怎么关联呢，大家看下面的代码会发生什么：\n\n```\nclass Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n        data[exp]\n    }\n}\n```\n\n多了一句 `data[exp]`，这句话是在干什么？是不是在获取 `data` 下某个属性的值，比如 exp 为 'a' 的话，那么 `data[exp]` 就相当于在获取 `data.a` 的值，那这会放生什么？大家不要忘了，此时数据 `data` 下的属性已经是访问器属性了，所以这么做的结果会直接触发对应属性的 `get` 函数，这样我们就成功的和 `observer` 产生了关联，但这样还不够，我们还是没有达到目的，不过我们已经无限接近了，我们继续思考看一下可不可以这样：\n\n> 既然在 `Watch` 中对表达式求值，能够触发 `observer` 的 `get`，那么可不可以在 `get` 中收集 `Watch` 中函数呢？\n\n答案是可以的，不过这个时候我们就需要 `Dep` 出场了，它是一个依赖收集器。我们的思路是：`data` 下的每一个属性都有一个唯一的 `Dep` 对象，在 `get` 中收集仅针对该属性的依赖，然后在 `set` 方法中触发所有收集的依赖，这样就搞定了，看如下代码：\n\n```\nclass Dep {\n    constructor () {\n        this.subs = []\n    }\n    addSub () {\n        this.subs.push(Dep.target)\n    }\n    notify () {\n        for(let i = 0; i < this.subs.length; i++){\n            this.subs[i].fn()\n        }\n    }\n}\nDep.target = null\nfunction pushTarget(watch){\n    Dep.target = watch\n}\n\nclass Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n        pushTarget(this)\n        data[exp]\n    }\n}\n```\n\n上面的代码中，我们在 `Watch` 中增加了 `pushTarget(this)`，可以发现，这句代码的作用是将 `Dep.target` 的值设置为该Watch对象。在 `pushTarget` 之后我们才对表达式进行求值，接着，我们修改 `defineReactive` 代码如下\n\n```\nfunction defineReactive (data, key, val) {\n    observer(val)\n    let dep = new Dep()\t\t// 新增\n    Object.defineProperty(data, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            dep.addSub()\t// 新增\n            return val\n        },\n        set: function (newVal) {\n            if(val === newVal){\n                return\n            }\n            observer(newVal)\n            dep.notify()\t// 新增\n        }\n    })\n}\n```\n\n如标注，新增了三句代码，我们知道，`Watch` 中对表达式求值会触发 `get` 方法，我们在 `get` 方法中调用了 `dep.addSub`，也就执行了这句代码：`this.subs.push(Dep.target)`，由于在这句代码执行之前，`Dep.target` 的值已经被设置为一个 `Watch` 对象了，所以最终结果就是收集了一个 `Watch` 对象，然后在 `set` 方法中我们调用了 `dep.notify`，所以当data属性值变化的时候，就会通过 `dep.notify` 循环调用所有收集的Watch对象中的回调函数：\n\n```\nnotify () {\n    for(let i = 0; i < this.subs.length; i++){\n        this.subs[i].fn()\n    }\n}\n```\n\n这样 `observer`、`Dep`、`Watch` 三者就联系成为一个有机的整体，实现了我们最初的目标，完整的代码可以戳这里：[observer-dep-watch](https://github.com/HcySunYang/observer-dep-watch)。这里还给大家挖了个坑，因为我们没有处理对数组的观测，由于比较复杂并且这又不是我们讨论的重点，如果大家想了解可以戳我的这篇文章：[JavaScript实现MVVM之我就是想监测一个普通对象的变化](http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/)，另外，在 Watch 中对表达式求值的时候也只做了直接子属性的求值，所以如果 exp 的值为 'a.b' 的时候，就不可以用了，Vue的做法是使用 `.` 分割表达式字符串为数组，然后遍历一下对其进行求值，大家可以查看其源码。如下：\n\n```\n/**\n * Parse simple path.\n */\nconst bailRE = /[^\\w.$]/\nexport function parsePath (path: string): any {\n  if (bailRE.test(path)) {\n    return\n  } else {\n    const segments = path.split('.')\n    return function (obj) {\n      for (let i = 0; i < segments.length; i++) {\n        if (!obj) return\n        obj = obj[segments[i]]\n      }\n      return obj\n    }\n  }\n}\n```\n\nVue 的求值代码是在 `src/core/util/lang.js` 文件中 `parsePath` 函数中实现的。总结一下Vue的依赖收集过程应该是这样的：\n\n![Vue的依赖收集过程](http://7xlolm.com1.z0.glb.clouddn.com/vueimgdep.png)\n\n实际上，Vue并没有直接在 `get` 中调用 `addSub`，而是调用的 `dep.depend`，目的是将当前的 dep 对象收集到 watch 对象中，如果要完整的流程，应该是这样的：（大家注意数据的每一个字段都拥有自己的 `dep` 对象和 `get` 方法。）\n\n![Vue完整的收集依赖的流程](http://7xlolm.com1.z0.glb.clouddn.com/all.png)\n\n这样 Vue 就建立了一套数据响应系统，之前我们说过，按照我们的例子那样写，初始化工作只包含两个主要内容即：`initData` 和 `initRender`。现在 `initData` 我们分析完了，接下来看一看 `initRender`\n\n## 六、通过`initRender`看Vue的 render(渲染) 与 re-render(重新渲染)\n\n在 `initRender` 方法中，因为我们的例子中传递了 `el` 选项，所以下面的代码会执行：\n\n```\n  if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n  }\n```\n\n这里，调用了 `$mount` 方法，在还原Vue构造函数的时候，我们整理过所有的方法，其中 `$mount` 方法在两个地方出现过：\n\n1、在 `web-runtime.js` 文件中：\n\n```\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return this._mount(el, hydrating)\n}\n```\n\n它的作用是通过 `el` 获取相应的DOM元素，然后调用 `lifecycle.js` 文件中的 `_mount` 方法。\n\n2、在 `web-runtime-with-compiler.js` 文件中：\n\n```\n// 缓存了来自 web-runtime.js 的 $mount 方法\nconst mount = Vue.prototype.$mount\n// 重写 $mount 方法\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  // 根据 el 获取相应的DOM元素\n  el = el && query(el)\n  // 不允许你将 el 挂载到 html 标签或者 body 标签\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      `Do not mount Vue to <html> or <body> - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // 如果我们没有写 render 选项，那么就尝试将 template 或者 el 转化为 render 函数\n  if (!options.render) {\n    let template = options.template\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el)\n    }\n    if (template) {\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        warn,\n        shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n    }\n  }\n  // 调用已经缓存下来的 web-runtime.js 文件中的 $mount 方法\n  return mount.call(this, el, hydrating)\n}\n```\n\n分析一下可知 `web-runtime-with-compiler.js` 的逻辑如下：\n\n1、缓存来自 `web-runtime.js` 文件的 `$mount` 方法\n\n2、判断有没有传递 `render` 选项，如果有直接调用来自 `web-runtime.js` 文件的 $mount 方法\n\n3、如果没有传递 `render` 选项，那么查看有没有 `template` 选项，如果有就使用 `compileToFunctions` 函数根据其内容编译成 `render` 函数\n\n4、如果没有 `template` 选项，那么查看有没有 `el` 选项，如果有就使用 `compileToFunctions` 函数将其内容(template = getOuterHTML(el))编译成 `render` 函数\n\n5、将编译成的 `render` 函数挂载到 `this.$options` 属性下，并调用缓存下来的 `web-runtime.js` 文件中的 $mount 方法\n\n简单的用一张图表示 `mount` 方法的调用关系，从上至下调用：\n\n![mount调用关系](http://7xlolm.com1.z0.glb.clouddn.com/vueimgmount.png)\n\n不过不管怎样，我们发现这些步骤的最终目的是生成 `render` 函数，然后再调用 `lifecycle.js` 文件中的 `_mount` 方法，我们看看这个方法做了什么事情，查看 `_mount` 方法的代码，这是简化过得：\n\n```\n  Vue.prototype._mount = function (\n    el?: Element | void,\n    hydrating?: boolean\n  ): Component {\n    const vm: Component = this\n\n    // 在Vue实例对象上添加 $el 属性，指向挂载点元素\n    vm.$el = el\n\n    // 触发 beforeMount 生命周期钩子\n    callHook(vm, 'beforeMount')\n\n    vm._watcher = new Watcher(vm, () => {\n      vm._update(vm._render(), hydrating)\n    }, noop)\n\n    // 如果是第一次mount则触发 mounted 生命周期钩子\n    if (vm.$vnode == null) {\n      vm._isMounted = true\n      callHook(vm, 'mounted')\n    }\n    return vm\n  }\n```\n\n上面的代码很简单，该注释的都注释了，唯一需要看的就是这段代码：\n\n```\nvm._watcher = new Watcher(vm, () => {\n  vm._update(vm._render(), hydrating)\n}, noop)\n```\n\n看上去很眼熟有没有？我们平时使用Vue都是这样使用 watch的：\n\n```\nthis.$watch('a', (newVal, oldVal) => {\n\t\n})\n// 或者\nthis.$watch(function(){\n\treturn this.a + this.b\n}, (newVal, oldVal) => {\n\t\n})\n```\n\n第一个参数是 表达式或者函数，第二个参数是回调函数，第三个参数是可选的选项。原理是 `Watch` 内部对表达式求值或者对函数求值从而触发数据的 `get` 方法收集依赖。可是 `_mount` 方法中使用 `Watcher` 的时候第一个参数 `vm` 是什么鬼。我们不妨去看看源码中 `$watch` 函数是如何实现的，根据之前还原Vue构造函数中所整理的内容可知：`$warch` 方法是在 `src/core/instance/state.js` 文件中的 `stateMixin` 方法中定义的，源码如下：\n\n```\n  Vue.prototype.$watch = function (\n    expOrFn: string | Function,\n    cb: Function,\n    options?: Object\n  ): Function {\n    const vm: Component = this\n    options = options || {}\n    options.user = true\n    const watcher = new Watcher(vm, expOrFn, cb, options)\n    if (options.immediate) {\n      cb.call(vm, watcher.value)\n    }\n    return function unwatchFn () {\n      watcher.teardown()\n    }\n  }\n```\n\n我们可以发现，`$warch` 其实是对 `Watcher` 的一个封装，内部的 `Watcher` 的第一个参数实际上也是 `vm` 即：Vue实例对象，这一点我们可以在 `Watcher` 的源码中得到验证，代开 `observer/watcher.js` 文件查看：\n\n```js\nexport default class Watcher {\n\n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: Object = {}\n  ) {\n    \n  }\n}\n```\n\n可以发现真正的 `Watcher` 第一个参数实际上就是 `vm`。第二个参数是表达式或者函数，然后以此类推，所以现在再来看 `_mount` 中的这段代码：\n\n```\nvm._watcher = new Watcher(vm, () => {\n  vm._update(vm._render(), hydrating)\n}, noop)\n```\n\n忽略第一个参数 `vm`，也就说，`Watcher` 内部应该对第二个参数求值，也就是运行这个函数：\n\n```\n() => {\n  vm._update(vm._render(), hydrating)\n}\n```\n\n所以 `vm._render()` 函数被第一个执行，该函数在 `src/core/instance/render.js` 中，该方法中的代码很多，下面是简化过的：\n\n```\n  Vue.prototype._render = function (): VNode {\n    const vm: Component = this\n    // 解构出 $options 中的 render 函数\n    const {\n      render,\n      staticRenderFns,\n      _parentVnode\n    } = vm.$options\n    ...\n\n    let vnode\n    try {\n      // 运行 render 函数\n      vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n      ...\n    }\n    \n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n  }\n```\n\n`_render` 方法首先从 `vm.$options` 中解构出 `render` 函数，大家应该记得：`vm.$options.render` 方法是在 `web-runtime-with-compiler.js` 文件中通过 `compileToFunctions` 方法将 `template` 或 `el` 编译而来的。解构出 `render` 函数后，接下来便执行了该方法：\n\n```\nvnode = render.call(vm._renderProxy, vm.$createElement)\n```\n\n其中使用 `call` 指定了 `render` 函数的作用域环境为 `vm._renderProxy`，这个属性在我们整理实例对象的时候知道，他是在 `Vue.prototype._init` 方法中被添加的，即：`vm._renderProxy = vm`，其实就是Vue实例对象本身，然后传递了一个参数：`vm.$createElement`。那么 `render` 函数到底是干什么的呢？让我们根据上面那句代码猜一猜，我们已经知道 `render` 函数是从 `template` 或 `el` 编译而来的，如果没错的话应该是返回一个虚拟DOM对象。我们不妨使用 `console.log` 打印一下 `render` 函数，当我们的模板这样编写时：\n\n```\n<ul id=\"app\">\n  <li>{{a}}</li>\n</ul>\n```\n\n打印的 `render` 函数如下：\n\n![render函数1](http://7xlolm.com1.z0.glb.clouddn.com/vueimgr2.png)\n\n我们修改模板为：\n\n```\n<ul id=\"app\">\n  <li v-for=\"i in b\">{{a}}</li>\n</ul>\n```\n\n打印出来的 `render` 函数如下：\n\n![render函数2](http://7xlolm.com1.z0.glb.clouddn.com/vueimgr3.png)\n\n其实了解Vue2.x版本的同学都知道，Vue提供了 `render` 选项，作为 `template` 的代替方案，同时为JavaScript提供了完全编程的能力，下面两种编写模板的方式实际是等价的：\n\n```js\n// 方案一：\nnew Vue({\n\tel: '#app',\n\tdata: {\n\t\ta: 1\n\t},\n\ttemplate: '<ul><li>{{a}}</li><li>{{a}}</li></ul>'\n})\n\n// 方案二：\nnew Vue({\n\tel: '#app',\n\trender: function (createElement) {\n\t\tcreateElement('ul', [\n\t\t\tcreateElement('li', this.a),\n\t\t\tcreateElement('li', this.a)\n\t\t])\n\t}\n})\n```\n\n现在我们再来看我们打印的 `render` 函数：\n\n```\nfunction anonymous() {\n\twith(this){\n\t\treturn _c('ul', { \n\t\t\tattrs: {\"id\": \"app\"}\n\t\t},[\n\t\t\t_c('li', [_v(_s(a))])\n\t\t])\n\t}\n}\n```\n\n是不是与我们自己写 `render` 函数很像？因为 render 函数的作用域被绑定到了Vue实例，即：`render.call(vm._renderProxy, vm.$createElement)`，所以上面代码中 `_c`、`_v`、`_s` 以及变量 `a`相当于Vue实例下的方法和变量。大家还记得诸如 `_c`、`_v`、`_s` 这样的方法在哪里定义的吗？我们在整理Vue构造函数的时候知道，他们在 `src/core/instance/render.js` 文件中的 `renderMixin` 方法中定义，除了这些之外还有诸如：`_l`、 `_m`、 `_o` 等等。其中 `_l` 就在我们使用 `v-for` 指令的时候出现了。所以现在大家知道为什么这些方法都被定义在 `render.js` 文件中了吧，因为他们就是为了构造出 `render` 函数而存在的。\n\n现在我们已经知道了 `render` 函数的长相，也知道了 `render` 函数的作用域是Vue实例本身即：`this`(或`vm`)。那么当我们执行 `render` 函数时，其中的变量如：`a`，就相当于：`this.a`，我们知道这是在求值，所以 `_mount` 中的这段代码：\n\n```\nvm._watcher = new Watcher(vm, () => {\n  vm._update(vm._render(), hydrating)\n}, noop)\n```\n\n当 `vm._render` 执行的时候，所依赖的变量就会被求值，并被收集为依赖。按照Vue中 `watcher.js` 的逻辑，当依赖的变量有变化时不仅仅回调函数被执行，实际上还要重新求值，即还要执行一遍：\n\n```\n() => {\n  vm._update(vm._render(), hydrating)\n}\n```\n\n这实际上就做到了 `re-render`，因为 `vm._update` 就是文章开头所说的虚拟DOM中的最后一步：`patch`\n\n`vm_render` 方法最终返回一个 `vnode` 对象，即虚拟DOM，然后作为 `vm_update` 的第一个参数传递了过去，我们看一下 `vm_update` 的逻辑，在 `src/core/instance/lifecycle.js` 文件中有这么一段代码：\n\n```js\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      )\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n```\n\n如果还没有 `prevVnode` 说明是首次渲染，直接创建真实DOM。如果已经有了 `prevVnode` 说明不是首次渲染，那么就采用 `patch` 算法进行必要的DOM操作。这就是Vue更新DOM的逻辑。只不过我们没有将 virtual DOM 内部的实现。\n\n现在我们来好好理理思路，当我们写如下代码时：\n\n```\nnew Vue({\n\tel: '#app',\n\tdata: {\n\t\ta: 1,\n\t\tb: [1, 2, 3]\n\t}\n})\n```\n\nVue 所做的事：\n\n> 1、构建数据响应系统，使用 `Observer` 将数据data转换为访问器属性；将 `el` 编译为 `render` 函数，`render` 函数返回值为虚拟DOM\n\n> 2、在 `_mount` 中对 `_update` 求值，而 `_update` 又会对 `render` 求值，`render` 内部又会对依赖的变量求值，收集为被求值的变量的依赖，当变量改变时，`_update` 又会重新执行一遍，从而做到 `re-render`。\n\n用一张详细一点的图表示就是这样的：\n\n![详细流程](http://7xlolm.com1.z0.glb.clouddn.com/vueimgdetail.png)\n\n到此，我们从大体流程，挑着重点的走了一遍Vue，但是还有很多细节我们没有提及，比如：\n\n1、将模板转为 `render` 函数的时候，实际是先生成的抽象语法树（AST），再将抽象语法树转成的 `render` 函数，而且这一整套的代码我们也没有提及，因为他在复杂了，其实这部分内容就是在完正则。\n\n2、我们也没有详细的讲 Virtual DOM 的实现原理，网上已经有文章讲了，大家可以搜一搜\n\n3、我们的例子中仅仅传递了 `el` ，`data` 选项，大家知道 Vue 支持的选项很多，比如我们都没有讲到，但都是触类旁通的，比如你搞清楚了 `data` 选项再去看 `computed` 选项或者 `props` 选项就会很容易，比如你知道了 `Watcher` 的工作机制再去看 `watch` 选项就会很容易。\n\n本篇文章作为Vue源码的启蒙文章，也许还有很多缺陷，全当抛砖引玉了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Vue源码学习","published":1,"updated":"2017-08-09T06:33:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvgl0001ybfcm1huguqd","content":"<p>原本文章的名字叫做《源码解析》，不过后来想想，还是用“源码学习”来的合适一点，在没有彻底掌握源码中的每一个字母之前，“解析”就有点标题党了。建议在看这篇文章之前，最好打开2.1.7的源码对照着看，这样可能更容易理解。另外本人水平有限，文中有错误或不妥的地方望大家多多指正共同成长。</p>\n<p>补充：Vue 2.2 刚刚发布，作为一个系列文章的第一篇，本篇文章主要从Vue代码的组织，Vue构造函数的还原，原型的设计，以及参数选项的处理和已经被写烂了的数据绑定与如何使用 Virtual DOM 更新视图入手。从整体的大方向观察框架，这么看来 <code>V2.1.7</code> 对于理解 <code>V2.2</code> 的代码不会有太大的影响。该系列文章的后续文章，都会从最新的源码入手，并对改动的地方做相应的提示。</p>\n<a id=\"more\"></a>\n<p>很久之前写过一篇文章：<a href=\"http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/\">JavaScript实现MVVM之我就是想监测一个普通对象的变化</a>，文章开头提到了我写博客的风格，还是那句话，只写努力让小白，甚至是小学生都能看明白的文章。这不免会导致对于某些同学来说这篇文章有些墨迹，所以大家根据自己的喜好，可以详细的看，也可以跳跃着看。</p>\n<h2 id=\"一、从了解一个开源项目入手\"><a href=\"#一、从了解一个开源项目入手\" class=\"headerlink\" title=\"一、从了解一个开源项目入手\"></a>一、从了解一个开源项目入手</h2><p>要看一个项目的源码，不要一上来就看，先去了解一下项目本身的元数据和依赖，除此之外最好也了解一下 PR 规则，Issue Reporting 规则等等。特别是“前端”开源项目，我们在看源码之前第一个想到的应该是：<code>package.json</code>文件。</p>\n<p>在 <code>package.json</code> 文件中，我们最应该关注的就是 <code>scripts</code> 字段和 <code>devDependencies</code> 以及 <code>dependencies</code> 字段，通过 <code>scripts</code> 字段我们可以知道项目中定义的脚本命令，通过 <code>devDependencies</code> 和 <code>dependencies</code> 字段我们可以了解项目的依赖情况。</p>\n<p>了解了这些之后，如果有依赖我们就 <code>npm install</code> 安装依赖就ok了。</p>\n<p>除了 <code>package.json</code> 之外，我们还要阅读项目的贡献规则文档，了解如何开始，一个好的开源项目肯定会包含这部分内容的，Vue也不例外：<a href=\"https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md\" target=\"_blank\" rel=\"external\">https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md</a>，在这个文档里说明了一些行为准则，PR指南，Issue Reporting 指南，Development Setup 以及 项目结构。通过阅读这些内容，我们可以了解项目如何开始，如何开发以及目录的说明，下面是对重要目录和文件的简单介绍，这些内容你都可以去自己阅读获取：</p>\n<pre><code>├── build --------------------------------- 构建相关的文件，一般情况下我们不需要动\n├── dist ---------------------------------- 构建后文件的输出目录\n├── examples ------------------------------ 存放一些使用Vue开发的应用案例\n├── flow ---------------------------------- 类型声明，使用开源项目 [Flow](https://flowtype.org/)\n├── package.json -------------------------- 不解释\n├── test ---------------------------------- 包含所有测试文件\n├── src ----------------------------------- 这个是我们最应该关注的目录，包含了源码\n│   ├── entries --------------------------- 包含了不同的构建或包的入口文件\n│   │   ├── web-runtime.js ---------------- 运行时构建的入口，输出 dist/vue.common.js 文件，不包含模板(template)到render函数的编译器，所以不支持 `template` 选项，我们使用vue默认导出的就是这个运行时的版本。大家使用的时候要注意\n│   │   ├── web-runtime-with-compiler.js -- 独立构建版本的入口，输出 dist/vue.js，它包含模板(template)到render函数的编译器\n│   │   ├── web-compiler.js --------------- vue-template-compiler 包的入口文件\n│   │   ├── web-server-renderer.js -------- vue-server-renderer 包的入口文件\n│   ├── compiler -------------------------- 编译器代码的存放目录，将 template 编译为 render 函数\n│   │   ├── parser ------------------------ 存放将模板字符串转换成元素抽象语法树的代码\n│   │   ├── codegen ----------------------- 存放从抽象语法树(AST)生成render函数的代码\n│   │   ├── optimizer.js ------------------ 分析静态树，优化vdom渲染\n│   ├── core ------------------------------ 存放通用的，平台无关的代码\n│   │   ├── observer ---------------------- 反应系统，包含数据观测的核心代码\n│   │   ├── vdom -------------------------- 包含虚拟DOM创建(creation)和打补丁(patching)的代码\n│   │   ├── instance ---------------------- 包含Vue构造函数设计相关的代码\n│   │   ├── global-api -------------------- 包含给Vue构造函数挂载全局方法(静态方法)或属性的代码\n│   │   ├── components -------------------- 包含抽象出来的通用组件\n│   ├── server ---------------------------- 包含服务端渲染(server-side rendering)的相关代码\n│   ├── platforms ------------------------- 包含平台特有的相关代码\n│   ├── sfc ------------------------------- 包含单文件组件(.vue文件)的解析逻辑，用于vue-template-compiler包\n│   ├── shared ---------------------------- 包含整个代码库通用的代码\n</code></pre><p>大概了解了重要目录和文件之后，我们就可以查看 <a href=\"https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\" target=\"_blank\" rel=\"external\">Development Setup</a> 中的常用命令部分，来了解如何开始这个项目了，我们可以看到这样的介绍：</p>\n<pre><code># watch and auto re-build dist/vue.js\n$ npm run dev\n\n# watch and auto re-run unit tests in Chrome\n$ npm run dev:test\n</code></pre><p>现在，我们只需要运行 <code>npm run dev</code> 即可监测文件变化并自动重新构建输出 dist/vue.js，然后运行 <code>npm run dev:test</code> 来测试。不过为了方便，我会在 <code>examples</code> 目录新建一个例子，然后引用 dist/vue.js 这样，我们可以直接拿这个例子一边改Vue源码一边看自己写的代码想怎么玩怎么玩。</p>\n<h2 id=\"二、看源码的小提示\"><a href=\"#二、看源码的小提示\" class=\"headerlink\" title=\"二、看源码的小提示\"></a>二、看源码的小提示</h2><p>在真正步入源码世界之前，我想简单说一说看源码的技巧：</p>\n<h3 id=\"注重大体框架，从宏观到微观\"><a href=\"#注重大体框架，从宏观到微观\" class=\"headerlink\" title=\"注重大体框架，从宏观到微观\"></a><em>注重大体框架，从宏观到微观</em></h3><p>当你看一个项目代码的时候，最好是能找到一条主线，先把大体流程结构摸清楚，再深入到细节，逐项击破，拿Vue举个栗子：假如你已经知道Vue中数据状态改变后会采用virtual DOM的方式更新DOM，这个时候，如果你不了解virtual DOM，那么听我一句“暂且不要去研究内部具体实现，因为这会是你丧失主线”，而你仅仅需要知道virtual DOM分为三个步骤：</p>\n<blockquote>\n<p>一、createElement(): 用 JavaScript对象(虚拟树) 描述 真实DOM对象(真实树)<br>二、diff(oldNode, newNode) : 对比新旧两个虚拟树的区别，收集差异<br>三、patch() : 将差异应用到真实DOM树</p>\n</blockquote>\n<p>有的时候 第二步 可能与 第三步 合并成一步(Vue 中的patch就是这样)，除此之外，还比如 <code>src/compiler/codegen</code> 内的代码，可能你不知道他写了什么，直接去看它会让你很痛苦，但是你只需要知道 codegen 是用来将抽象语法树(AST)生成render函数的就OK了，也就是生成类似下面这样的代码：</p>\n<pre><code class=\"js\">function anonymous() {\n    with(this){return _c(&#39;p&#39;,{attrs:{&quot;id&quot;:&quot;app&quot;}},[_v(&quot;\\n      &quot;+_s(a)+&quot;\\n      &quot;),_c(&#39;my-com&#39;)])}\n}\n</code></pre>\n<p>当我们知道了一个东西存在，且知道它存在的目的，那么我们就很容易抓住这条主线，这个系列的第一篇文章就是围绕大体主线展开的。了解大体之后，我们就知道了每部分内容都是做什么的，比如 codegen 是生成类似上面贴出的代码所示的函数的，那么再去看codegen下的代码时，目的性就会更强，就更容易理解。</p>\n<h2 id=\"三、Vue-的构造函数是什么样的\"><a href=\"#三、Vue-的构造函数是什么样的\" class=\"headerlink\" title=\"三、Vue 的构造函数是什么样的\"></a>三、Vue 的构造函数是什么样的</h2><p>balabala一大堆，开始来干货吧。我们要做的第一件事就是搞清楚 Vue 构造函数到底是什么样子的。</p>\n<p>我们知道，我们要使用 <code>new</code> 操作符来调用 <code>Vue</code>，那么也就是说 <code>Vue</code> 应该是一个构造函数，所以我们第一件要做的事儿就是把构造函数先扒的一清二楚，如何寻找 <code>Vue</code> 构造函数呢？当然是从 entry 开始啦，还记的我们运行 <code>npm run dev</code> 命令后，会输出 <code>dist/vue.js</code> 吗，那么我们就去看看 <code>npm run dev</code> 干了什么：</p>\n<pre><code>&quot;dev&quot;: &quot;TARGET=web-full-dev rollup -w -c build/config.js&quot;,\n</code></pre><p>首先将 TARGET 得值设置为 ‘web-full-dev’，然后，然后，然后如果你不了解 rollup 就应该简单去看一下啦……，简单的说就是一个JavaScript模块打包器，你可以把它简单的理解为和 webpack 一样，只不过它有他的优势，比如 Tree-shaking (webpack2也有)，但同样，在某些场景它也有他的劣势。。。废话不多说，其中 <code>-w</code> 就是watch，<code>-c</code> 就是指定配置文件为 <code>build/config.js</code> ，我们打开这个配置文件看一看：</p>\n<pre><code class=\"js\">// 引入依赖，定义 banner\n...\n\n// builds 对象\nconst builds = {\n    ...\n    // Runtime+compiler development build (Browser)\n    &#39;web-full-dev&#39;: {\n        entry: path.resolve(__dirname, &#39;../src/entries/web-runtime-with-compiler.js&#39;),\n        dest: path.resolve(__dirname, &#39;../dist/vue.js&#39;),\n        format: &#39;umd&#39;,\n        env: &#39;development&#39;,\n        alias: { he: &#39;./entity-decoder&#39; },\n        banner\n    },\n    ...\n}\n\n// 生成配置的方法\nfunction genConfig(opts){\n    ...\n}\n\nif (process.env.TARGET) {\n  module.exports = genConfig(builds[process.env.TARGET])\n} else {\n  exports.getBuild = name =&gt; genConfig(builds[name])\n  exports.getAllBuilds = () =&gt; Object.keys(builds).map(name =&gt; genConfig(builds[name]))\n}\n</code></pre>\n<p>上面的代码是简化过的，当我们运行 <code>npm run dev</code> 的时候 <code>process.env.TARGET</code> 的值等于 ‘web-full-dev’，所以</p>\n<pre><code class=\"js\">module.exports = genConfig(builds[process.env.TARGET])\n</code></pre>\n<p>这句代码相当于：</p>\n<pre><code class=\"js\">module.exports = genConfig({\n    entry: path.resolve(__dirname, &#39;../src/entries/web-runtime-with-compiler.js&#39;),\n    dest: path.resolve(__dirname, &#39;../dist/vue.js&#39;),\n    format: &#39;umd&#39;,\n    env: &#39;development&#39;,\n    alias: { he: &#39;./entity-decoder&#39; },\n    banner\n})\n</code></pre>\n<p>最终，genConfig 函数返回一个 config 对象，这个config对象就是Rollup的配置对象。那么我们就不难看到，入口文件是：</p>\n<pre><code>src/entries/web-runtime-with-compiler.js\n</code></pre><p>我们打开这个文件，不要忘了我们的主题，我们在寻找Vue构造函数，所以当我们看到这个文件的第一行代码是：</p>\n<pre><code class=\"js\">import Vue from &#39;./web-runtime&#39;\n</code></pre>\n<p>这个时候，你就应该知道，这个文件暂时与你无缘，你应该打开 <code>web-runtime.js</code> 文件，不过当你打开这个文件时，你发现第一行是这样的：</p>\n<pre><code class=\"js\">import Vue from &#39;core/index&#39;\n</code></pre>\n<p>依照此思路，最终我们寻找到Vue构造函数的位置应该是在 <code>src/core/instance/index.js</code> 文件中，其实我们猜也猜得到，上面介绍目录的时候说过：instance 是存放Vue构造函数设计相关代码的目录。总结一下，我们寻找的过程是这样的：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimg2BD0DCC6-D689-4809-93D3-2F979E8F8C0C.png\" alt=\"寻找 Vue 构造函数路线\"></p>\n<p>我们回头看一看 <code>src/core/instance/index.js</code> 文件，很简单：</p>\n<pre><code class=\"js\">import { initMixin } from &#39;./init&#39;\nimport { stateMixin } from &#39;./state&#39;\nimport { renderMixin } from &#39;./render&#39;\nimport { eventsMixin } from &#39;./events&#39;\nimport { lifecycleMixin } from &#39;./lifecycle&#39;\nimport { warn } from &#39;../util/index&#39;\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;\n    !(this instanceof Vue)) {\n    warn(&#39;Vue is a constructor and should be called with the `new` keyword&#39;)\n  }\n  this._init(options)\n}\n\ninitMixin(Vue)\nstateMixin(Vue)\neventsMixin(Vue)\nlifecycleMixin(Vue)\nrenderMixin(Vue)\n\nexport default Vue\n</code></pre>\n<p>引入依赖，定义 Vue 构造函数，然后以Vue构造函数为参数，调用了五个方法，最后导出 Vue。这五个方法分别来自五个文件：<code>init.js</code> <code>state.js</code> <code>render.js</code> <code>events.js</code> 以及 <code>lifecycle.js</code>。</p>\n<p>打开这五个文件，找到相应的方法，你会发现，这些方法的作用，就是在 Vue 的原型 prototype 上挂载方法或属性，经历了这五个方法后的Vue会变成这样：</p>\n<pre><code class=\"js\">// initMixin(Vue)    src/core/instance/init.js **************************************************\nVue.prototype._init = function (options?: Object) {}\n\n// stateMixin(Vue)    src/core/instance/state.js **************************************************\nVue.prototype.$data\nVue.prototype.$set = set\nVue.prototype.$delete = del\nVue.prototype.$watch = function(){}\n\n// renderMixin(Vue)    src/core/instance/render.js **************************************************\nVue.prototype.$nextTick = function (fn: Function) {}\nVue.prototype._render = function (): VNode {}\nVue.prototype._s = _toString\nVue.prototype._v = createTextVNode\nVue.prototype._n = toNumber\nVue.prototype._e = createEmptyVNode\nVue.prototype._q = looseEqual\nVue.prototype._i = looseIndexOf\nVue.prototype._m = function(){}\nVue.prototype._o = function(){}\nVue.prototype._f = function resolveFilter (id) {}\nVue.prototype._l = function(){}\nVue.prototype._t = function(){}\nVue.prototype._b = function(){}\nVue.prototype._k = function(){}\n\n// eventsMixin(Vue)    src/core/instance/events.js **************************************************\nVue.prototype.$on = function (event: string, fn: Function): Component {}\nVue.prototype.$once = function (event: string, fn: Function): Component {}\nVue.prototype.$off = function (event?: string, fn?: Function): Component {}\nVue.prototype.$emit = function (event: string): Component {}\n\n// lifecycleMixin(Vue)    src/core/instance/lifecycle.js **************************************************\nVue.prototype._mount = function(){}\nVue.prototype._update = function (vnode: VNode, hydrating?: boolean) {}\nVue.prototype._updateFromParent = function(){}\nVue.prototype.$forceUpdate = function () {}\nVue.prototype.$destroy = function () {}\n</code></pre>\n<p>这样就结束了吗？并没有，根据我们之前寻找 Vue 的路线，这只是刚刚开始，我们追溯路线往回走，那么下一个处理 Vue 构造函数的应该是 <code>src/core/index.js</code> 文件，我们打开它：</p>\n<pre><code class=\"js\">import Vue from &#39;./instance/index&#39;\nimport { initGlobalAPI } from &#39;./global-api/index&#39;\nimport { isServerRendering } from &#39;core/util/env&#39;\n\ninitGlobalAPI(Vue)\n\nObject.defineProperty(Vue.prototype, &#39;$isServer&#39;, {\n  get: isServerRendering\n})\n\nVue.version = &#39;__VERSION__&#39;\n\nexport default Vue\n</code></pre>\n<p>这个文件也很简单，从 instance/index 中导入已经在原型上挂载了方法和属性后的 Vue，然后导入 <code>initGlobalAPI</code> 和 <code>isServerRendering</code>，之后将Vue作为参数传给  <code>initGlobalAPI</code> ，最后又在 <code>Vue.prototype</code> 上挂载了 <code>$isServer</code> ，在 <code>Vue</code> 上挂载了 <code>version</code> 属性。</p>\n<p><code>initGlobalAPI</code> 的作用是在 <code>Vue</code> 构造函数上挂载静态属性和方法，<code>Vue</code> 在经过 <code>initGlobalAPI</code> 之后，会变成这样：</p>\n<pre><code class=\"js\">// src/core/index.js / src/core/global-api/index.js\nVue.config\nVue.util = util\nVue.set = set\nVue.delete = del\nVue.nextTick = util.nextTick\nVue.options = {\n    components: {\n        KeepAlive\n    },\n    directives: {},\n    filters: {},\n    _base: Vue\n}\nVue.use\nVue.mixin\nVue.cid = 0\nVue.extend\nVue.component = function(){}\nVue.directive = function(){}\nVue.filter = function(){}\n\nVue.prototype.$isServer\nVue.version = &#39;__VERSION__&#39;\n</code></pre>\n<p>其中，稍微复杂一点的就是 <code>Vue.options</code>，大家稍微分析分析就会知道他的确长成那个样子。下一个就是 <code>web-runtime.js</code> 文件了，<code>web-runtime.js</code> 文件主要做了三件事儿：</p>\n<blockquote>\n<p>1、覆盖 <code>Vue.config</code> 的属性，将其设置为平台特有的一些方法<br>2、<code>Vue.options.directives</code> 和 <code>Vue.options.components</code> 安装平台特有的指令和组件<br>3、在 <code>Vue.prototype</code> 上定义 <code>__patch__</code> 和 <code>$mount</code></p>\n</blockquote>\n<p>经过 <code>web-runtime.js</code> 文件之后，<code>Vue</code> 变成下面这个样子：</p>\n<pre><code class=\"js\">// 安装平台特定的utils\nVue.config.isUnknownElement = isUnknownElement\nVue.config.isReservedTag = isReservedTag\nVue.config.getTagNamespace = getTagNamespace\nVue.config.mustUseProp = mustUseProp\n// 安装平台特定的 指令 和 组件\nVue.options = {\n    components: {\n        KeepAlive,\n        Transition,\n        TransitionGroup\n    },\n    directives: {\n        model,\n        show\n    },\n    filters: {},\n    _base: Vue\n}\nVue.prototype.__patch__\nVue.prototype.$mount\n</code></pre>\n<p>这里大家要注意的是 <code>Vue.options</code> 的变化。另外这里的 <code>$mount</code> 方法很简单：</p>\n<pre><code class=\"js\">Vue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el &amp;&amp; inBrowser ? query(el) : undefined\n  return this._mount(el, hydrating)\n}\n</code></pre>\n<p>首先根据是否是浏览器环境决定要不要 <code>query(el)</code> 获取元素，然后将 <code>el</code> 作为参数传递给 <code>this._mount()</code>。</p>\n<p>最后一个处理 Vue 的文件就是入口文件 <code>web-runtime-with-compiler.js</code> 了，该文件做了两件事：</p>\n<p>1、缓存来自 <code>web-runtime.js</code> 文件的 <code>$mount</code> 函数</p>\n<pre><code class=\"js\">const mount = Vue.prototype.$mount\n</code></pre>\n<p>然后覆盖覆盖了 <code>Vue.prototype.$mount</code></p>\n<p>2、在 Vue 上挂载 <code>compile</code></p>\n<pre><code class=\"js\">Vue.compile = compileToFunctions\n</code></pre>\n<p>compileToFunctions 函数的作用，就是将模板 <code>template</code> 编译为render函数。</p>\n<p>至此，我们算是还原了 Vue 构造函数，总结一下：</p>\n<blockquote>\n<p>1、<code>Vue.prototype</code> 下的属性和方法的挂载主要是在 <code>src/core/instance</code> 目录中的代码处理的</p>\n<p>2、<code>Vue</code> 下的静态属性和方法的挂载主要是在 <code>src/core/global-api</code> 目录下的代码处理的</p>\n<p>3、<code>web-runtime.js</code> 主要是添加web平台特有的配置、组件和指令，<code>web-runtime-with-compiler.js</code> 给Vue的 <code>$mount</code> 方法添加 <code>compiler</code> 编译器，支持 <code>template</code>。</p>\n</blockquote>\n<h2 id=\"四、一个贯穿始终的例子\"><a href=\"#四、一个贯穿始终的例子\" class=\"headerlink\" title=\"四、一个贯穿始终的例子\"></a>四、一个贯穿始终的例子</h2><p>在了解了 <code>Vue</code> 构造函数的设计之后，接下来，我们一个贯穿始终的例子就要登场了，掌声有请：</p>\n<pre><code class=\"js\">let v = new Vue({\n    el: &#39;#app&#39;,\n    data: {\n        a: 1,\n        b: [1, 2, 3]\n    }\n})\n</code></pre>\n<p>好吧，我承认这段代码你家没满月的孩子都会写了。这段代码就是我们贯穿始终的例子，它就是这篇文章的主线，在后续的讲解中，都会以这段代码为例，当讲到必要的地方，会为其添加选项，比如讲计算属性的时候当然要加上一个 <code>computed</code> 属性了。不过在最开始，我只传递了两个选项 <code>el</code> 以及 <code>data</code>，“我们看看接下来会发生什么，让我们拭目以待“ —- NBA球星在接受采访时最喜欢说这句话。</p>\n<p><em>当我们按照例子那样编码使用Vue的时候，Vue都做了什么？</em></p>\n<p>想要知道Vue都干了什么，我们就要找到 Vue 初始化程序，查看 Vue 构造函数：</p>\n<pre><code class=\"js\">function Vue (options) {\n  if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;\n    !(this instanceof Vue)) {\n    warn(&#39;Vue is a constructor and should be called with the `new` keyword&#39;)\n  }\n  this._init(options)\n}\n</code></pre>\n<p>我们发现，<code>_init()</code> 方法就是Vue调用的第一个方法，然后将我们的参数 <code>options</code> 透传了过去。在调用 <code>_init()</code> 之前，还做了一个安全模式的处理，告诉开发者必须使用 <code>new</code> 操作符调用 Vue。根据之前我们的整理，<code>_init()</code> 方法应该是在 <code>src/core/instance/init.js</code> 文件中定义的，我们打开这个文件查看 <code>_init()</code> 方法：</p>\n<pre><code class=\"js\">  Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n    // a flag to avoid this being observed\n    vm._isVue = true\n    // merge options\n    if (options &amp;&amp; options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== &#39;production&#39;) {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    // expose real self\n    vm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    callHook(vm, &#39;beforeCreate&#39;)\n    initState(vm)\n    callHook(vm, &#39;created&#39;)\n    initRender(vm)\n  }\n</code></pre>\n<p><code>_init()</code> 方法在一开始的时候，在 <code>this</code> 对象上定义了两个属性：<code>_uid</code> 和 <code>_isVue</code>，然后判断有没有定义 <code>options._isComponent</code>，在使用 Vue 开发项目的时候，我们是不会使用 <code>_isComponent</code> 选项的，这个选项是 Vue 内部使用的，按照本节开头的例子，这里会走 <code>else</code> 分支，也就是这段代码：</p>\n<pre><code class=\"js\">  vm.$options = mergeOptions(\n    resolveConstructorOptions(vm.constructor),\n    options || {},\n    vm\n  )\n</code></pre>\n<p>这样 <code>Vue</code> 第一步所做的事情就来了：<span style=\"color: red;\"><em>使用策略对象合并参数选项</em></span></p>\n<p>可以发现，Vue使用 <code>mergeOptions</code> 来处理我们调用Vue时传入的参数选项(options)，然后将返回值赋值给 <code>this.$options</code> (vm === this)，传给 <code>mergeOptions</code> 方法三个参数，我们分别来看一看，首先是：<code>resolveConstructorOptions(vm.constructor)</code>，我们查看一下这个方法：</p>\n<pre><code class=\"js\">export function resolveConstructorOptions (Ctor: Class&lt;Component&gt;) {\n  let options = Ctor.options\n  if (Ctor.super) {\n    const superOptions = Ctor.super.options\n    const cachedSuperOptions = Ctor.superOptions\n    const extendOptions = Ctor.extendOptions\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed\n      Ctor.superOptions = superOptions\n      extendOptions.render = options.render\n      extendOptions.staticRenderFns = options.staticRenderFns\n      extendOptions._scopeId = options._scopeId\n      options = Ctor.options = mergeOptions(superOptions, extendOptions)\n      if (options.name) {\n        options.components[options.name] = Ctor\n      }\n    }\n  }\n  return options\n}\n</code></pre>\n<p>这个方法接收一个参数 <code>Ctor</code>，通过传入的 <code>vm.constructor</code> 我们可以知道，其实就是 <code>Vue</code> 构造函数本身。所以下面这句代码：</p>\n<pre><code class=\"js\">let options = Ctor.options\n</code></pre>\n<p>相当于：</p>\n<pre><code class=\"js\">let options = Vue.options\n</code></pre>\n<p>大家还记得 <code>Vue.options</code> 吗？在寻找Vue构造函数一节里，我们整理了 <code>Vue.options</code> 应该长成下面这个样子：</p>\n<pre><code class=\"js\">Vue.options = {\n    components: {\n        KeepAlive,\n        Transition,\n        TransitionGroup\n    },\n    directives: {\n        model,\n        show\n    },\n    filters: {},\n    _base: Vue\n}\n</code></pre>\n<p>之后判断是否定义了 <code>Vue.super</code> ，这个是用来处理继承的，我们后续再讲，在本例中，<code>resolveConstructorOptions</code> 方法直接返回了 <code>Vue.options</code>。也就是说，传递给 <code>mergeOptions</code> 方法的第一个参数就是 <code>Vue.options</code>。</p>\n<p>传给 <code>mergeOptions</code> 方法的第二个参数是我们调用Vue构造函数时的参数选项，第三个参数是 <code>vm</code> 也就是 <code>this</code> 对象，按照本节开头的例子那样使用 Vue，最终运行的代码应该如下：</p>\n<pre><code class=\"js\">  vm.$options = mergeOptions(\n      // Vue.options\n    {\n        components: {\n            KeepAlive,\n            Transition,\n            TransitionGroup\n        },\n        directives: {\n            model,\n            show\n        },\n        filters: {},\n        _base: Vue\n    },\n    // 调用Vue构造函数时传入的参数选项 options\n    {\n        el: &#39;#app&#39;,\n        data: {\n            a: 1,\n            b: [1, 2, 3]\n        }\n    },\n    // this\n    vm\n  )\n</code></pre>\n<p>了解了这些，我们就可以看看 <code>mergeOptions</code> 到底做了些什么了，根据引用寻找到 <code>mergeOptions</code> 应该是在 <code>src/core/util/options.js</code> 文件中定义的。这个文件第一次看可能会头大，下面是我处理后的简略展示，大家看上去应该更容易理解了：</p>\n<pre><code class=\"js\">// 1、引用依赖\nimport Vue from &#39;../instance/index&#39;\n其他引用...\n\n// 2、合并父子选项值为最终值的策略对象，此时 strats 是一个空对象，因为 config.optionMergeStrategies = Object.create(null)\nconst strats = config.optionMergeStrategies\n// 3、在 strats 对象上定义与参数选项名称相同的方法\nstrats.el = \nstrats.propsData = function (parent, child, vm, key){}\nstrats.data = function (parentVal, childVal, vm)\n\nconfig._lifecycleHooks.forEach(hook =&gt; {\n  strats[hook] = mergeHook\n})\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + &#39;s&#39;] = mergeAssets\n})\n\nstrats.watch = function (parentVal, childVal)\n\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal: ?Object, childVal: ?Object)\n// 默认的合并策略，如果有 `childVal` 则返回 `childVal` 没有则返回 `parentVal`\nconst defaultStrat = function (parentVal: any, childVal: any): any {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n}\n\n// 4、mergeOptions 中根据参数选项调用同名的策略方法进行合并处理\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n\n  // 其他代码\n  ...\n\n  const options = {}\n  let key\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n\n}\n</code></pre>\n<p>上面的代码中，我省略了一些工具函数，例如 <code>mergeHook</code> 和 <code>mergeAssets</code> 等等，唯一需要注意的是这段代码：</p>\n<pre><code class=\"js\">config._lifecycleHooks.forEach(hook =&gt; {\n  strats[hook] = mergeHook\n})\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + &#39;s&#39;] = mergeAssets\n})\n</code></pre>\n<p><code>config</code> 对象引用自 <code>src/core/config.js</code> 文件，最终的结果就是在 <code>strats</code> 下添加了相应的生命周期选项的合并策略函数为 <code>mergeHook</code>，添加指令(directives)、组件(components)、过滤器(filters)等选项的合并策略函数为 <code>mergeAssets</code>。</p>\n<p>这样看来就清晰多了，拿我们贯穿本文的例子来说：</p>\n<pre><code class=\"js\">let v = new Vue({\n    el: &#39;#app&#39;,\n    data: {\n        a: 1,\n        b: [1, 2, 3]\n    }\n})\n</code></pre>\n<p>其中 <code>el</code> 选项会使用 <code>defaultStrat</code> 默认策略函数处理，<code>data</code> 选项则会使用 <code>strats.data</code> 策略函数处理，并且根据 <code>strats.data</code> 中的逻辑，<code>strats.data</code> 方法最终会返回一个函数：<code>mergedInstanceDataFn</code>。</p>\n<p>这里就不详细的讲解每一个策略函数的内容了，后续都会讲到，这里我们还是抓住主线理清思路为主，只需要知道Vue在处理选项的时候，使用了一个策略对象对父子选项进行合并。并将最终的值赋值给实例下的 <code>$options</code> 属性即：<code>this.$options</code>，那么我们继续查看 <code>_init()</code> 方法在合并完选项之后，又做了什么：</p>\n<p>合并完选项之后，Vue 第二部做的事情就来了：<span style=\"color: red;\"><em>初始化工作与Vue实例对象的设计</em></span></p>\n<p>前面讲了 Vue 构造函数的设计，并且整理了 <em>Vue原型属性与方法</em> 和 <em>Vue静态属性与方法</em>，而 Vue 实例对象就是通过构造函数创造出来的，让我们来看一看 Vue 实例对象是如何设计的，下面的代码是 <code>_init()</code> 方法合并完选项之后的代码：</p>\n<pre><code class=\"js\">    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== &#39;production&#39;) {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    // expose real self\n    vm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    callHook(vm, &#39;beforeCreate&#39;)\n    initState(vm)\n    callHook(vm, &#39;created&#39;)\n    initRender(vm)\n</code></pre>\n<p>根据上面的代码，在生产环境下会为实例添加两个属性，并且属性值都为实例本身：</p>\n<pre><code class=\"js\">vm._renderProxy = vm\nvm._self = vm\n</code></pre>\n<p>然后，调用了四个 <code>init*</code> 方法分别为：<code>initLifecycle</code>、<code>initEvents</code>、<code>initState</code>、<code>initRender</code>，且在 <code>initState</code> 前后分别回调了生命周期钩子 <code>beforeCreate</code> 和 <code>created</code>，而 <code>initRender</code> 是在 <code>created</code> 钩子执行之后执行的，看到这里，也就明白了为什么 created 的时候不能操作DOM了。因为这个时候还没有渲染真正的DOM元素到文档中。<code>created</code> 仅仅代表数据状态的初始化完成。</p>\n<p>根据四个 <code>init*</code> 方法的引用关系打开对应的文件查看对应的方法，我们发现，这些方法是在处理Vue实例对象，以及做一些初始化的工作，类似整理Vue构造函数一样，我同样针对Vue实例做了属性和方法的整理，如下：</p>\n<pre><code class=\"js\">// 在 Vue.prototype._init 中添加的属性         **********************************************************\nthis._uid = uid++\nthis._isVue = true\nthis.$options = {\n    components,\n    directives,\n    filters,\n    _base,\n    el,\n    data: mergedInstanceDataFn()\n}\nthis._renderProxy = this\nthis._self = this\n\n// 在 initLifecycle 中添加的属性        **********************************************************\nthis.$parent = parent\nthis.$root = parent ? parent.$root : this\n\nthis.$children = []\nthis.$refs = {}\n\nthis._watcher = null\nthis._inactive = false\nthis._isMounted = false\nthis._isDestroyed = false\nthis._isBeingDestroyed = false\n\n// 在 initEvents     中添加的属性         **********************************************************\nthis._events = {}\nthis._updateListeners = function(){}\n\n// 在 initState 中添加的属性        **********************************************************\nthis._watchers = []\n    // initData\n    this._data\n\n// 在 initRender     中添加的属性     **********************************************************\nthis.$vnode = null // the placeholder node in parent tree\nthis._vnode = null // the root of the child tree\nthis._staticTrees = null\nthis.$slots\nthis.$scopedSlots\nthis._c\nthis.$createElement\n</code></pre>\n<p>以上就是一个Vue实例所包含的属性和方法，除此之外要注意的是，在 <code>initEvents</code> 中除了添加属性之外，如果有 <code>vm.$options._parentListeners</code> 还要调用 <code>vm._updateListeners()</code> 方法，在 <code>initState</code> 中又调用了一些其他init方法，如下：</p>\n<pre><code class=\"js\">export function initState (vm: Component) {\n  vm._watchers = []\n  initProps(vm)\n  initMethods(vm)\n  initData(vm)\n  initComputed(vm)\n  initWatch(vm)\n}\n</code></pre>\n<p>最后在 <code>initRender</code> 中如果有 <code>vm.$options.el</code> 还要调用 <code>vm.$mount(vm.$options.el)</code>，如下：</p>\n<pre><code class=\"js\">  if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n  }\n</code></pre>\n<p>这就是为什么如果不传递 <code>el</code> 选项就需要手动 mount 的原因了。</p>\n<p>那么我们依照我们本节开头的的例子，以及初始化的先后顺序来逐一看一看都发生了什么。我们将 <code>initState</code> 中的 <code>init*</code> 方法展开来看，执行顺序应该是这样的（从上到下的顺序执行）：</p>\n<pre><code>initLifecycle(vm)\ninitEvents(vm)\ncallHook(vm, &#39;beforeCreate&#39;)\ninitProps(vm)\ninitMethods(vm)\ninitData(vm)\ninitComputed(vm)\ninitWatch(vm)\ncallHook(vm, &#39;created&#39;)\ninitRender(vm)\n</code></pre><p>首先是 <code>initLifecycle</code>，这个函数的作用就是在实例上添加一些属性，然后是 <code>initEvents</code>，由于 <code>vm.$options._parentListeners</code> 的值为 <code>undefined</code> 所以也仅仅是在实例上添加属性， <code>vm._updateListeners(listeners)</code> 并不会执行，由于我们只传递了 <code>el</code> 和 <code>data</code>，所以 <code>initProps</code>、<code>initMethods</code>、<code>initComputed</code>、<code>initWatch</code> 这四个方法什么都不会做，只有 <code>initData</code> 会执行。最后是 <code>initRender</code>，除了在实例上添加一些属性外，由于我们传递了 <code>el</code> 选项，所以会执行 <code>vm.$mount(vm.$options.el)</code>。</p>\n<p>综上所述：按照我们的例子那样写，初始化工作只包含两个主要内容即：<code>initData</code> 和 <code>initRender</code>。</p>\n<h2 id=\"五、通过initData看Vue的数据响应系统\"><a href=\"#五、通过initData看Vue的数据响应系统\" class=\"headerlink\" title=\"五、通过initData看Vue的数据响应系统\"></a>五、通过<code>initData</code>看Vue的数据响应系统</h2><p>Vue的数据响应系统包含三个部分：<code>Observer</code>、<code>Dep</code>、<code>Watcher</code>。关于数据响应系统的内容真的已经被文章讲烂了，所以我就简单的说一下，力求大家能理解就ok，我们还是先看一下 <code>initData</code> 中的代码：</p>\n<pre><code>function initData (vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === &#39;function&#39;\n    ? data.call(vm)\n    : data || {}\n  if (!isPlainObject(data)) {\n    data = {}\n    process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(\n      &#39;data functions should return an object:\\n&#39; +\n      &#39;https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#39;,\n      vm\n    )\n  }\n  // proxy data on instance\n  const keys = Object.keys(data)\n  const props = vm.$options.props\n  let i = keys.length\n  while (i--) {\n    if (props &amp;&amp; hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(\n        `The data property &quot;${keys[i]}&quot; is already declared as a prop. ` +\n        `Use prop default value instead.`,\n        vm\n      )\n    } else {\n      proxy(vm, keys[i])\n    }\n  }\n  // observe data\n  observe(data)\n  data.__ob__ &amp;&amp; data.__ob__.vmCount++\n}\n</code></pre><p>首先，先拿到 data 数据：<code>let data = vm.$options.data</code>，大家还记得此时 <code>vm.$options.data</code> 的值应该是通过 <code>mergeOptions</code> 合并处理后的 <code>mergedInstanceDataFn</code> 函数吗？所以在得到 data 后，它又判断了 data 的数据类型是不是 ‘function’，最终的结果是：data 还是我们传入的数据选项的 data，即：</p>\n<pre><code>data: {\n    a: 1,\n    b: [1, 2, 3]\n}\n</code></pre><p>然后在实例对象上定义 <code>_data</code> 属性，该属性与 <code>data</code> 是相同的引用。</p>\n<p>然后是一个 <code>while</code> 循环，循环的目的是在实例对象上对数据进行代理，这样我们就能通过 <code>this.a</code> 来访问 <code>data.a</code> 了，代码的处理是在 <code>proxy</code> 函数中，该函数非常简单，仅仅是在实例对象上设置与 <code>data</code> 属性同名的访问器属性，然后使用 <code>_data</code> 做数据劫持，如下：</p>\n<pre><code>function proxy (vm: Component, key: string) {\n  if (!isReserved(key)) {\n    Object.defineProperty(vm, key, {\n      configurable: true,\n      enumerable: true,\n      get: function proxyGetter () {\n        return vm._data[key]\n      },\n      set: function proxySetter (val) {\n        vm._data[key] = val\n      }\n    })\n  }\n}\n</code></pre><p>做完数据的代理，就正式进入响应系统，</p>\n<pre><code>observe(data)\n</code></pre><p>我们说过，数据响应系统主要包含三部分：<code>Observer</code>、<code>Dep</code>、<code>Watcher</code>，代码分别存放在：<code>observer/index.js</code>、<code>observer/dep.js</code> 以及 <code>observer/watcher.js</code> 文件中，这回我们换一种方式，我们先不看其源码，大家先跟着我的思路来思考，最后回头再去看代码，你会有一种：”奥，不过如此“的感觉。</p>\n<p>假如，我们有如下代码：</p>\n<pre><code class=\"js\">var data = {\n    a: 1,\n    b: {\n        c: 2\n    }\n}\n\nobserver(data)\n\nnew Watch(&#39;a&#39;, () =&gt; {\n    alert(9)\n})\nnew Watch(&#39;a&#39;, () =&gt; {\n    alert(90)\n})\nnew Watch(&#39;b.c&#39;, () =&gt; {\n    alert(80)\n})\n</code></pre>\n<p>这段代码目的是，首先定义一个数据对象 <code>data</code>，然后通过 observer 对其进行观测，之后定义了三个观察者，当数据有变化时，执行相应的方法，这个功能使用Vue的实现原来要如何去实现？其实就是在问 <code>observer</code> 怎么写？<code>Watch</code> 构造函数又怎么写？接下来我们逐一实现。</p>\n<p>首先，observer 的作用是：将数据对象data的属性转换为访问器属性：</p>\n<pre><code>class Observer {\n    constructor (data) {\n        this.walk(data)\n    }\n    walk (data) {\n        // 遍历 data 对象属性，调用 defineReactive 方法\n        let keys = Object.keys(data)\n        for(let i = 0; i &lt; keys.length; i++){\n            defineReactive(data, keys[i], data[keys[i]])\n        }\n    }\n}\n\n// defineReactive方法仅仅将data的属性转换为访问器属性\nfunction defineReactive (data, key, val) {\n    // 递归观测子属性\n    observer(val)\n\n    Object.defineProperty(data, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            return val\n        },\n        set: function (newVal) {\n            if(val === newVal){\n                return\n            }\n            // 对新值进行观测\n            observer(newVal)\n        }\n    })\n}\n\n// observer 方法首先判断data是不是纯JavaScript对象，如果是，调用 Observer 类进行观测\nfunction observer (data) {\n    if(Object.prototype.toString.call(data) !== &#39;[object Object]&#39;) {\n        return\n    }\n    new Observer(data)\n}\n</code></pre><p>上面的代码中，我们定义了 observer 方法，该方法检测了数据data是不是纯JavaScript对象，如果是就调用 <code>Observer</code> 类，并将 <code>data</code> 作为参数透传。在 <code>Observer</code> 类中，我们使用 <code>walk</code> 方法对数据data的属性循环调用 <code>defineReactive</code> 方法，<code>defineReactive</code> 方法很简单，仅仅是将数据data的属性转为访问器属性，并对数据进行递归观测，否则只能观测数据data的直属子属性。这样我们的第一步工作就完成了，当我们修改或者获取data属性值的时候，通过 <code>get</code> 和 <code>set</code> 即能获取到通知。</p>\n<p>我们继续往下看，来看一下 <code>Watch</code>：</p>\n<pre><code>new Watch(&#39;a&#39;, () =&gt; {\n    alert(9)\n})\n</code></pre><p>现在的问题是，<code>Watch</code> 要怎么和 <code>observer</code> 关联？？？？？？？我们看看 <code>Watch</code> 它知道些什么，通过上面调用 <code>Watch</code> 的方式，传递给 <code>Watch</code> 两个参数，一个是 ‘a’ 我们可以称其为表达式，另外一个是回调函数。所以我们目前只能写出这样的代码：</p>\n<pre><code>class Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n    }\n}\n</code></pre><p>那么要怎么关联呢，大家看下面的代码会发生什么：</p>\n<pre><code>class Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n        data[exp]\n    }\n}\n</code></pre><p>多了一句 <code>data[exp]</code>，这句话是在干什么？是不是在获取 <code>data</code> 下某个属性的值，比如 exp 为 ‘a’ 的话，那么 <code>data[exp]</code> 就相当于在获取 <code>data.a</code> 的值，那这会放生什么？大家不要忘了，此时数据 <code>data</code> 下的属性已经是访问器属性了，所以这么做的结果会直接触发对应属性的 <code>get</code> 函数，这样我们就成功的和 <code>observer</code> 产生了关联，但这样还不够，我们还是没有达到目的，不过我们已经无限接近了，我们继续思考看一下可不可以这样：</p>\n<blockquote>\n<p>既然在 <code>Watch</code> 中对表达式求值，能够触发 <code>observer</code> 的 <code>get</code>，那么可不可以在 <code>get</code> 中收集 <code>Watch</code> 中函数呢？</p>\n</blockquote>\n<p>答案是可以的，不过这个时候我们就需要 <code>Dep</code> 出场了，它是一个依赖收集器。我们的思路是：<code>data</code> 下的每一个属性都有一个唯一的 <code>Dep</code> 对象，在 <code>get</code> 中收集仅针对该属性的依赖，然后在 <code>set</code> 方法中触发所有收集的依赖，这样就搞定了，看如下代码：</p>\n<pre><code>class Dep {\n    constructor () {\n        this.subs = []\n    }\n    addSub () {\n        this.subs.push(Dep.target)\n    }\n    notify () {\n        for(let i = 0; i &lt; this.subs.length; i++){\n            this.subs[i].fn()\n        }\n    }\n}\nDep.target = null\nfunction pushTarget(watch){\n    Dep.target = watch\n}\n\nclass Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n        pushTarget(this)\n        data[exp]\n    }\n}\n</code></pre><p>上面的代码中，我们在 <code>Watch</code> 中增加了 <code>pushTarget(this)</code>，可以发现，这句代码的作用是将 <code>Dep.target</code> 的值设置为该Watch对象。在 <code>pushTarget</code> 之后我们才对表达式进行求值，接着，我们修改 <code>defineReactive</code> 代码如下</p>\n<pre><code>function defineReactive (data, key, val) {\n    observer(val)\n    let dep = new Dep()        // 新增\n    Object.defineProperty(data, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            dep.addSub()    // 新增\n            return val\n        },\n        set: function (newVal) {\n            if(val === newVal){\n                return\n            }\n            observer(newVal)\n            dep.notify()    // 新增\n        }\n    })\n}\n</code></pre><p>如标注，新增了三句代码，我们知道，<code>Watch</code> 中对表达式求值会触发 <code>get</code> 方法，我们在 <code>get</code> 方法中调用了 <code>dep.addSub</code>，也就执行了这句代码：<code>this.subs.push(Dep.target)</code>，由于在这句代码执行之前，<code>Dep.target</code> 的值已经被设置为一个 <code>Watch</code> 对象了，所以最终结果就是收集了一个 <code>Watch</code> 对象，然后在 <code>set</code> 方法中我们调用了 <code>dep.notify</code>，所以当data属性值变化的时候，就会通过 <code>dep.notify</code> 循环调用所有收集的Watch对象中的回调函数：</p>\n<pre><code>notify () {\n    for(let i = 0; i &lt; this.subs.length; i++){\n        this.subs[i].fn()\n    }\n}\n</code></pre><p>这样 <code>observer</code>、<code>Dep</code>、<code>Watch</code> 三者就联系成为一个有机的整体，实现了我们最初的目标，完整的代码可以戳这里：<a href=\"https://github.com/HcySunYang/observer-dep-watch\" target=\"_blank\" rel=\"external\">observer-dep-watch</a>。这里还给大家挖了个坑，因为我们没有处理对数组的观测，由于比较复杂并且这又不是我们讨论的重点，如果大家想了解可以戳我的这篇文章：<a href=\"http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/\">JavaScript实现MVVM之我就是想监测一个普通对象的变化</a>，另外，在 Watch 中对表达式求值的时候也只做了直接子属性的求值，所以如果 exp 的值为 ‘a.b’ 的时候，就不可以用了，Vue的做法是使用 <code>.</code> 分割表达式字符串为数组，然后遍历一下对其进行求值，大家可以查看其源码。如下：</p>\n<pre><code>/**\n * Parse simple path.\n */\nconst bailRE = /[^\\w.$]/\nexport function parsePath (path: string): any {\n  if (bailRE.test(path)) {\n    return\n  } else {\n    const segments = path.split(&#39;.&#39;)\n    return function (obj) {\n      for (let i = 0; i &lt; segments.length; i++) {\n        if (!obj) return\n        obj = obj[segments[i]]\n      }\n      return obj\n    }\n  }\n}\n</code></pre><p>Vue 的求值代码是在 <code>src/core/util/lang.js</code> 文件中 <code>parsePath</code> 函数中实现的。总结一下Vue的依赖收集过程应该是这样的：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgdep.png\" alt=\"Vue的依赖收集过程\"></p>\n<p>实际上，Vue并没有直接在 <code>get</code> 中调用 <code>addSub</code>，而是调用的 <code>dep.depend</code>，目的是将当前的 dep 对象收集到 watch 对象中，如果要完整的流程，应该是这样的：（大家注意数据的每一个字段都拥有自己的 <code>dep</code> 对象和 <code>get</code> 方法。）</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/all.png\" alt=\"Vue完整的收集依赖的流程\"></p>\n<p>这样 Vue 就建立了一套数据响应系统，之前我们说过，按照我们的例子那样写，初始化工作只包含两个主要内容即：<code>initData</code> 和 <code>initRender</code>。现在 <code>initData</code> 我们分析完了，接下来看一看 <code>initRender</code></p>\n<h2 id=\"六、通过initRender看Vue的-render-渲染-与-re-render-重新渲染\"><a href=\"#六、通过initRender看Vue的-render-渲染-与-re-render-重新渲染\" class=\"headerlink\" title=\"六、通过initRender看Vue的 render(渲染) 与 re-render(重新渲染)\"></a>六、通过<code>initRender</code>看Vue的 render(渲染) 与 re-render(重新渲染)</h2><p>在 <code>initRender</code> 方法中，因为我们的例子中传递了 <code>el</code> 选项，所以下面的代码会执行：</p>\n<pre><code>  if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n  }\n</code></pre><p>这里，调用了 <code>$mount</code> 方法，在还原Vue构造函数的时候，我们整理过所有的方法，其中 <code>$mount</code> 方法在两个地方出现过：</p>\n<p>1、在 <code>web-runtime.js</code> 文件中：</p>\n<pre><code>Vue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el &amp;&amp; inBrowser ? query(el) : undefined\n  return this._mount(el, hydrating)\n}\n</code></pre><p>它的作用是通过 <code>el</code> 获取相应的DOM元素，然后调用 <code>lifecycle.js</code> 文件中的 <code>_mount</code> 方法。</p>\n<p>2、在 <code>web-runtime-with-compiler.js</code> 文件中：</p>\n<pre><code>// 缓存了来自 web-runtime.js 的 $mount 方法\nconst mount = Vue.prototype.$mount\n// 重写 $mount 方法\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  // 根据 el 获取相应的DOM元素\n  el = el &amp;&amp; query(el)\n  // 不允许你将 el 挂载到 html 标签或者 body 标签\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(\n      `Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // 如果我们没有写 render 选项，那么就尝试将 template 或者 el 转化为 render 函数\n  if (!options.render) {\n    let template = options.template\n    if (template) {\n      if (typeof template === &#39;string&#39;) {\n        if (template.charAt(0) === &#39;#&#39;) {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== &#39;production&#39;) {\n          warn(&#39;invalid template option:&#39; + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el)\n    }\n    if (template) {\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        warn,\n        shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n    }\n  }\n  // 调用已经缓存下来的 web-runtime.js 文件中的 $mount 方法\n  return mount.call(this, el, hydrating)\n}\n</code></pre><p>分析一下可知 <code>web-runtime-with-compiler.js</code> 的逻辑如下：</p>\n<p>1、缓存来自 <code>web-runtime.js</code> 文件的 <code>$mount</code> 方法</p>\n<p>2、判断有没有传递 <code>render</code> 选项，如果有直接调用来自 <code>web-runtime.js</code> 文件的 $mount 方法</p>\n<p>3、如果没有传递 <code>render</code> 选项，那么查看有没有 <code>template</code> 选项，如果有就使用 <code>compileToFunctions</code> 函数根据其内容编译成 <code>render</code> 函数</p>\n<p>4、如果没有 <code>template</code> 选项，那么查看有没有 <code>el</code> 选项，如果有就使用 <code>compileToFunctions</code> 函数将其内容(template = getOuterHTML(el))编译成 <code>render</code> 函数</p>\n<p>5、将编译成的 <code>render</code> 函数挂载到 <code>this.$options</code> 属性下，并调用缓存下来的 <code>web-runtime.js</code> 文件中的 $mount 方法</p>\n<p>简单的用一张图表示 <code>mount</code> 方法的调用关系，从上至下调用：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgmount.png\" alt=\"mount调用关系\"></p>\n<p>不过不管怎样，我们发现这些步骤的最终目的是生成 <code>render</code> 函数，然后再调用 <code>lifecycle.js</code> 文件中的 <code>_mount</code> 方法，我们看看这个方法做了什么事情，查看 <code>_mount</code> 方法的代码，这是简化过得：</p>\n<pre><code>  Vue.prototype._mount = function (\n    el?: Element | void,\n    hydrating?: boolean\n  ): Component {\n    const vm: Component = this\n\n    // 在Vue实例对象上添加 $el 属性，指向挂载点元素\n    vm.$el = el\n\n    // 触发 beforeMount 生命周期钩子\n    callHook(vm, &#39;beforeMount&#39;)\n\n    vm._watcher = new Watcher(vm, () =&gt; {\n      vm._update(vm._render(), hydrating)\n    }, noop)\n\n    // 如果是第一次mount则触发 mounted 生命周期钩子\n    if (vm.$vnode == null) {\n      vm._isMounted = true\n      callHook(vm, &#39;mounted&#39;)\n    }\n    return vm\n  }\n</code></pre><p>上面的代码很简单，该注释的都注释了，唯一需要看的就是这段代码：</p>\n<pre><code>vm._watcher = new Watcher(vm, () =&gt; {\n  vm._update(vm._render(), hydrating)\n}, noop)\n</code></pre><p>看上去很眼熟有没有？我们平时使用Vue都是这样使用 watch的：</p>\n<pre><code>this.$watch(&#39;a&#39;, (newVal, oldVal) =&gt; {\n\n})\n// 或者\nthis.$watch(function(){\n    return this.a + this.b\n}, (newVal, oldVal) =&gt; {\n\n})\n</code></pre><p>第一个参数是 表达式或者函数，第二个参数是回调函数，第三个参数是可选的选项。原理是 <code>Watch</code> 内部对表达式求值或者对函数求值从而触发数据的 <code>get</code> 方法收集依赖。可是 <code>_mount</code> 方法中使用 <code>Watcher</code> 的时候第一个参数 <code>vm</code> 是什么鬼。我们不妨去看看源码中 <code>$watch</code> 函数是如何实现的，根据之前还原Vue构造函数中所整理的内容可知：<code>$warch</code> 方法是在 <code>src/core/instance/state.js</code> 文件中的 <code>stateMixin</code> 方法中定义的，源码如下：</p>\n<pre><code>  Vue.prototype.$watch = function (\n    expOrFn: string | Function,\n    cb: Function,\n    options?: Object\n  ): Function {\n    const vm: Component = this\n    options = options || {}\n    options.user = true\n    const watcher = new Watcher(vm, expOrFn, cb, options)\n    if (options.immediate) {\n      cb.call(vm, watcher.value)\n    }\n    return function unwatchFn () {\n      watcher.teardown()\n    }\n  }\n</code></pre><p>我们可以发现，<code>$warch</code> 其实是对 <code>Watcher</code> 的一个封装，内部的 <code>Watcher</code> 的第一个参数实际上也是 <code>vm</code> 即：Vue实例对象，这一点我们可以在 <code>Watcher</code> 的源码中得到验证，代开 <code>observer/watcher.js</code> 文件查看：</p>\n<pre><code class=\"js\">export default class Watcher {\n\n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: Object = {}\n  ) {\n\n  }\n}\n</code></pre>\n<p>可以发现真正的 <code>Watcher</code> 第一个参数实际上就是 <code>vm</code>。第二个参数是表达式或者函数，然后以此类推，所以现在再来看 <code>_mount</code> 中的这段代码：</p>\n<pre><code>vm._watcher = new Watcher(vm, () =&gt; {\n  vm._update(vm._render(), hydrating)\n}, noop)\n</code></pre><p>忽略第一个参数 <code>vm</code>，也就说，<code>Watcher</code> 内部应该对第二个参数求值，也就是运行这个函数：</p>\n<pre><code>() =&gt; {\n  vm._update(vm._render(), hydrating)\n}\n</code></pre><p>所以 <code>vm._render()</code> 函数被第一个执行，该函数在 <code>src/core/instance/render.js</code> 中，该方法中的代码很多，下面是简化过的：</p>\n<pre><code>  Vue.prototype._render = function (): VNode {\n    const vm: Component = this\n    // 解构出 $options 中的 render 函数\n    const {\n      render,\n      staticRenderFns,\n      _parentVnode\n    } = vm.$options\n    ...\n\n    let vnode\n    try {\n      // 运行 render 函数\n      vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n      ...\n    }\n\n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n  }\n</code></pre><p><code>_render</code> 方法首先从 <code>vm.$options</code> 中解构出 <code>render</code> 函数，大家应该记得：<code>vm.$options.render</code> 方法是在 <code>web-runtime-with-compiler.js</code> 文件中通过 <code>compileToFunctions</code> 方法将 <code>template</code> 或 <code>el</code> 编译而来的。解构出 <code>render</code> 函数后，接下来便执行了该方法：</p>\n<pre><code>vnode = render.call(vm._renderProxy, vm.$createElement)\n</code></pre><p>其中使用 <code>call</code> 指定了 <code>render</code> 函数的作用域环境为 <code>vm._renderProxy</code>，这个属性在我们整理实例对象的时候知道，他是在 <code>Vue.prototype._init</code> 方法中被添加的，即：<code>vm._renderProxy = vm</code>，其实就是Vue实例对象本身，然后传递了一个参数：<code>vm.$createElement</code>。那么 <code>render</code> 函数到底是干什么的呢？让我们根据上面那句代码猜一猜，我们已经知道 <code>render</code> 函数是从 <code>template</code> 或 <code>el</code> 编译而来的，如果没错的话应该是返回一个虚拟DOM对象。我们不妨使用 <code>console.log</code> 打印一下 <code>render</code> 函数，当我们的模板这样编写时：</p>\n<pre><code>&lt;ul id=&quot;app&quot;&gt;\n  &lt;li&gt;{{a}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>打印的 <code>render</code> 函数如下：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgr2.png\" alt=\"render函数1\"></p>\n<p>我们修改模板为：</p>\n<pre><code>&lt;ul id=&quot;app&quot;&gt;\n  &lt;li v-for=&quot;i in b&quot;&gt;{{a}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>打印出来的 <code>render</code> 函数如下：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgr3.png\" alt=\"render函数2\"></p>\n<p>其实了解Vue2.x版本的同学都知道，Vue提供了 <code>render</code> 选项，作为 <code>template</code> 的代替方案，同时为JavaScript提供了完全编程的能力，下面两种编写模板的方式实际是等价的：</p>\n<pre><code class=\"js\">// 方案一：\nnew Vue({\n    el: &#39;#app&#39;,\n    data: {\n        a: 1\n    },\n    template: &#39;&lt;ul&gt;&lt;li&gt;{{a}}&lt;/li&gt;&lt;li&gt;{{a}}&lt;/li&gt;&lt;/ul&gt;&#39;\n})\n\n// 方案二：\nnew Vue({\n    el: &#39;#app&#39;,\n    render: function (createElement) {\n        createElement(&#39;ul&#39;, [\n            createElement(&#39;li&#39;, this.a),\n            createElement(&#39;li&#39;, this.a)\n        ])\n    }\n})\n</code></pre>\n<p>现在我们再来看我们打印的 <code>render</code> 函数：</p>\n<pre><code>function anonymous() {\n    with(this){\n        return _c(&#39;ul&#39;, { \n            attrs: {&quot;id&quot;: &quot;app&quot;}\n        },[\n            _c(&#39;li&#39;, [_v(_s(a))])\n        ])\n    }\n}\n</code></pre><p>是不是与我们自己写 <code>render</code> 函数很像？因为 render 函数的作用域被绑定到了Vue实例，即：<code>render.call(vm._renderProxy, vm.$createElement)</code>，所以上面代码中 <code>_c</code>、<code>_v</code>、<code>_s</code> 以及变量 <code>a</code>相当于Vue实例下的方法和变量。大家还记得诸如 <code>_c</code>、<code>_v</code>、<code>_s</code> 这样的方法在哪里定义的吗？我们在整理Vue构造函数的时候知道，他们在 <code>src/core/instance/render.js</code> 文件中的 <code>renderMixin</code> 方法中定义，除了这些之外还有诸如：<code>_l</code>、 <code>_m</code>、 <code>_o</code> 等等。其中 <code>_l</code> 就在我们使用 <code>v-for</code> 指令的时候出现了。所以现在大家知道为什么这些方法都被定义在 <code>render.js</code> 文件中了吧，因为他们就是为了构造出 <code>render</code> 函数而存在的。</p>\n<p>现在我们已经知道了 <code>render</code> 函数的长相，也知道了 <code>render</code> 函数的作用域是Vue实例本身即：<code>this</code>(或<code>vm</code>)。那么当我们执行 <code>render</code> 函数时，其中的变量如：<code>a</code>，就相当于：<code>this.a</code>，我们知道这是在求值，所以 <code>_mount</code> 中的这段代码：</p>\n<pre><code>vm._watcher = new Watcher(vm, () =&gt; {\n  vm._update(vm._render(), hydrating)\n}, noop)\n</code></pre><p>当 <code>vm._render</code> 执行的时候，所依赖的变量就会被求值，并被收集为依赖。按照Vue中 <code>watcher.js</code> 的逻辑，当依赖的变量有变化时不仅仅回调函数被执行，实际上还要重新求值，即还要执行一遍：</p>\n<pre><code>() =&gt; {\n  vm._update(vm._render(), hydrating)\n}\n</code></pre><p>这实际上就做到了 <code>re-render</code>，因为 <code>vm._update</code> 就是文章开头所说的虚拟DOM中的最后一步：<code>patch</code></p>\n<p><code>vm_render</code> 方法最终返回一个 <code>vnode</code> 对象，即虚拟DOM，然后作为 <code>vm_update</code> 的第一个参数传递了过去，我们看一下 <code>vm_update</code> 的逻辑，在 <code>src/core/instance/lifecycle.js</code> 文件中有这么一段代码：</p>\n<pre><code class=\"js\">    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      )\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n</code></pre>\n<p>如果还没有 <code>prevVnode</code> 说明是首次渲染，直接创建真实DOM。如果已经有了 <code>prevVnode</code> 说明不是首次渲染，那么就采用 <code>patch</code> 算法进行必要的DOM操作。这就是Vue更新DOM的逻辑。只不过我们没有将 virtual DOM 内部的实现。</p>\n<p>现在我们来好好理理思路，当我们写如下代码时：</p>\n<pre><code>new Vue({\n    el: &#39;#app&#39;,\n    data: {\n        a: 1,\n        b: [1, 2, 3]\n    }\n})\n</code></pre><p>Vue 所做的事：</p>\n<blockquote>\n<p>1、构建数据响应系统，使用 <code>Observer</code> 将数据data转换为访问器属性；将 <code>el</code> 编译为 <code>render</code> 函数，<code>render</code> 函数返回值为虚拟DOM</p>\n<p>2、在 <code>_mount</code> 中对 <code>_update</code> 求值，而 <code>_update</code> 又会对 <code>render</code> 求值，<code>render</code> 内部又会对依赖的变量求值，收集为被求值的变量的依赖，当变量改变时，<code>_update</code> 又会重新执行一遍，从而做到 <code>re-render</code>。</p>\n</blockquote>\n<p>用一张详细一点的图表示就是这样的：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgdetail.png\" alt=\"详细流程\"></p>\n<p>到此，我们从大体流程，挑着重点的走了一遍Vue，但是还有很多细节我们没有提及，比如：</p>\n<p>1、将模板转为 <code>render</code> 函数的时候，实际是先生成的抽象语法树（AST），再将抽象语法树转成的 <code>render</code> 函数，而且这一整套的代码我们也没有提及，因为他在复杂了，其实这部分内容就是在完正则。</p>\n<p>2、我们也没有详细的讲 Virtual DOM 的实现原理，网上已经有文章讲了，大家可以搜一搜</p>\n<p>3、我们的例子中仅仅传递了 <code>el</code> ，<code>data</code> 选项，大家知道 Vue 支持的选项很多，比如我们都没有讲到，但都是触类旁通的，比如你搞清楚了 <code>data</code> 选项再去看 <code>computed</code> 选项或者 <code>props</code> 选项就会很容易，比如你知道了 <code>Watcher</code> 的工作机制再去看 <code>watch</code> 选项就会很容易。</p>\n<p>本篇文章作为Vue源码的启蒙文章，也许还有很多缺陷，全当抛砖引玉了。</p>\n","site":{"data":{}},"excerpt":"<p>原本文章的名字叫做《源码解析》，不过后来想想，还是用“源码学习”来的合适一点，在没有彻底掌握源码中的每一个字母之前，“解析”就有点标题党了。建议在看这篇文章之前，最好打开2.1.7的源码对照着看，这样可能更容易理解。另外本人水平有限，文中有错误或不妥的地方望大家多多指正共同成长。</p>\n<p>补充：Vue 2.2 刚刚发布，作为一个系列文章的第一篇，本篇文章主要从Vue代码的组织，Vue构造函数的还原，原型的设计，以及参数选项的处理和已经被写烂了的数据绑定与如何使用 Virtual DOM 更新视图入手。从整体的大方向观察框架，这么看来 <code>V2.1.7</code> 对于理解 <code>V2.2</code> 的代码不会有太大的影响。该系列文章的后续文章，都会从最新的源码入手，并对改动的地方做相应的提示。</p>","more":"<p>很久之前写过一篇文章：<a href=\"http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/\">JavaScript实现MVVM之我就是想监测一个普通对象的变化</a>，文章开头提到了我写博客的风格，还是那句话，只写努力让小白，甚至是小学生都能看明白的文章。这不免会导致对于某些同学来说这篇文章有些墨迹，所以大家根据自己的喜好，可以详细的看，也可以跳跃着看。</p>\n<h2 id=\"一、从了解一个开源项目入手\"><a href=\"#一、从了解一个开源项目入手\" class=\"headerlink\" title=\"一、从了解一个开源项目入手\"></a>一、从了解一个开源项目入手</h2><p>要看一个项目的源码，不要一上来就看，先去了解一下项目本身的元数据和依赖，除此之外最好也了解一下 PR 规则，Issue Reporting 规则等等。特别是“前端”开源项目，我们在看源码之前第一个想到的应该是：<code>package.json</code>文件。</p>\n<p>在 <code>package.json</code> 文件中，我们最应该关注的就是 <code>scripts</code> 字段和 <code>devDependencies</code> 以及 <code>dependencies</code> 字段，通过 <code>scripts</code> 字段我们可以知道项目中定义的脚本命令，通过 <code>devDependencies</code> 和 <code>dependencies</code> 字段我们可以了解项目的依赖情况。</p>\n<p>了解了这些之后，如果有依赖我们就 <code>npm install</code> 安装依赖就ok了。</p>\n<p>除了 <code>package.json</code> 之外，我们还要阅读项目的贡献规则文档，了解如何开始，一个好的开源项目肯定会包含这部分内容的，Vue也不例外：<a href=\"https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md\" target=\"_blank\" rel=\"external\">https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md</a>，在这个文档里说明了一些行为准则，PR指南，Issue Reporting 指南，Development Setup 以及 项目结构。通过阅读这些内容，我们可以了解项目如何开始，如何开发以及目录的说明，下面是对重要目录和文件的简单介绍，这些内容你都可以去自己阅读获取：</p>\n<pre><code>├── build --------------------------------- 构建相关的文件，一般情况下我们不需要动\n├── dist ---------------------------------- 构建后文件的输出目录\n├── examples ------------------------------ 存放一些使用Vue开发的应用案例\n├── flow ---------------------------------- 类型声明，使用开源项目 [Flow](https://flowtype.org/)\n├── package.json -------------------------- 不解释\n├── test ---------------------------------- 包含所有测试文件\n├── src ----------------------------------- 这个是我们最应该关注的目录，包含了源码\n│   ├── entries --------------------------- 包含了不同的构建或包的入口文件\n│   │   ├── web-runtime.js ---------------- 运行时构建的入口，输出 dist/vue.common.js 文件，不包含模板(template)到render函数的编译器，所以不支持 `template` 选项，我们使用vue默认导出的就是这个运行时的版本。大家使用的时候要注意\n│   │   ├── web-runtime-with-compiler.js -- 独立构建版本的入口，输出 dist/vue.js，它包含模板(template)到render函数的编译器\n│   │   ├── web-compiler.js --------------- vue-template-compiler 包的入口文件\n│   │   ├── web-server-renderer.js -------- vue-server-renderer 包的入口文件\n│   ├── compiler -------------------------- 编译器代码的存放目录，将 template 编译为 render 函数\n│   │   ├── parser ------------------------ 存放将模板字符串转换成元素抽象语法树的代码\n│   │   ├── codegen ----------------------- 存放从抽象语法树(AST)生成render函数的代码\n│   │   ├── optimizer.js ------------------ 分析静态树，优化vdom渲染\n│   ├── core ------------------------------ 存放通用的，平台无关的代码\n│   │   ├── observer ---------------------- 反应系统，包含数据观测的核心代码\n│   │   ├── vdom -------------------------- 包含虚拟DOM创建(creation)和打补丁(patching)的代码\n│   │   ├── instance ---------------------- 包含Vue构造函数设计相关的代码\n│   │   ├── global-api -------------------- 包含给Vue构造函数挂载全局方法(静态方法)或属性的代码\n│   │   ├── components -------------------- 包含抽象出来的通用组件\n│   ├── server ---------------------------- 包含服务端渲染(server-side rendering)的相关代码\n│   ├── platforms ------------------------- 包含平台特有的相关代码\n│   ├── sfc ------------------------------- 包含单文件组件(.vue文件)的解析逻辑，用于vue-template-compiler包\n│   ├── shared ---------------------------- 包含整个代码库通用的代码\n</code></pre><p>大概了解了重要目录和文件之后，我们就可以查看 <a href=\"https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\" target=\"_blank\" rel=\"external\">Development Setup</a> 中的常用命令部分，来了解如何开始这个项目了，我们可以看到这样的介绍：</p>\n<pre><code># watch and auto re-build dist/vue.js\n$ npm run dev\n\n# watch and auto re-run unit tests in Chrome\n$ npm run dev:test\n</code></pre><p>现在，我们只需要运行 <code>npm run dev</code> 即可监测文件变化并自动重新构建输出 dist/vue.js，然后运行 <code>npm run dev:test</code> 来测试。不过为了方便，我会在 <code>examples</code> 目录新建一个例子，然后引用 dist/vue.js 这样，我们可以直接拿这个例子一边改Vue源码一边看自己写的代码想怎么玩怎么玩。</p>\n<h2 id=\"二、看源码的小提示\"><a href=\"#二、看源码的小提示\" class=\"headerlink\" title=\"二、看源码的小提示\"></a>二、看源码的小提示</h2><p>在真正步入源码世界之前，我想简单说一说看源码的技巧：</p>\n<h3 id=\"注重大体框架，从宏观到微观\"><a href=\"#注重大体框架，从宏观到微观\" class=\"headerlink\" title=\"注重大体框架，从宏观到微观\"></a><em>注重大体框架，从宏观到微观</em></h3><p>当你看一个项目代码的时候，最好是能找到一条主线，先把大体流程结构摸清楚，再深入到细节，逐项击破，拿Vue举个栗子：假如你已经知道Vue中数据状态改变后会采用virtual DOM的方式更新DOM，这个时候，如果你不了解virtual DOM，那么听我一句“暂且不要去研究内部具体实现，因为这会是你丧失主线”，而你仅仅需要知道virtual DOM分为三个步骤：</p>\n<blockquote>\n<p>一、createElement(): 用 JavaScript对象(虚拟树) 描述 真实DOM对象(真实树)<br>二、diff(oldNode, newNode) : 对比新旧两个虚拟树的区别，收集差异<br>三、patch() : 将差异应用到真实DOM树</p>\n</blockquote>\n<p>有的时候 第二步 可能与 第三步 合并成一步(Vue 中的patch就是这样)，除此之外，还比如 <code>src/compiler/codegen</code> 内的代码，可能你不知道他写了什么，直接去看它会让你很痛苦，但是你只需要知道 codegen 是用来将抽象语法树(AST)生成render函数的就OK了，也就是生成类似下面这样的代码：</p>\n<pre><code class=\"js\">function anonymous() {\n    with(this){return _c(&#39;p&#39;,{attrs:{&quot;id&quot;:&quot;app&quot;}},[_v(&quot;\\n      &quot;+_s(a)+&quot;\\n      &quot;),_c(&#39;my-com&#39;)])}\n}\n</code></pre>\n<p>当我们知道了一个东西存在，且知道它存在的目的，那么我们就很容易抓住这条主线，这个系列的第一篇文章就是围绕大体主线展开的。了解大体之后，我们就知道了每部分内容都是做什么的，比如 codegen 是生成类似上面贴出的代码所示的函数的，那么再去看codegen下的代码时，目的性就会更强，就更容易理解。</p>\n<h2 id=\"三、Vue-的构造函数是什么样的\"><a href=\"#三、Vue-的构造函数是什么样的\" class=\"headerlink\" title=\"三、Vue 的构造函数是什么样的\"></a>三、Vue 的构造函数是什么样的</h2><p>balabala一大堆，开始来干货吧。我们要做的第一件事就是搞清楚 Vue 构造函数到底是什么样子的。</p>\n<p>我们知道，我们要使用 <code>new</code> 操作符来调用 <code>Vue</code>，那么也就是说 <code>Vue</code> 应该是一个构造函数，所以我们第一件要做的事儿就是把构造函数先扒的一清二楚，如何寻找 <code>Vue</code> 构造函数呢？当然是从 entry 开始啦，还记的我们运行 <code>npm run dev</code> 命令后，会输出 <code>dist/vue.js</code> 吗，那么我们就去看看 <code>npm run dev</code> 干了什么：</p>\n<pre><code>&quot;dev&quot;: &quot;TARGET=web-full-dev rollup -w -c build/config.js&quot;,\n</code></pre><p>首先将 TARGET 得值设置为 ‘web-full-dev’，然后，然后，然后如果你不了解 rollup 就应该简单去看一下啦……，简单的说就是一个JavaScript模块打包器，你可以把它简单的理解为和 webpack 一样，只不过它有他的优势，比如 Tree-shaking (webpack2也有)，但同样，在某些场景它也有他的劣势。。。废话不多说，其中 <code>-w</code> 就是watch，<code>-c</code> 就是指定配置文件为 <code>build/config.js</code> ，我们打开这个配置文件看一看：</p>\n<pre><code class=\"js\">// 引入依赖，定义 banner\n...\n\n// builds 对象\nconst builds = {\n    ...\n    // Runtime+compiler development build (Browser)\n    &#39;web-full-dev&#39;: {\n        entry: path.resolve(__dirname, &#39;../src/entries/web-runtime-with-compiler.js&#39;),\n        dest: path.resolve(__dirname, &#39;../dist/vue.js&#39;),\n        format: &#39;umd&#39;,\n        env: &#39;development&#39;,\n        alias: { he: &#39;./entity-decoder&#39; },\n        banner\n    },\n    ...\n}\n\n// 生成配置的方法\nfunction genConfig(opts){\n    ...\n}\n\nif (process.env.TARGET) {\n  module.exports = genConfig(builds[process.env.TARGET])\n} else {\n  exports.getBuild = name =&gt; genConfig(builds[name])\n  exports.getAllBuilds = () =&gt; Object.keys(builds).map(name =&gt; genConfig(builds[name]))\n}\n</code></pre>\n<p>上面的代码是简化过的，当我们运行 <code>npm run dev</code> 的时候 <code>process.env.TARGET</code> 的值等于 ‘web-full-dev’，所以</p>\n<pre><code class=\"js\">module.exports = genConfig(builds[process.env.TARGET])\n</code></pre>\n<p>这句代码相当于：</p>\n<pre><code class=\"js\">module.exports = genConfig({\n    entry: path.resolve(__dirname, &#39;../src/entries/web-runtime-with-compiler.js&#39;),\n    dest: path.resolve(__dirname, &#39;../dist/vue.js&#39;),\n    format: &#39;umd&#39;,\n    env: &#39;development&#39;,\n    alias: { he: &#39;./entity-decoder&#39; },\n    banner\n})\n</code></pre>\n<p>最终，genConfig 函数返回一个 config 对象，这个config对象就是Rollup的配置对象。那么我们就不难看到，入口文件是：</p>\n<pre><code>src/entries/web-runtime-with-compiler.js\n</code></pre><p>我们打开这个文件，不要忘了我们的主题，我们在寻找Vue构造函数，所以当我们看到这个文件的第一行代码是：</p>\n<pre><code class=\"js\">import Vue from &#39;./web-runtime&#39;\n</code></pre>\n<p>这个时候，你就应该知道，这个文件暂时与你无缘，你应该打开 <code>web-runtime.js</code> 文件，不过当你打开这个文件时，你发现第一行是这样的：</p>\n<pre><code class=\"js\">import Vue from &#39;core/index&#39;\n</code></pre>\n<p>依照此思路，最终我们寻找到Vue构造函数的位置应该是在 <code>src/core/instance/index.js</code> 文件中，其实我们猜也猜得到，上面介绍目录的时候说过：instance 是存放Vue构造函数设计相关代码的目录。总结一下，我们寻找的过程是这样的：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimg2BD0DCC6-D689-4809-93D3-2F979E8F8C0C.png\" alt=\"寻找 Vue 构造函数路线\"></p>\n<p>我们回头看一看 <code>src/core/instance/index.js</code> 文件，很简单：</p>\n<pre><code class=\"js\">import { initMixin } from &#39;./init&#39;\nimport { stateMixin } from &#39;./state&#39;\nimport { renderMixin } from &#39;./render&#39;\nimport { eventsMixin } from &#39;./events&#39;\nimport { lifecycleMixin } from &#39;./lifecycle&#39;\nimport { warn } from &#39;../util/index&#39;\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;\n    !(this instanceof Vue)) {\n    warn(&#39;Vue is a constructor and should be called with the `new` keyword&#39;)\n  }\n  this._init(options)\n}\n\ninitMixin(Vue)\nstateMixin(Vue)\neventsMixin(Vue)\nlifecycleMixin(Vue)\nrenderMixin(Vue)\n\nexport default Vue\n</code></pre>\n<p>引入依赖，定义 Vue 构造函数，然后以Vue构造函数为参数，调用了五个方法，最后导出 Vue。这五个方法分别来自五个文件：<code>init.js</code> <code>state.js</code> <code>render.js</code> <code>events.js</code> 以及 <code>lifecycle.js</code>。</p>\n<p>打开这五个文件，找到相应的方法，你会发现，这些方法的作用，就是在 Vue 的原型 prototype 上挂载方法或属性，经历了这五个方法后的Vue会变成这样：</p>\n<pre><code class=\"js\">// initMixin(Vue)    src/core/instance/init.js **************************************************\nVue.prototype._init = function (options?: Object) {}\n\n// stateMixin(Vue)    src/core/instance/state.js **************************************************\nVue.prototype.$data\nVue.prototype.$set = set\nVue.prototype.$delete = del\nVue.prototype.$watch = function(){}\n\n// renderMixin(Vue)    src/core/instance/render.js **************************************************\nVue.prototype.$nextTick = function (fn: Function) {}\nVue.prototype._render = function (): VNode {}\nVue.prototype._s = _toString\nVue.prototype._v = createTextVNode\nVue.prototype._n = toNumber\nVue.prototype._e = createEmptyVNode\nVue.prototype._q = looseEqual\nVue.prototype._i = looseIndexOf\nVue.prototype._m = function(){}\nVue.prototype._o = function(){}\nVue.prototype._f = function resolveFilter (id) {}\nVue.prototype._l = function(){}\nVue.prototype._t = function(){}\nVue.prototype._b = function(){}\nVue.prototype._k = function(){}\n\n// eventsMixin(Vue)    src/core/instance/events.js **************************************************\nVue.prototype.$on = function (event: string, fn: Function): Component {}\nVue.prototype.$once = function (event: string, fn: Function): Component {}\nVue.prototype.$off = function (event?: string, fn?: Function): Component {}\nVue.prototype.$emit = function (event: string): Component {}\n\n// lifecycleMixin(Vue)    src/core/instance/lifecycle.js **************************************************\nVue.prototype._mount = function(){}\nVue.prototype._update = function (vnode: VNode, hydrating?: boolean) {}\nVue.prototype._updateFromParent = function(){}\nVue.prototype.$forceUpdate = function () {}\nVue.prototype.$destroy = function () {}\n</code></pre>\n<p>这样就结束了吗？并没有，根据我们之前寻找 Vue 的路线，这只是刚刚开始，我们追溯路线往回走，那么下一个处理 Vue 构造函数的应该是 <code>src/core/index.js</code> 文件，我们打开它：</p>\n<pre><code class=\"js\">import Vue from &#39;./instance/index&#39;\nimport { initGlobalAPI } from &#39;./global-api/index&#39;\nimport { isServerRendering } from &#39;core/util/env&#39;\n\ninitGlobalAPI(Vue)\n\nObject.defineProperty(Vue.prototype, &#39;$isServer&#39;, {\n  get: isServerRendering\n})\n\nVue.version = &#39;__VERSION__&#39;\n\nexport default Vue\n</code></pre>\n<p>这个文件也很简单，从 instance/index 中导入已经在原型上挂载了方法和属性后的 Vue，然后导入 <code>initGlobalAPI</code> 和 <code>isServerRendering</code>，之后将Vue作为参数传给  <code>initGlobalAPI</code> ，最后又在 <code>Vue.prototype</code> 上挂载了 <code>$isServer</code> ，在 <code>Vue</code> 上挂载了 <code>version</code> 属性。</p>\n<p><code>initGlobalAPI</code> 的作用是在 <code>Vue</code> 构造函数上挂载静态属性和方法，<code>Vue</code> 在经过 <code>initGlobalAPI</code> 之后，会变成这样：</p>\n<pre><code class=\"js\">// src/core/index.js / src/core/global-api/index.js\nVue.config\nVue.util = util\nVue.set = set\nVue.delete = del\nVue.nextTick = util.nextTick\nVue.options = {\n    components: {\n        KeepAlive\n    },\n    directives: {},\n    filters: {},\n    _base: Vue\n}\nVue.use\nVue.mixin\nVue.cid = 0\nVue.extend\nVue.component = function(){}\nVue.directive = function(){}\nVue.filter = function(){}\n\nVue.prototype.$isServer\nVue.version = &#39;__VERSION__&#39;\n</code></pre>\n<p>其中，稍微复杂一点的就是 <code>Vue.options</code>，大家稍微分析分析就会知道他的确长成那个样子。下一个就是 <code>web-runtime.js</code> 文件了，<code>web-runtime.js</code> 文件主要做了三件事儿：</p>\n<blockquote>\n<p>1、覆盖 <code>Vue.config</code> 的属性，将其设置为平台特有的一些方法<br>2、<code>Vue.options.directives</code> 和 <code>Vue.options.components</code> 安装平台特有的指令和组件<br>3、在 <code>Vue.prototype</code> 上定义 <code>__patch__</code> 和 <code>$mount</code></p>\n</blockquote>\n<p>经过 <code>web-runtime.js</code> 文件之后，<code>Vue</code> 变成下面这个样子：</p>\n<pre><code class=\"js\">// 安装平台特定的utils\nVue.config.isUnknownElement = isUnknownElement\nVue.config.isReservedTag = isReservedTag\nVue.config.getTagNamespace = getTagNamespace\nVue.config.mustUseProp = mustUseProp\n// 安装平台特定的 指令 和 组件\nVue.options = {\n    components: {\n        KeepAlive,\n        Transition,\n        TransitionGroup\n    },\n    directives: {\n        model,\n        show\n    },\n    filters: {},\n    _base: Vue\n}\nVue.prototype.__patch__\nVue.prototype.$mount\n</code></pre>\n<p>这里大家要注意的是 <code>Vue.options</code> 的变化。另外这里的 <code>$mount</code> 方法很简单：</p>\n<pre><code class=\"js\">Vue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el &amp;&amp; inBrowser ? query(el) : undefined\n  return this._mount(el, hydrating)\n}\n</code></pre>\n<p>首先根据是否是浏览器环境决定要不要 <code>query(el)</code> 获取元素，然后将 <code>el</code> 作为参数传递给 <code>this._mount()</code>。</p>\n<p>最后一个处理 Vue 的文件就是入口文件 <code>web-runtime-with-compiler.js</code> 了，该文件做了两件事：</p>\n<p>1、缓存来自 <code>web-runtime.js</code> 文件的 <code>$mount</code> 函数</p>\n<pre><code class=\"js\">const mount = Vue.prototype.$mount\n</code></pre>\n<p>然后覆盖覆盖了 <code>Vue.prototype.$mount</code></p>\n<p>2、在 Vue 上挂载 <code>compile</code></p>\n<pre><code class=\"js\">Vue.compile = compileToFunctions\n</code></pre>\n<p>compileToFunctions 函数的作用，就是将模板 <code>template</code> 编译为render函数。</p>\n<p>至此，我们算是还原了 Vue 构造函数，总结一下：</p>\n<blockquote>\n<p>1、<code>Vue.prototype</code> 下的属性和方法的挂载主要是在 <code>src/core/instance</code> 目录中的代码处理的</p>\n<p>2、<code>Vue</code> 下的静态属性和方法的挂载主要是在 <code>src/core/global-api</code> 目录下的代码处理的</p>\n<p>3、<code>web-runtime.js</code> 主要是添加web平台特有的配置、组件和指令，<code>web-runtime-with-compiler.js</code> 给Vue的 <code>$mount</code> 方法添加 <code>compiler</code> 编译器，支持 <code>template</code>。</p>\n</blockquote>\n<h2 id=\"四、一个贯穿始终的例子\"><a href=\"#四、一个贯穿始终的例子\" class=\"headerlink\" title=\"四、一个贯穿始终的例子\"></a>四、一个贯穿始终的例子</h2><p>在了解了 <code>Vue</code> 构造函数的设计之后，接下来，我们一个贯穿始终的例子就要登场了，掌声有请：</p>\n<pre><code class=\"js\">let v = new Vue({\n    el: &#39;#app&#39;,\n    data: {\n        a: 1,\n        b: [1, 2, 3]\n    }\n})\n</code></pre>\n<p>好吧，我承认这段代码你家没满月的孩子都会写了。这段代码就是我们贯穿始终的例子，它就是这篇文章的主线，在后续的讲解中，都会以这段代码为例，当讲到必要的地方，会为其添加选项，比如讲计算属性的时候当然要加上一个 <code>computed</code> 属性了。不过在最开始，我只传递了两个选项 <code>el</code> 以及 <code>data</code>，“我们看看接下来会发生什么，让我们拭目以待“ —- NBA球星在接受采访时最喜欢说这句话。</p>\n<p><em>当我们按照例子那样编码使用Vue的时候，Vue都做了什么？</em></p>\n<p>想要知道Vue都干了什么，我们就要找到 Vue 初始化程序，查看 Vue 构造函数：</p>\n<pre><code class=\"js\">function Vue (options) {\n  if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp;\n    !(this instanceof Vue)) {\n    warn(&#39;Vue is a constructor and should be called with the `new` keyword&#39;)\n  }\n  this._init(options)\n}\n</code></pre>\n<p>我们发现，<code>_init()</code> 方法就是Vue调用的第一个方法，然后将我们的参数 <code>options</code> 透传了过去。在调用 <code>_init()</code> 之前，还做了一个安全模式的处理，告诉开发者必须使用 <code>new</code> 操作符调用 Vue。根据之前我们的整理，<code>_init()</code> 方法应该是在 <code>src/core/instance/init.js</code> 文件中定义的，我们打开这个文件查看 <code>_init()</code> 方法：</p>\n<pre><code class=\"js\">  Vue.prototype._init = function (options?: Object) {\n    const vm: Component = this\n    // a uid\n    vm._uid = uid++\n    // a flag to avoid this being observed\n    vm._isVue = true\n    // merge options\n    if (options &amp;&amp; options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== &#39;production&#39;) {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    // expose real self\n    vm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    callHook(vm, &#39;beforeCreate&#39;)\n    initState(vm)\n    callHook(vm, &#39;created&#39;)\n    initRender(vm)\n  }\n</code></pre>\n<p><code>_init()</code> 方法在一开始的时候，在 <code>this</code> 对象上定义了两个属性：<code>_uid</code> 和 <code>_isVue</code>，然后判断有没有定义 <code>options._isComponent</code>，在使用 Vue 开发项目的时候，我们是不会使用 <code>_isComponent</code> 选项的，这个选项是 Vue 内部使用的，按照本节开头的例子，这里会走 <code>else</code> 分支，也就是这段代码：</p>\n<pre><code class=\"js\">  vm.$options = mergeOptions(\n    resolveConstructorOptions(vm.constructor),\n    options || {},\n    vm\n  )\n</code></pre>\n<p>这样 <code>Vue</code> 第一步所做的事情就来了：<span style=\"color: red;\"><em>使用策略对象合并参数选项</em></span></p>\n<p>可以发现，Vue使用 <code>mergeOptions</code> 来处理我们调用Vue时传入的参数选项(options)，然后将返回值赋值给 <code>this.$options</code> (vm === this)，传给 <code>mergeOptions</code> 方法三个参数，我们分别来看一看，首先是：<code>resolveConstructorOptions(vm.constructor)</code>，我们查看一下这个方法：</p>\n<pre><code class=\"js\">export function resolveConstructorOptions (Ctor: Class&lt;Component&gt;) {\n  let options = Ctor.options\n  if (Ctor.super) {\n    const superOptions = Ctor.super.options\n    const cachedSuperOptions = Ctor.superOptions\n    const extendOptions = Ctor.extendOptions\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed\n      Ctor.superOptions = superOptions\n      extendOptions.render = options.render\n      extendOptions.staticRenderFns = options.staticRenderFns\n      extendOptions._scopeId = options._scopeId\n      options = Ctor.options = mergeOptions(superOptions, extendOptions)\n      if (options.name) {\n        options.components[options.name] = Ctor\n      }\n    }\n  }\n  return options\n}\n</code></pre>\n<p>这个方法接收一个参数 <code>Ctor</code>，通过传入的 <code>vm.constructor</code> 我们可以知道，其实就是 <code>Vue</code> 构造函数本身。所以下面这句代码：</p>\n<pre><code class=\"js\">let options = Ctor.options\n</code></pre>\n<p>相当于：</p>\n<pre><code class=\"js\">let options = Vue.options\n</code></pre>\n<p>大家还记得 <code>Vue.options</code> 吗？在寻找Vue构造函数一节里，我们整理了 <code>Vue.options</code> 应该长成下面这个样子：</p>\n<pre><code class=\"js\">Vue.options = {\n    components: {\n        KeepAlive,\n        Transition,\n        TransitionGroup\n    },\n    directives: {\n        model,\n        show\n    },\n    filters: {},\n    _base: Vue\n}\n</code></pre>\n<p>之后判断是否定义了 <code>Vue.super</code> ，这个是用来处理继承的，我们后续再讲，在本例中，<code>resolveConstructorOptions</code> 方法直接返回了 <code>Vue.options</code>。也就是说，传递给 <code>mergeOptions</code> 方法的第一个参数就是 <code>Vue.options</code>。</p>\n<p>传给 <code>mergeOptions</code> 方法的第二个参数是我们调用Vue构造函数时的参数选项，第三个参数是 <code>vm</code> 也就是 <code>this</code> 对象，按照本节开头的例子那样使用 Vue，最终运行的代码应该如下：</p>\n<pre><code class=\"js\">  vm.$options = mergeOptions(\n      // Vue.options\n    {\n        components: {\n            KeepAlive,\n            Transition,\n            TransitionGroup\n        },\n        directives: {\n            model,\n            show\n        },\n        filters: {},\n        _base: Vue\n    },\n    // 调用Vue构造函数时传入的参数选项 options\n    {\n        el: &#39;#app&#39;,\n        data: {\n            a: 1,\n            b: [1, 2, 3]\n        }\n    },\n    // this\n    vm\n  )\n</code></pre>\n<p>了解了这些，我们就可以看看 <code>mergeOptions</code> 到底做了些什么了，根据引用寻找到 <code>mergeOptions</code> 应该是在 <code>src/core/util/options.js</code> 文件中定义的。这个文件第一次看可能会头大，下面是我处理后的简略展示，大家看上去应该更容易理解了：</p>\n<pre><code class=\"js\">// 1、引用依赖\nimport Vue from &#39;../instance/index&#39;\n其他引用...\n\n// 2、合并父子选项值为最终值的策略对象，此时 strats 是一个空对象，因为 config.optionMergeStrategies = Object.create(null)\nconst strats = config.optionMergeStrategies\n// 3、在 strats 对象上定义与参数选项名称相同的方法\nstrats.el = \nstrats.propsData = function (parent, child, vm, key){}\nstrats.data = function (parentVal, childVal, vm)\n\nconfig._lifecycleHooks.forEach(hook =&gt; {\n  strats[hook] = mergeHook\n})\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + &#39;s&#39;] = mergeAssets\n})\n\nstrats.watch = function (parentVal, childVal)\n\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal: ?Object, childVal: ?Object)\n// 默认的合并策略，如果有 `childVal` 则返回 `childVal` 没有则返回 `parentVal`\nconst defaultStrat = function (parentVal: any, childVal: any): any {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n}\n\n// 4、mergeOptions 中根据参数选项调用同名的策略方法进行合并处理\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n\n  // 其他代码\n  ...\n\n  const options = {}\n  let key\n  for (key in parent) {\n    mergeField(key)\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key)\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    options[key] = strat(parent[key], child[key], vm, key)\n  }\n  return options\n\n}\n</code></pre>\n<p>上面的代码中，我省略了一些工具函数，例如 <code>mergeHook</code> 和 <code>mergeAssets</code> 等等，唯一需要注意的是这段代码：</p>\n<pre><code class=\"js\">config._lifecycleHooks.forEach(hook =&gt; {\n  strats[hook] = mergeHook\n})\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + &#39;s&#39;] = mergeAssets\n})\n</code></pre>\n<p><code>config</code> 对象引用自 <code>src/core/config.js</code> 文件，最终的结果就是在 <code>strats</code> 下添加了相应的生命周期选项的合并策略函数为 <code>mergeHook</code>，添加指令(directives)、组件(components)、过滤器(filters)等选项的合并策略函数为 <code>mergeAssets</code>。</p>\n<p>这样看来就清晰多了，拿我们贯穿本文的例子来说：</p>\n<pre><code class=\"js\">let v = new Vue({\n    el: &#39;#app&#39;,\n    data: {\n        a: 1,\n        b: [1, 2, 3]\n    }\n})\n</code></pre>\n<p>其中 <code>el</code> 选项会使用 <code>defaultStrat</code> 默认策略函数处理，<code>data</code> 选项则会使用 <code>strats.data</code> 策略函数处理，并且根据 <code>strats.data</code> 中的逻辑，<code>strats.data</code> 方法最终会返回一个函数：<code>mergedInstanceDataFn</code>。</p>\n<p>这里就不详细的讲解每一个策略函数的内容了，后续都会讲到，这里我们还是抓住主线理清思路为主，只需要知道Vue在处理选项的时候，使用了一个策略对象对父子选项进行合并。并将最终的值赋值给实例下的 <code>$options</code> 属性即：<code>this.$options</code>，那么我们继续查看 <code>_init()</code> 方法在合并完选项之后，又做了什么：</p>\n<p>合并完选项之后，Vue 第二部做的事情就来了：<span style=\"color: red;\"><em>初始化工作与Vue实例对象的设计</em></span></p>\n<p>前面讲了 Vue 构造函数的设计，并且整理了 <em>Vue原型属性与方法</em> 和 <em>Vue静态属性与方法</em>，而 Vue 实例对象就是通过构造函数创造出来的，让我们来看一看 Vue 实例对象是如何设计的，下面的代码是 <code>_init()</code> 方法合并完选项之后的代码：</p>\n<pre><code class=\"js\">    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== &#39;production&#39;) {\n      initProxy(vm)\n    } else {\n      vm._renderProxy = vm\n    }\n\n    // expose real self\n    vm._self = vm\n    initLifecycle(vm)\n    initEvents(vm)\n    callHook(vm, &#39;beforeCreate&#39;)\n    initState(vm)\n    callHook(vm, &#39;created&#39;)\n    initRender(vm)\n</code></pre>\n<p>根据上面的代码，在生产环境下会为实例添加两个属性，并且属性值都为实例本身：</p>\n<pre><code class=\"js\">vm._renderProxy = vm\nvm._self = vm\n</code></pre>\n<p>然后，调用了四个 <code>init*</code> 方法分别为：<code>initLifecycle</code>、<code>initEvents</code>、<code>initState</code>、<code>initRender</code>，且在 <code>initState</code> 前后分别回调了生命周期钩子 <code>beforeCreate</code> 和 <code>created</code>，而 <code>initRender</code> 是在 <code>created</code> 钩子执行之后执行的，看到这里，也就明白了为什么 created 的时候不能操作DOM了。因为这个时候还没有渲染真正的DOM元素到文档中。<code>created</code> 仅仅代表数据状态的初始化完成。</p>\n<p>根据四个 <code>init*</code> 方法的引用关系打开对应的文件查看对应的方法，我们发现，这些方法是在处理Vue实例对象，以及做一些初始化的工作，类似整理Vue构造函数一样，我同样针对Vue实例做了属性和方法的整理，如下：</p>\n<pre><code class=\"js\">// 在 Vue.prototype._init 中添加的属性         **********************************************************\nthis._uid = uid++\nthis._isVue = true\nthis.$options = {\n    components,\n    directives,\n    filters,\n    _base,\n    el,\n    data: mergedInstanceDataFn()\n}\nthis._renderProxy = this\nthis._self = this\n\n// 在 initLifecycle 中添加的属性        **********************************************************\nthis.$parent = parent\nthis.$root = parent ? parent.$root : this\n\nthis.$children = []\nthis.$refs = {}\n\nthis._watcher = null\nthis._inactive = false\nthis._isMounted = false\nthis._isDestroyed = false\nthis._isBeingDestroyed = false\n\n// 在 initEvents     中添加的属性         **********************************************************\nthis._events = {}\nthis._updateListeners = function(){}\n\n// 在 initState 中添加的属性        **********************************************************\nthis._watchers = []\n    // initData\n    this._data\n\n// 在 initRender     中添加的属性     **********************************************************\nthis.$vnode = null // the placeholder node in parent tree\nthis._vnode = null // the root of the child tree\nthis._staticTrees = null\nthis.$slots\nthis.$scopedSlots\nthis._c\nthis.$createElement\n</code></pre>\n<p>以上就是一个Vue实例所包含的属性和方法，除此之外要注意的是，在 <code>initEvents</code> 中除了添加属性之外，如果有 <code>vm.$options._parentListeners</code> 还要调用 <code>vm._updateListeners()</code> 方法，在 <code>initState</code> 中又调用了一些其他init方法，如下：</p>\n<pre><code class=\"js\">export function initState (vm: Component) {\n  vm._watchers = []\n  initProps(vm)\n  initMethods(vm)\n  initData(vm)\n  initComputed(vm)\n  initWatch(vm)\n}\n</code></pre>\n<p>最后在 <code>initRender</code> 中如果有 <code>vm.$options.el</code> 还要调用 <code>vm.$mount(vm.$options.el)</code>，如下：</p>\n<pre><code class=\"js\">  if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n  }\n</code></pre>\n<p>这就是为什么如果不传递 <code>el</code> 选项就需要手动 mount 的原因了。</p>\n<p>那么我们依照我们本节开头的的例子，以及初始化的先后顺序来逐一看一看都发生了什么。我们将 <code>initState</code> 中的 <code>init*</code> 方法展开来看，执行顺序应该是这样的（从上到下的顺序执行）：</p>\n<pre><code>initLifecycle(vm)\ninitEvents(vm)\ncallHook(vm, &#39;beforeCreate&#39;)\ninitProps(vm)\ninitMethods(vm)\ninitData(vm)\ninitComputed(vm)\ninitWatch(vm)\ncallHook(vm, &#39;created&#39;)\ninitRender(vm)\n</code></pre><p>首先是 <code>initLifecycle</code>，这个函数的作用就是在实例上添加一些属性，然后是 <code>initEvents</code>，由于 <code>vm.$options._parentListeners</code> 的值为 <code>undefined</code> 所以也仅仅是在实例上添加属性， <code>vm._updateListeners(listeners)</code> 并不会执行，由于我们只传递了 <code>el</code> 和 <code>data</code>，所以 <code>initProps</code>、<code>initMethods</code>、<code>initComputed</code>、<code>initWatch</code> 这四个方法什么都不会做，只有 <code>initData</code> 会执行。最后是 <code>initRender</code>，除了在实例上添加一些属性外，由于我们传递了 <code>el</code> 选项，所以会执行 <code>vm.$mount(vm.$options.el)</code>。</p>\n<p>综上所述：按照我们的例子那样写，初始化工作只包含两个主要内容即：<code>initData</code> 和 <code>initRender</code>。</p>\n<h2 id=\"五、通过initData看Vue的数据响应系统\"><a href=\"#五、通过initData看Vue的数据响应系统\" class=\"headerlink\" title=\"五、通过initData看Vue的数据响应系统\"></a>五、通过<code>initData</code>看Vue的数据响应系统</h2><p>Vue的数据响应系统包含三个部分：<code>Observer</code>、<code>Dep</code>、<code>Watcher</code>。关于数据响应系统的内容真的已经被文章讲烂了，所以我就简单的说一下，力求大家能理解就ok，我们还是先看一下 <code>initData</code> 中的代码：</p>\n<pre><code>function initData (vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === &#39;function&#39;\n    ? data.call(vm)\n    : data || {}\n  if (!isPlainObject(data)) {\n    data = {}\n    process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(\n      &#39;data functions should return an object:\\n&#39; +\n      &#39;https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#39;,\n      vm\n    )\n  }\n  // proxy data on instance\n  const keys = Object.keys(data)\n  const props = vm.$options.props\n  let i = keys.length\n  while (i--) {\n    if (props &amp;&amp; hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(\n        `The data property &quot;${keys[i]}&quot; is already declared as a prop. ` +\n        `Use prop default value instead.`,\n        vm\n      )\n    } else {\n      proxy(vm, keys[i])\n    }\n  }\n  // observe data\n  observe(data)\n  data.__ob__ &amp;&amp; data.__ob__.vmCount++\n}\n</code></pre><p>首先，先拿到 data 数据：<code>let data = vm.$options.data</code>，大家还记得此时 <code>vm.$options.data</code> 的值应该是通过 <code>mergeOptions</code> 合并处理后的 <code>mergedInstanceDataFn</code> 函数吗？所以在得到 data 后，它又判断了 data 的数据类型是不是 ‘function’，最终的结果是：data 还是我们传入的数据选项的 data，即：</p>\n<pre><code>data: {\n    a: 1,\n    b: [1, 2, 3]\n}\n</code></pre><p>然后在实例对象上定义 <code>_data</code> 属性，该属性与 <code>data</code> 是相同的引用。</p>\n<p>然后是一个 <code>while</code> 循环，循环的目的是在实例对象上对数据进行代理，这样我们就能通过 <code>this.a</code> 来访问 <code>data.a</code> 了，代码的处理是在 <code>proxy</code> 函数中，该函数非常简单，仅仅是在实例对象上设置与 <code>data</code> 属性同名的访问器属性，然后使用 <code>_data</code> 做数据劫持，如下：</p>\n<pre><code>function proxy (vm: Component, key: string) {\n  if (!isReserved(key)) {\n    Object.defineProperty(vm, key, {\n      configurable: true,\n      enumerable: true,\n      get: function proxyGetter () {\n        return vm._data[key]\n      },\n      set: function proxySetter (val) {\n        vm._data[key] = val\n      }\n    })\n  }\n}\n</code></pre><p>做完数据的代理，就正式进入响应系统，</p>\n<pre><code>observe(data)\n</code></pre><p>我们说过，数据响应系统主要包含三部分：<code>Observer</code>、<code>Dep</code>、<code>Watcher</code>，代码分别存放在：<code>observer/index.js</code>、<code>observer/dep.js</code> 以及 <code>observer/watcher.js</code> 文件中，这回我们换一种方式，我们先不看其源码，大家先跟着我的思路来思考，最后回头再去看代码，你会有一种：”奥，不过如此“的感觉。</p>\n<p>假如，我们有如下代码：</p>\n<pre><code class=\"js\">var data = {\n    a: 1,\n    b: {\n        c: 2\n    }\n}\n\nobserver(data)\n\nnew Watch(&#39;a&#39;, () =&gt; {\n    alert(9)\n})\nnew Watch(&#39;a&#39;, () =&gt; {\n    alert(90)\n})\nnew Watch(&#39;b.c&#39;, () =&gt; {\n    alert(80)\n})\n</code></pre>\n<p>这段代码目的是，首先定义一个数据对象 <code>data</code>，然后通过 observer 对其进行观测，之后定义了三个观察者，当数据有变化时，执行相应的方法，这个功能使用Vue的实现原来要如何去实现？其实就是在问 <code>observer</code> 怎么写？<code>Watch</code> 构造函数又怎么写？接下来我们逐一实现。</p>\n<p>首先，observer 的作用是：将数据对象data的属性转换为访问器属性：</p>\n<pre><code>class Observer {\n    constructor (data) {\n        this.walk(data)\n    }\n    walk (data) {\n        // 遍历 data 对象属性，调用 defineReactive 方法\n        let keys = Object.keys(data)\n        for(let i = 0; i &lt; keys.length; i++){\n            defineReactive(data, keys[i], data[keys[i]])\n        }\n    }\n}\n\n// defineReactive方法仅仅将data的属性转换为访问器属性\nfunction defineReactive (data, key, val) {\n    // 递归观测子属性\n    observer(val)\n\n    Object.defineProperty(data, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            return val\n        },\n        set: function (newVal) {\n            if(val === newVal){\n                return\n            }\n            // 对新值进行观测\n            observer(newVal)\n        }\n    })\n}\n\n// observer 方法首先判断data是不是纯JavaScript对象，如果是，调用 Observer 类进行观测\nfunction observer (data) {\n    if(Object.prototype.toString.call(data) !== &#39;[object Object]&#39;) {\n        return\n    }\n    new Observer(data)\n}\n</code></pre><p>上面的代码中，我们定义了 observer 方法，该方法检测了数据data是不是纯JavaScript对象，如果是就调用 <code>Observer</code> 类，并将 <code>data</code> 作为参数透传。在 <code>Observer</code> 类中，我们使用 <code>walk</code> 方法对数据data的属性循环调用 <code>defineReactive</code> 方法，<code>defineReactive</code> 方法很简单，仅仅是将数据data的属性转为访问器属性，并对数据进行递归观测，否则只能观测数据data的直属子属性。这样我们的第一步工作就完成了，当我们修改或者获取data属性值的时候，通过 <code>get</code> 和 <code>set</code> 即能获取到通知。</p>\n<p>我们继续往下看，来看一下 <code>Watch</code>：</p>\n<pre><code>new Watch(&#39;a&#39;, () =&gt; {\n    alert(9)\n})\n</code></pre><p>现在的问题是，<code>Watch</code> 要怎么和 <code>observer</code> 关联？？？？？？？我们看看 <code>Watch</code> 它知道些什么，通过上面调用 <code>Watch</code> 的方式，传递给 <code>Watch</code> 两个参数，一个是 ‘a’ 我们可以称其为表达式，另外一个是回调函数。所以我们目前只能写出这样的代码：</p>\n<pre><code>class Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n    }\n}\n</code></pre><p>那么要怎么关联呢，大家看下面的代码会发生什么：</p>\n<pre><code>class Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n        data[exp]\n    }\n}\n</code></pre><p>多了一句 <code>data[exp]</code>，这句话是在干什么？是不是在获取 <code>data</code> 下某个属性的值，比如 exp 为 ‘a’ 的话，那么 <code>data[exp]</code> 就相当于在获取 <code>data.a</code> 的值，那这会放生什么？大家不要忘了，此时数据 <code>data</code> 下的属性已经是访问器属性了，所以这么做的结果会直接触发对应属性的 <code>get</code> 函数，这样我们就成功的和 <code>observer</code> 产生了关联，但这样还不够，我们还是没有达到目的，不过我们已经无限接近了，我们继续思考看一下可不可以这样：</p>\n<blockquote>\n<p>既然在 <code>Watch</code> 中对表达式求值，能够触发 <code>observer</code> 的 <code>get</code>，那么可不可以在 <code>get</code> 中收集 <code>Watch</code> 中函数呢？</p>\n</blockquote>\n<p>答案是可以的，不过这个时候我们就需要 <code>Dep</code> 出场了，它是一个依赖收集器。我们的思路是：<code>data</code> 下的每一个属性都有一个唯一的 <code>Dep</code> 对象，在 <code>get</code> 中收集仅针对该属性的依赖，然后在 <code>set</code> 方法中触发所有收集的依赖，这样就搞定了，看如下代码：</p>\n<pre><code>class Dep {\n    constructor () {\n        this.subs = []\n    }\n    addSub () {\n        this.subs.push(Dep.target)\n    }\n    notify () {\n        for(let i = 0; i &lt; this.subs.length; i++){\n            this.subs[i].fn()\n        }\n    }\n}\nDep.target = null\nfunction pushTarget(watch){\n    Dep.target = watch\n}\n\nclass Watch {\n    constructor (exp, fn) {\n        this.exp = exp\n        this.fn = fn\n        pushTarget(this)\n        data[exp]\n    }\n}\n</code></pre><p>上面的代码中，我们在 <code>Watch</code> 中增加了 <code>pushTarget(this)</code>，可以发现，这句代码的作用是将 <code>Dep.target</code> 的值设置为该Watch对象。在 <code>pushTarget</code> 之后我们才对表达式进行求值，接着，我们修改 <code>defineReactive</code> 代码如下</p>\n<pre><code>function defineReactive (data, key, val) {\n    observer(val)\n    let dep = new Dep()        // 新增\n    Object.defineProperty(data, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n            dep.addSub()    // 新增\n            return val\n        },\n        set: function (newVal) {\n            if(val === newVal){\n                return\n            }\n            observer(newVal)\n            dep.notify()    // 新增\n        }\n    })\n}\n</code></pre><p>如标注，新增了三句代码，我们知道，<code>Watch</code> 中对表达式求值会触发 <code>get</code> 方法，我们在 <code>get</code> 方法中调用了 <code>dep.addSub</code>，也就执行了这句代码：<code>this.subs.push(Dep.target)</code>，由于在这句代码执行之前，<code>Dep.target</code> 的值已经被设置为一个 <code>Watch</code> 对象了，所以最终结果就是收集了一个 <code>Watch</code> 对象，然后在 <code>set</code> 方法中我们调用了 <code>dep.notify</code>，所以当data属性值变化的时候，就会通过 <code>dep.notify</code> 循环调用所有收集的Watch对象中的回调函数：</p>\n<pre><code>notify () {\n    for(let i = 0; i &lt; this.subs.length; i++){\n        this.subs[i].fn()\n    }\n}\n</code></pre><p>这样 <code>observer</code>、<code>Dep</code>、<code>Watch</code> 三者就联系成为一个有机的整体，实现了我们最初的目标，完整的代码可以戳这里：<a href=\"https://github.com/HcySunYang/observer-dep-watch\" target=\"_blank\" rel=\"external\">observer-dep-watch</a>。这里还给大家挖了个坑，因为我们没有处理对数组的观测，由于比较复杂并且这又不是我们讨论的重点，如果大家想了解可以戳我的这篇文章：<a href=\"http://hcysun.me/2016/04/28/JavaScript%E5%AE%9E%E7%8E%B0MVVM%E4%B9%8B%E6%88%91%E5%B0%B1%E6%98%AF%E6%83%B3%E7%9B%91%E6%B5%8B%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/\">JavaScript实现MVVM之我就是想监测一个普通对象的变化</a>，另外，在 Watch 中对表达式求值的时候也只做了直接子属性的求值，所以如果 exp 的值为 ‘a.b’ 的时候，就不可以用了，Vue的做法是使用 <code>.</code> 分割表达式字符串为数组，然后遍历一下对其进行求值，大家可以查看其源码。如下：</p>\n<pre><code>/**\n * Parse simple path.\n */\nconst bailRE = /[^\\w.$]/\nexport function parsePath (path: string): any {\n  if (bailRE.test(path)) {\n    return\n  } else {\n    const segments = path.split(&#39;.&#39;)\n    return function (obj) {\n      for (let i = 0; i &lt; segments.length; i++) {\n        if (!obj) return\n        obj = obj[segments[i]]\n      }\n      return obj\n    }\n  }\n}\n</code></pre><p>Vue 的求值代码是在 <code>src/core/util/lang.js</code> 文件中 <code>parsePath</code> 函数中实现的。总结一下Vue的依赖收集过程应该是这样的：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgdep.png\" alt=\"Vue的依赖收集过程\"></p>\n<p>实际上，Vue并没有直接在 <code>get</code> 中调用 <code>addSub</code>，而是调用的 <code>dep.depend</code>，目的是将当前的 dep 对象收集到 watch 对象中，如果要完整的流程，应该是这样的：（大家注意数据的每一个字段都拥有自己的 <code>dep</code> 对象和 <code>get</code> 方法。）</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/all.png\" alt=\"Vue完整的收集依赖的流程\"></p>\n<p>这样 Vue 就建立了一套数据响应系统，之前我们说过，按照我们的例子那样写，初始化工作只包含两个主要内容即：<code>initData</code> 和 <code>initRender</code>。现在 <code>initData</code> 我们分析完了，接下来看一看 <code>initRender</code></p>\n<h2 id=\"六、通过initRender看Vue的-render-渲染-与-re-render-重新渲染\"><a href=\"#六、通过initRender看Vue的-render-渲染-与-re-render-重新渲染\" class=\"headerlink\" title=\"六、通过initRender看Vue的 render(渲染) 与 re-render(重新渲染)\"></a>六、通过<code>initRender</code>看Vue的 render(渲染) 与 re-render(重新渲染)</h2><p>在 <code>initRender</code> 方法中，因为我们的例子中传递了 <code>el</code> 选项，所以下面的代码会执行：</p>\n<pre><code>  if (vm.$options.el) {\n    vm.$mount(vm.$options.el)\n  }\n</code></pre><p>这里，调用了 <code>$mount</code> 方法，在还原Vue构造函数的时候，我们整理过所有的方法，其中 <code>$mount</code> 方法在两个地方出现过：</p>\n<p>1、在 <code>web-runtime.js</code> 文件中：</p>\n<pre><code>Vue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el &amp;&amp; inBrowser ? query(el) : undefined\n  return this._mount(el, hydrating)\n}\n</code></pre><p>它的作用是通过 <code>el</code> 获取相应的DOM元素，然后调用 <code>lifecycle.js</code> 文件中的 <code>_mount</code> 方法。</p>\n<p>2、在 <code>web-runtime-with-compiler.js</code> 文件中：</p>\n<pre><code>// 缓存了来自 web-runtime.js 的 $mount 方法\nconst mount = Vue.prototype.$mount\n// 重写 $mount 方法\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  // 根据 el 获取相应的DOM元素\n  el = el &amp;&amp; query(el)\n  // 不允许你将 el 挂载到 html 标签或者 body 标签\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; warn(\n      `Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`\n    )\n    return this\n  }\n\n  const options = this.$options\n  // 如果我们没有写 render 选项，那么就尝试将 template 或者 el 转化为 render 函数\n  if (!options.render) {\n    let template = options.template\n    if (template) {\n      if (typeof template === &#39;string&#39;) {\n        if (template.charAt(0) === &#39;#&#39;) {\n          template = idToTemplate(template)\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== &#39;production&#39; &amp;&amp; !template) {\n            warn(\n              `Template element not found or is empty: ${options.template}`,\n              this\n            )\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML\n      } else {\n        if (process.env.NODE_ENV !== &#39;production&#39;) {\n          warn(&#39;invalid template option:&#39; + template, this)\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el)\n    }\n    if (template) {\n      const { render, staticRenderFns } = compileToFunctions(template, {\n        warn,\n        shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this)\n      options.render = render\n      options.staticRenderFns = staticRenderFns\n    }\n  }\n  // 调用已经缓存下来的 web-runtime.js 文件中的 $mount 方法\n  return mount.call(this, el, hydrating)\n}\n</code></pre><p>分析一下可知 <code>web-runtime-with-compiler.js</code> 的逻辑如下：</p>\n<p>1、缓存来自 <code>web-runtime.js</code> 文件的 <code>$mount</code> 方法</p>\n<p>2、判断有没有传递 <code>render</code> 选项，如果有直接调用来自 <code>web-runtime.js</code> 文件的 $mount 方法</p>\n<p>3、如果没有传递 <code>render</code> 选项，那么查看有没有 <code>template</code> 选项，如果有就使用 <code>compileToFunctions</code> 函数根据其内容编译成 <code>render</code> 函数</p>\n<p>4、如果没有 <code>template</code> 选项，那么查看有没有 <code>el</code> 选项，如果有就使用 <code>compileToFunctions</code> 函数将其内容(template = getOuterHTML(el))编译成 <code>render</code> 函数</p>\n<p>5、将编译成的 <code>render</code> 函数挂载到 <code>this.$options</code> 属性下，并调用缓存下来的 <code>web-runtime.js</code> 文件中的 $mount 方法</p>\n<p>简单的用一张图表示 <code>mount</code> 方法的调用关系，从上至下调用：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgmount.png\" alt=\"mount调用关系\"></p>\n<p>不过不管怎样，我们发现这些步骤的最终目的是生成 <code>render</code> 函数，然后再调用 <code>lifecycle.js</code> 文件中的 <code>_mount</code> 方法，我们看看这个方法做了什么事情，查看 <code>_mount</code> 方法的代码，这是简化过得：</p>\n<pre><code>  Vue.prototype._mount = function (\n    el?: Element | void,\n    hydrating?: boolean\n  ): Component {\n    const vm: Component = this\n\n    // 在Vue实例对象上添加 $el 属性，指向挂载点元素\n    vm.$el = el\n\n    // 触发 beforeMount 生命周期钩子\n    callHook(vm, &#39;beforeMount&#39;)\n\n    vm._watcher = new Watcher(vm, () =&gt; {\n      vm._update(vm._render(), hydrating)\n    }, noop)\n\n    // 如果是第一次mount则触发 mounted 生命周期钩子\n    if (vm.$vnode == null) {\n      vm._isMounted = true\n      callHook(vm, &#39;mounted&#39;)\n    }\n    return vm\n  }\n</code></pre><p>上面的代码很简单，该注释的都注释了，唯一需要看的就是这段代码：</p>\n<pre><code>vm._watcher = new Watcher(vm, () =&gt; {\n  vm._update(vm._render(), hydrating)\n}, noop)\n</code></pre><p>看上去很眼熟有没有？我们平时使用Vue都是这样使用 watch的：</p>\n<pre><code>this.$watch(&#39;a&#39;, (newVal, oldVal) =&gt; {\n\n})\n// 或者\nthis.$watch(function(){\n    return this.a + this.b\n}, (newVal, oldVal) =&gt; {\n\n})\n</code></pre><p>第一个参数是 表达式或者函数，第二个参数是回调函数，第三个参数是可选的选项。原理是 <code>Watch</code> 内部对表达式求值或者对函数求值从而触发数据的 <code>get</code> 方法收集依赖。可是 <code>_mount</code> 方法中使用 <code>Watcher</code> 的时候第一个参数 <code>vm</code> 是什么鬼。我们不妨去看看源码中 <code>$watch</code> 函数是如何实现的，根据之前还原Vue构造函数中所整理的内容可知：<code>$warch</code> 方法是在 <code>src/core/instance/state.js</code> 文件中的 <code>stateMixin</code> 方法中定义的，源码如下：</p>\n<pre><code>  Vue.prototype.$watch = function (\n    expOrFn: string | Function,\n    cb: Function,\n    options?: Object\n  ): Function {\n    const vm: Component = this\n    options = options || {}\n    options.user = true\n    const watcher = new Watcher(vm, expOrFn, cb, options)\n    if (options.immediate) {\n      cb.call(vm, watcher.value)\n    }\n    return function unwatchFn () {\n      watcher.teardown()\n    }\n  }\n</code></pre><p>我们可以发现，<code>$warch</code> 其实是对 <code>Watcher</code> 的一个封装，内部的 <code>Watcher</code> 的第一个参数实际上也是 <code>vm</code> 即：Vue实例对象，这一点我们可以在 <code>Watcher</code> 的源码中得到验证，代开 <code>observer/watcher.js</code> 文件查看：</p>\n<pre><code class=\"js\">export default class Watcher {\n\n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: Object = {}\n  ) {\n\n  }\n}\n</code></pre>\n<p>可以发现真正的 <code>Watcher</code> 第一个参数实际上就是 <code>vm</code>。第二个参数是表达式或者函数，然后以此类推，所以现在再来看 <code>_mount</code> 中的这段代码：</p>\n<pre><code>vm._watcher = new Watcher(vm, () =&gt; {\n  vm._update(vm._render(), hydrating)\n}, noop)\n</code></pre><p>忽略第一个参数 <code>vm</code>，也就说，<code>Watcher</code> 内部应该对第二个参数求值，也就是运行这个函数：</p>\n<pre><code>() =&gt; {\n  vm._update(vm._render(), hydrating)\n}\n</code></pre><p>所以 <code>vm._render()</code> 函数被第一个执行，该函数在 <code>src/core/instance/render.js</code> 中，该方法中的代码很多，下面是简化过的：</p>\n<pre><code>  Vue.prototype._render = function (): VNode {\n    const vm: Component = this\n    // 解构出 $options 中的 render 函数\n    const {\n      render,\n      staticRenderFns,\n      _parentVnode\n    } = vm.$options\n    ...\n\n    let vnode\n    try {\n      // 运行 render 函数\n      vnode = render.call(vm._renderProxy, vm.$createElement)\n    } catch (e) {\n      ...\n    }\n\n    // set parent\n    vnode.parent = _parentVnode\n    return vnode\n  }\n</code></pre><p><code>_render</code> 方法首先从 <code>vm.$options</code> 中解构出 <code>render</code> 函数，大家应该记得：<code>vm.$options.render</code> 方法是在 <code>web-runtime-with-compiler.js</code> 文件中通过 <code>compileToFunctions</code> 方法将 <code>template</code> 或 <code>el</code> 编译而来的。解构出 <code>render</code> 函数后，接下来便执行了该方法：</p>\n<pre><code>vnode = render.call(vm._renderProxy, vm.$createElement)\n</code></pre><p>其中使用 <code>call</code> 指定了 <code>render</code> 函数的作用域环境为 <code>vm._renderProxy</code>，这个属性在我们整理实例对象的时候知道，他是在 <code>Vue.prototype._init</code> 方法中被添加的，即：<code>vm._renderProxy = vm</code>，其实就是Vue实例对象本身，然后传递了一个参数：<code>vm.$createElement</code>。那么 <code>render</code> 函数到底是干什么的呢？让我们根据上面那句代码猜一猜，我们已经知道 <code>render</code> 函数是从 <code>template</code> 或 <code>el</code> 编译而来的，如果没错的话应该是返回一个虚拟DOM对象。我们不妨使用 <code>console.log</code> 打印一下 <code>render</code> 函数，当我们的模板这样编写时：</p>\n<pre><code>&lt;ul id=&quot;app&quot;&gt;\n  &lt;li&gt;{{a}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>打印的 <code>render</code> 函数如下：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgr2.png\" alt=\"render函数1\"></p>\n<p>我们修改模板为：</p>\n<pre><code>&lt;ul id=&quot;app&quot;&gt;\n  &lt;li v-for=&quot;i in b&quot;&gt;{{a}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre><p>打印出来的 <code>render</code> 函数如下：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgr3.png\" alt=\"render函数2\"></p>\n<p>其实了解Vue2.x版本的同学都知道，Vue提供了 <code>render</code> 选项，作为 <code>template</code> 的代替方案，同时为JavaScript提供了完全编程的能力，下面两种编写模板的方式实际是等价的：</p>\n<pre><code class=\"js\">// 方案一：\nnew Vue({\n    el: &#39;#app&#39;,\n    data: {\n        a: 1\n    },\n    template: &#39;&lt;ul&gt;&lt;li&gt;{{a}}&lt;/li&gt;&lt;li&gt;{{a}}&lt;/li&gt;&lt;/ul&gt;&#39;\n})\n\n// 方案二：\nnew Vue({\n    el: &#39;#app&#39;,\n    render: function (createElement) {\n        createElement(&#39;ul&#39;, [\n            createElement(&#39;li&#39;, this.a),\n            createElement(&#39;li&#39;, this.a)\n        ])\n    }\n})\n</code></pre>\n<p>现在我们再来看我们打印的 <code>render</code> 函数：</p>\n<pre><code>function anonymous() {\n    with(this){\n        return _c(&#39;ul&#39;, { \n            attrs: {&quot;id&quot;: &quot;app&quot;}\n        },[\n            _c(&#39;li&#39;, [_v(_s(a))])\n        ])\n    }\n}\n</code></pre><p>是不是与我们自己写 <code>render</code> 函数很像？因为 render 函数的作用域被绑定到了Vue实例，即：<code>render.call(vm._renderProxy, vm.$createElement)</code>，所以上面代码中 <code>_c</code>、<code>_v</code>、<code>_s</code> 以及变量 <code>a</code>相当于Vue实例下的方法和变量。大家还记得诸如 <code>_c</code>、<code>_v</code>、<code>_s</code> 这样的方法在哪里定义的吗？我们在整理Vue构造函数的时候知道，他们在 <code>src/core/instance/render.js</code> 文件中的 <code>renderMixin</code> 方法中定义，除了这些之外还有诸如：<code>_l</code>、 <code>_m</code>、 <code>_o</code> 等等。其中 <code>_l</code> 就在我们使用 <code>v-for</code> 指令的时候出现了。所以现在大家知道为什么这些方法都被定义在 <code>render.js</code> 文件中了吧，因为他们就是为了构造出 <code>render</code> 函数而存在的。</p>\n<p>现在我们已经知道了 <code>render</code> 函数的长相，也知道了 <code>render</code> 函数的作用域是Vue实例本身即：<code>this</code>(或<code>vm</code>)。那么当我们执行 <code>render</code> 函数时，其中的变量如：<code>a</code>，就相当于：<code>this.a</code>，我们知道这是在求值，所以 <code>_mount</code> 中的这段代码：</p>\n<pre><code>vm._watcher = new Watcher(vm, () =&gt; {\n  vm._update(vm._render(), hydrating)\n}, noop)\n</code></pre><p>当 <code>vm._render</code> 执行的时候，所依赖的变量就会被求值，并被收集为依赖。按照Vue中 <code>watcher.js</code> 的逻辑，当依赖的变量有变化时不仅仅回调函数被执行，实际上还要重新求值，即还要执行一遍：</p>\n<pre><code>() =&gt; {\n  vm._update(vm._render(), hydrating)\n}\n</code></pre><p>这实际上就做到了 <code>re-render</code>，因为 <code>vm._update</code> 就是文章开头所说的虚拟DOM中的最后一步：<code>patch</code></p>\n<p><code>vm_render</code> 方法最终返回一个 <code>vnode</code> 对象，即虚拟DOM，然后作为 <code>vm_update</code> 的第一个参数传递了过去，我们看一下 <code>vm_update</code> 的逻辑，在 <code>src/core/instance/lifecycle.js</code> 文件中有这么一段代码：</p>\n<pre><code class=\"js\">    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      )\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n</code></pre>\n<p>如果还没有 <code>prevVnode</code> 说明是首次渲染，直接创建真实DOM。如果已经有了 <code>prevVnode</code> 说明不是首次渲染，那么就采用 <code>patch</code> 算法进行必要的DOM操作。这就是Vue更新DOM的逻辑。只不过我们没有将 virtual DOM 内部的实现。</p>\n<p>现在我们来好好理理思路，当我们写如下代码时：</p>\n<pre><code>new Vue({\n    el: &#39;#app&#39;,\n    data: {\n        a: 1,\n        b: [1, 2, 3]\n    }\n})\n</code></pre><p>Vue 所做的事：</p>\n<blockquote>\n<p>1、构建数据响应系统，使用 <code>Observer</code> 将数据data转换为访问器属性；将 <code>el</code> 编译为 <code>render</code> 函数，<code>render</code> 函数返回值为虚拟DOM</p>\n<p>2、在 <code>_mount</code> 中对 <code>_update</code> 求值，而 <code>_update</code> 又会对 <code>render</code> 求值，<code>render</code> 内部又会对依赖的变量求值，收集为被求值的变量的依赖，当变量改变时，<code>_update</code> 又会重新执行一遍，从而做到 <code>re-render</code>。</p>\n</blockquote>\n<p>用一张详细一点的图表示就是这样的：</p>\n<p><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/vueimgdetail.png\" alt=\"详细流程\"></p>\n<p>到此，我们从大体流程，挑着重点的走了一遍Vue，但是还有很多细节我们没有提及，比如：</p>\n<p>1、将模板转为 <code>render</code> 函数的时候，实际是先生成的抽象语法树（AST），再将抽象语法树转成的 <code>render</code> 函数，而且这一整套的代码我们也没有提及，因为他在复杂了，其实这部分内容就是在完正则。</p>\n<p>2、我们也没有详细的讲 Virtual DOM 的实现原理，网上已经有文章讲了，大家可以搜一搜</p>\n<p>3、我们的例子中仅仅传递了 <code>el</code> ，<code>data</code> 选项，大家知道 Vue 支持的选项很多，比如我们都没有讲到，但都是触类旁通的，比如你搞清楚了 <code>data</code> 选项再去看 <code>computed</code> 选项或者 <code>props</code> 选项就会很容易，比如你知道了 <code>Watcher</code> 的工作机制再去看 <code>watch</code> 选项就会很容易。</p>\n<p>本篇文章作为Vue源码的启蒙文章，也许还有很多缺陷，全当抛砖引玉了。</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 11.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-11","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvgr0002ybfcj95dch89","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 10.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-10","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvh30005ybfcg1mfp77j","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 12.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-12","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvh50006ybfcaqygrih5","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 13.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-13","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvh70007ybfcq1i5ajel","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 2.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-2","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvh90009ybfcwahpxiar","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 3.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-3","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvh9000bybfcgfqv7n69","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 4.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-4","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvha000cybfcf5vtfw0g","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 5.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-5","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvhd000eybfcd1wagbpq","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 6.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-6","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvhf000gybfcjd46tttq","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 7.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-7","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvhg000hybfclb64l6yd","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 8.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-8","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvhi000iybfcahlj80wz","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本 9.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本-9","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvhj000jybfcp97guthw","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world的副本.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world的副本","published":1,"date":"2017-08-07T03:16:39.000Z","updated":"2017-08-07T03:16:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvhk000kybfc64g1j2eg","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"I want to say to you","_content":"\nHi，这应该是一篇中文的文章。用一个英文的标题，是为了避免我或者你周围的人看到----怪怪的感觉。\n\n> 这个网址是临时的，除了你和我别人都看不到，不要担心哦，等你看完了我就删掉了。\n\n写字好不看，作为一个程序员，还是决定使用拿手一点的本领将心里的东西传递给你，所以就有了这篇线上的文章。\n\n## 正文\n\n施佳，我经常站在你的角度，尝试着去思考一些问题，但是我发现我对你了解太少了，真的不知道该怎么样才能和你走的更近一点儿，从昨天在大像上和你聊天到现在，也不过24小时。在你看来，应该会比较突然，但是在我的角度（关注你很久了，是不是有点细思极恐啊.....）。\n\n我感觉我有点喜欢你，就是觉得你特别可爱😊（好漂亮er...）。我知道，两个人的关系呢，是一方决定不了的，这是一个双方的事情，我也想不到我有什么优势，有什么能让你对我有好感的。。。。。(允悲)。\n\n两个人合不合适也不是有没有感觉就能决定的，家庭背景，三观，彼此喜欢的类型可能都不一样，这些都是先决条件，想着想着：`找个女朋友好难啊......`。\n\n我不知道还能不能有机会更了解你一点，或者你是否有兴趣了解了解我，我当然希望 `有机会`。\n\n所以：重点来了\n\n> 施佳，今天让你加我微信的时候，把纸条递给你你笑了一下，告诉你：我特别特别特别开心。但是你不加我微信的时候，就非常失落，你是真的一点兴趣都没有吗？还是觉得要了解的多一些呢？\n\n假如你真的就没有多想过，我也不想总这样打扰你，否则你会烦的，你可以直接和我说我们不合适就好啦，我也不会问太多，不合适就是不合适，何必自取其辱，也会祝福你。\n\n但现在，还是感觉我就像一个漂浮在空中的羽毛，不知道最终会落到哪里，工作也没法集中精神，今早给你送纸条的时候我都不知道我哪来的勇气，，，，，，，，，，，，回到座位上 `有种刚玩完过山车的感觉.....`，想知道你心理怎么想的，希望你能和我说说心里话，`Everything I can accept`。\n\n如果有想说的，大象说就好啦，耽误你时间了，谢谢。\n\n\n\n","source":"_posts/施佳.md","raw":"---\ntitle: I want to say to you\n---\n\nHi，这应该是一篇中文的文章。用一个英文的标题，是为了避免我或者你周围的人看到----怪怪的感觉。\n\n> 这个网址是临时的，除了你和我别人都看不到，不要担心哦，等你看完了我就删掉了。\n\n写字好不看，作为一个程序员，还是决定使用拿手一点的本领将心里的东西传递给你，所以就有了这篇线上的文章。\n\n## 正文\n\n施佳，我经常站在你的角度，尝试着去思考一些问题，但是我发现我对你了解太少了，真的不知道该怎么样才能和你走的更近一点儿，从昨天在大像上和你聊天到现在，也不过24小时。在你看来，应该会比较突然，但是在我的角度（关注你很久了，是不是有点细思极恐啊.....）。\n\n我感觉我有点喜欢你，就是觉得你特别可爱😊（好漂亮er...）。我知道，两个人的关系呢，是一方决定不了的，这是一个双方的事情，我也想不到我有什么优势，有什么能让你对我有好感的。。。。。(允悲)。\n\n两个人合不合适也不是有没有感觉就能决定的，家庭背景，三观，彼此喜欢的类型可能都不一样，这些都是先决条件，想着想着：`找个女朋友好难啊......`。\n\n我不知道还能不能有机会更了解你一点，或者你是否有兴趣了解了解我，我当然希望 `有机会`。\n\n所以：重点来了\n\n> 施佳，今天让你加我微信的时候，把纸条递给你你笑了一下，告诉你：我特别特别特别开心。但是你不加我微信的时候，就非常失落，你是真的一点兴趣都没有吗？还是觉得要了解的多一些呢？\n\n假如你真的就没有多想过，我也不想总这样打扰你，否则你会烦的，你可以直接和我说我们不合适就好啦，我也不会问太多，不合适就是不合适，何必自取其辱，也会祝福你。\n\n但现在，还是感觉我就像一个漂浮在空中的羽毛，不知道最终会落到哪里，工作也没法集中精神，今早给你送纸条的时候我都不知道我哪来的勇气，，，，，，，，，，，，回到座位上 `有种刚玩完过山车的感觉.....`，想知道你心理怎么想的，希望你能和我说说心里话，`Everything I can accept`。\n\n如果有想说的，大象说就好啦，耽误你时间了，谢谢。\n\n\n\n","slug":"施佳","published":1,"date":"2017-08-09T06:53:32.000Z","updated":"2017-08-09T07:24:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj64wzvhm000lybfctt8hhnfl","content":"<p>Hi，这应该是一篇中文的文章。用一个英文的标题，是为了避免我或者你周围的人看到—-怪怪的感觉。</p>\n<blockquote>\n<p>这个网址是临时的，除了你和我别人都看不到，不要担心哦，等你看完了我就删掉了。</p>\n</blockquote>\n<p>写字好不看，作为一个程序员，还是决定使用拿手一点的本领将心里的东西传递给你，所以就有了这篇线上的文章。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>施佳，我经常站在你的角度，尝试着去思考一些问题，但是我发现我对你了解太少了，真的不知道该怎么样才能和你走的更近一点儿，从昨天在大像上和你聊天到现在，也不过24小时。在你看来，应该会比较突然，但是在我的角度（关注你很久了，是不是有点细思极恐啊…..）。</p>\n<p>我感觉我有点喜欢你，就是觉得你特别可爱😊（好漂亮er…）。我知道，两个人的关系呢，是一方决定不了的，这是一个双方的事情，我也想不到我有什么优势，有什么能让你对我有好感的。。。。。(允悲)。</p>\n<p>两个人合不合适也不是有没有感觉就能决定的，家庭背景，三观，彼此喜欢的类型可能都不一样，这些都是先决条件，想着想着：<code>找个女朋友好难啊......</code>。</p>\n<p>我不知道还能不能有机会更了解你一点，或者你是否有兴趣了解了解我，我当然希望 <code>有机会</code>。</p>\n<p>所以：重点来了</p>\n<blockquote>\n<p>施佳，今天让你加我微信的时候，把纸条递给你你笑了一下，告诉你：我特别特别特别开心。但是你不加我微信的时候，就非常失落，你是真的一点兴趣都没有吗？还是觉得要了解的多一些呢？</p>\n</blockquote>\n<p>假如你真的就没有多想过，我也不想总这样打扰你，否则你会烦的，你可以直接和我说我们不合适就好啦，我也不会问太多，不合适就是不合适，何必自取其辱，也会祝福你。</p>\n<p>但现在，还是感觉我就像一个漂浮在空中的羽毛，不知道最终会落到哪里，工作也没法集中精神，今早给你送纸条的时候我都不知道我哪来的勇气，，，，，，，，，，，，回到座位上 <code>有种刚玩完过山车的感觉.....</code>，想知道你心理怎么想的，希望你能和我说说心里话，<code>Everything I can accept</code>。</p>\n<p>如果有想说的，大象说就好啦，耽误你时间了，谢谢。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi，这应该是一篇中文的文章。用一个英文的标题，是为了避免我或者你周围的人看到—-怪怪的感觉。</p>\n<blockquote>\n<p>这个网址是临时的，除了你和我别人都看不到，不要担心哦，等你看完了我就删掉了。</p>\n</blockquote>\n<p>写字好不看，作为一个程序员，还是决定使用拿手一点的本领将心里的东西传递给你，所以就有了这篇线上的文章。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>施佳，我经常站在你的角度，尝试着去思考一些问题，但是我发现我对你了解太少了，真的不知道该怎么样才能和你走的更近一点儿，从昨天在大像上和你聊天到现在，也不过24小时。在你看来，应该会比较突然，但是在我的角度（关注你很久了，是不是有点细思极恐啊…..）。</p>\n<p>我感觉我有点喜欢你，就是觉得你特别可爱😊（好漂亮er…）。我知道，两个人的关系呢，是一方决定不了的，这是一个双方的事情，我也想不到我有什么优势，有什么能让你对我有好感的。。。。。(允悲)。</p>\n<p>两个人合不合适也不是有没有感觉就能决定的，家庭背景，三观，彼此喜欢的类型可能都不一样，这些都是先决条件，想着想着：<code>找个女朋友好难啊......</code>。</p>\n<p>我不知道还能不能有机会更了解你一点，或者你是否有兴趣了解了解我，我当然希望 <code>有机会</code>。</p>\n<p>所以：重点来了</p>\n<blockquote>\n<p>施佳，今天让你加我微信的时候，把纸条递给你你笑了一下，告诉你：我特别特别特别开心。但是你不加我微信的时候，就非常失落，你是真的一点兴趣都没有吗？还是觉得要了解的多一些呢？</p>\n</blockquote>\n<p>假如你真的就没有多想过，我也不想总这样打扰你，否则你会烦的，你可以直接和我说我们不合适就好啦，我也不会问太多，不合适就是不合适，何必自取其辱，也会祝福你。</p>\n<p>但现在，还是感觉我就像一个漂浮在空中的羽毛，不知道最终会落到哪里，工作也没法集中精神，今早给你送纸条的时候我都不知道我哪来的勇气，，，，，，，，，，，，回到座位上 <code>有种刚玩完过山车的感觉.....</code>，想知道你心理怎么想的，希望你能和我说说心里话，<code>Everything I can accept</code>。</p>\n<p>如果有想说的，大象说就好啦，耽误你时间了，谢谢。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj64wzvgl0001ybfcm1huguqd","category_id":"cj64wzvgu0003ybfct3xgwc0h","_id":"cj64wzvh9000aybfcawz666fj"}],"PostTag":[{"post_id":"cj64wzvgl0001ybfcm1huguqd","tag_id":"cj64wzvh20004ybfcvex582qo","_id":"cj64wzvhb000dybfc2bx1v954"},{"post_id":"cj64wzvgl0001ybfcm1huguqd","tag_id":"cj64wzvh80008ybfctmiekqr6","_id":"cj64wzvhf000fybfczpkm17la"}],"Tag":[{"name":"源码","_id":"cj64wzvh20004ybfcvex582qo"},{"name":"Vue","_id":"cj64wzvh80008ybfctmiekqr6"}]}}